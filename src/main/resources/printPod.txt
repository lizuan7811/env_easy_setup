class V1Pod {
    apiVersion: null
    kind: null
    metadata: class V1ObjectMeta {
        annotations: {cni.projectcalico.org/containerID=e35d8965fee506232369a091d39ea6d685bcf6e9d6a4a517e4c96ae5633f752e, cni.projectcalico.org/podIP=10.42.0.198/32, cni.projectcalico.org/podIPs=10.42.0.198/32, kubernetes.io/psp=global-unrestricted-psp}
        creationTimestamp: 2023-01-09T08:39:41Z
        deletionGracePeriodSeconds: null
        deletionTimestamp: null
        finalizers: null
        generateName: consul-app-
        generation: null
        labels: {app=app-consul, controller-revision-hash=consul-app-559bdbcd9c, statefulset.kubernetes.io/pod-name=consul-app-0}
        managedFields: [class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:generateName={}, f:labels={.={}, f:app={}, f:controller-revision-hash={}, f:statefulset.kubernetes.io/pod-name={}}, f:ownerReferences={.={}, k:{"uid":"792fef7e-c9b4-4fdf-a770-3ea4124210ff"}={}}}, f:spec={f:containers={k:{"name":"app-consul"}={.={}, f:args={}, f:env={.={}, k:{"name":"NAMESPACE"}={.={}, f:name={}, f:valueFrom={.={}, f:fieldRef={}}}, k:{"name":"PODIP"}={.={}, f:name={}, f:valueFrom={.={}, f:fieldRef={}}}}, f:image={}, f:imagePullPolicy={}, f:name={}, f:ports={.={}, k:{"containerPort":53,"protocol":"TCP"}={.={}, f:containerPort={}, f:name={}, f:protocol={}}, k:{"containerPort":8080,"protocol":"TCP"}={.={}, f:containerPort={}, f:name={}, f:protocol={}}, k:{"containerPort":8300,"protocol":"TCP"}={.={}, f:containerPort={}, f:name={}, f:protocol={}}, k:{"containerPort":8301,"protocol":"TCP"}={.={}, f:containerPort={}, f:name={}, f:protocol={}}, k:{"containerPort":8302,"protocol":"TCP"}={.={}, f:containerPort={}, f:name={}, f:protocol={}}, k:{"containerPort":8400,"protocol":"TCP"}={.={}, f:containerPort={}, f:name={}, f:protocol={}}, k:{"containerPort":8443,"protocol":"TCP"}={.={}, f:containerPort={}, f:name={}, f:protocol={}}, k:{"containerPort":8500,"protocol":"TCP"}={.={}, f:containerPort={}, f:name={}, f:protocol={}}, k:{"containerPort":8600,"protocol":"TCP"}={.={}, f:containerPort={}, f:name={}, f:protocol={}}}, f:resources={}, f:terminationMessagePath={}, f:terminationMessagePolicy={}, f:volumeMounts={.={}, k:{"mountPath":"/consul/data"}={.={}, f:mountPath={}, f:name={}}, k:{"mountPath":"/consul/userconfig"}={.={}, f:mountPath={}, f:name={}}}}}, f:dnsPolicy={}, f:enableServiceLinks={}, f:hostname={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={.={}, f:fsGroup={}}, f:subdomain={}, f:terminationGracePeriodSeconds={}, f:volumes={.={}, k:{"name":"data"}={.={}, f:emptyDir={}, f:name={}}, k:{"name":"user-config"}={.={}, f:configMap={.={}, f:defaultMode={}, f:name={}}, f:name={}}}}}
            manager: kube-controller-manager
            operation: Update
            subresource: null
            time: 2023-01-09T08:39:41Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={f:cni.projectcalico.org/containerID={}, f:cni.projectcalico.org/podIP={}, f:cni.projectcalico.org/podIPs={}}}}
            manager: calico
            operation: Update
            subresource: status
            time: 2023-01-09T08:39:42Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={k:{"type":"ContainersReady"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Initialized"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Ready"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}}, f:containerStatuses={}, f:hostIP={}, f:phase={}, f:podIP={}, f:podIPs={.={}, k:{"ip":"10.42.0.198"}={.={}, f:ip={}}}, f:startTime={}}}
            manager: kubelet
            operation: Update
            subresource: status
            time: 2023-02-27T01:41:21Z
        }]
        name: consul-app-0
        namespace: app-test-group
        ownerReferences: [class V1OwnerReference {
            apiVersion: apps/v1
            blockOwnerDeletion: true
            controller: true
            kind: StatefulSet
            name: consul-app
            uid: 792fef7e-c9b4-4fdf-a770-3ea4124210ff
        }]
        resourceVersion: 1420555
        selfLink: null
        uid: bf465a56-4d64-4a00-8582-38e281c45865
    }
    spec: class V1PodSpec {
        activeDeadlineSeconds: null
        affinity: null
        automountServiceAccountToken: null
        containers: [class V1Container {
            args: [agent, -advertise=$(PODIP), -data-dir=/consul/data, -bind=0.0.0.0, -client=0.0.0.0, -domain=cluster.local, -server, -ui]
            command: null
            env: [class V1EnvVar {
                name: PODIP
                value: null
                valueFrom: class V1EnvVarSource {
                    configMapKeyRef: null
                    fieldRef: class V1ObjectFieldSelector {
                        apiVersion: v1
                        fieldPath: status.podIP
                    }
                    resourceFieldRef: null
                    secretKeyRef: null
                }
            }, class V1EnvVar {
                name: NAMESPACE
                value: null
                valueFrom: class V1EnvVarSource {
                    configMapKeyRef: null
                    fieldRef: class V1ObjectFieldSelector {
                        apiVersion: v1
                        fieldPath: metadata.namespace
                    }
                    resourceFieldRef: null
                    secretKeyRef: null
                }
            }]
            envFrom: null
            image: consul:1.14.3
            imagePullPolicy: IfNotPresent
            lifecycle: null
            livenessProbe: null
            name: app-consul
            ports: [class V1ContainerPort {
                containerPort: 8500
                hostIP: null
                hostPort: null
                name: ui-port
                protocol: TCP
            }, class V1ContainerPort {
                containerPort: 8400
                hostIP: null
                hostPort: null
                name: alt-port
                protocol: TCP
            }, class V1ContainerPort {
                containerPort: 53
                hostIP: null
                hostPort: null
                name: udp-port
                protocol: TCP
            }, class V1ContainerPort {
                containerPort: 8443
                hostIP: null
                hostPort: null
                name: https-port
                protocol: TCP
            }, class V1ContainerPort {
                containerPort: 8080
                hostIP: null
                hostPort: null
                name: http-port
                protocol: TCP
            }, class V1ContainerPort {
                containerPort: 8301
                hostIP: null
                hostPort: null
                name: serflan
                protocol: TCP
            }, class V1ContainerPort {
                containerPort: 8302
                hostIP: null
                hostPort: null
                name: serfwan
                protocol: TCP
            }, class V1ContainerPort {
                containerPort: 8600
                hostIP: null
                hostPort: null
                name: consuldns
                protocol: TCP
            }, class V1ContainerPort {
                containerPort: 8300
                hostIP: null
                hostPort: null
                name: server
                protocol: TCP
            }]
            readinessProbe: null
            resources: class V1ResourceRequirements {
                limits: null
                requests: null
            }
            securityContext: null
            startupProbe: null
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /consul/data
                mountPropagation: null
                name: data
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /consul/userconfig
                mountPropagation: null
                name: user-config
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                mountPropagation: null
                name: kube-api-access-ftnmt
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }]
        dnsConfig: null
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        ephemeralContainers: null
        hostAliases: null
        hostIPC: null
        hostNetwork: null
        hostPID: null
        hostUsers: null
        hostname: consul-app-0
        imagePullSecrets: null
        initContainers: null
        nodeName: rke2-server4
        nodeSelector: null
        os: null
        overhead: null
        preemptionPolicy: PreemptLowerPriority
        priority: 0
        priorityClassName: null
        readinessGates: null
        restartPolicy: Always
        runtimeClassName: null
        schedulerName: default-scheduler
        securityContext: class V1PodSecurityContext {
            fsGroup: 1000
            fsGroupChangePolicy: null
            runAsGroup: null
            runAsNonRoot: null
            runAsUser: null
            seLinuxOptions: null
            seccompProfile: null
            supplementalGroups: null
            sysctls: null
            windowsOptions: null
        }
        serviceAccount: default
        serviceAccountName: default
        setHostnameAsFQDN: null
        shareProcessNamespace: null
        subdomain: consul-hless-server
        terminationGracePeriodSeconds: 10
        tolerations: [class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/not-ready
            operator: Exists
            tolerationSeconds: 300
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/unreachable
            operator: Exists
            tolerationSeconds: 300
            value: null
        }]
        topologySpreadConstraints: null
        volumes: [class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: class V1ConfigMapVolumeSource {
                defaultMode: 420
                items: null
                name: consul-configmap
                optional: null
            }
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: user-config
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: class V1EmptyDirVolumeSource {
                medium: null
                sizeLimit: null
            }
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: data
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: kube-api-access-ftnmt
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: class V1ProjectedVolumeSource {
                defaultMode: 420
                sources: [class V1VolumeProjection {
                    configMap: null
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: class V1ServiceAccountTokenProjection {
                        audience: null
                        expirationSeconds: 3607
                        path: token
                    }
                }, class V1VolumeProjection {
                    configMap: class V1ConfigMapProjection {
                        items: [class V1KeyToPath {
                            key: ca.crt
                            mode: null
                            path: ca.crt
                        }]
                        name: kube-root-ca.crt
                        optional: null
                    }
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: null
                }, class V1VolumeProjection {
                    configMap: null
                    downwardAPI: class V1DownwardAPIProjection {
                        items: [class V1DownwardAPIVolumeFile {
                            fieldRef: class V1ObjectFieldSelector {
                                apiVersion: v1
                                fieldPath: metadata.namespace
                            }
                            mode: null
                            path: namespace
                            resourceFieldRef: null
                        }]
                    }
                    secret: null
                    serviceAccountToken: null
                }]
            }
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }]
    }
    status: class V1PodStatus {
        conditions: [class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-01-09T08:39:41Z
            message: null
            reason: null
            status: True
            type: Initialized
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:21Z
            message: null
            reason: null
            status: True
            type: Ready
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:21Z
            message: null
            reason: null
            status: True
            type: ContainersReady
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-01-09T08:39:41Z
            message: null
            reason: null
            status: True
            type: PodScheduled
        }]
        containerStatuses: [class V1ContainerStatus {
            containerID: containerd://6c81a3f99f26365fb8ee30c07ef9c9f841e1838226d81ab75369b07d40c32861
            image: docker.io/library/consul:1.14.3
            imageID: docker.io/library/consul@sha256:7e8ad15dbd233dc1c12e298a3c25a8b614d1e185d239f14e483ca7dd4c7a5894
            lastState: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://3b59d1dcb2a153df49acd32e0249699dd90d35896e7647a3303dfeb0a7f9d58f
                    exitCode: 255
                    finishedAt: 2023-02-27T01:40:25Z
                    message: null
                    reason: Unknown
                    signal: null
                    startedAt: 2023-02-02T01:28:06Z
                }
                waiting: null
            }
            name: app-consul
            ready: true
            restartCount: 12
            started: true
            state: class V1ContainerState {
                running: class V1ContainerStateRunning {
                    startedAt: 2023-02-27T01:41:20Z
                }
                terminated: null
                waiting: null
            }
        }]
        ephemeralContainerStatuses: null
        hostIP: 172.168.113.110
        initContainerStatuses: null
        message: null
        nominatedNodeName: null
        phase: Running
        podIP: 10.42.0.198
        podIPs: [class V1PodIP {
            ip: 10.42.0.198
        }]
        qosClass: BestEffort
        reason: null
        startTime: 2023-01-09T08:39:41Z
    }
}
class V1Pod {
    apiVersion: null
    kind: null
    metadata: class V1ObjectMeta {
        annotations: {cni.projectcalico.org/containerID=398b53a31ec9e8f007136eddaa0aecf14a1ec473c35321aa74bcf2402579b0f3, cni.projectcalico.org/podIP=10.42.0.200/32, cni.projectcalico.org/podIPs=10.42.0.200/32, kubernetes.io/psp=global-unrestricted-psp}
        creationTimestamp: 2023-01-09T08:41:45Z
        deletionGracePeriodSeconds: null
        deletionTimestamp: null
        finalizers: null
        generateName: nginx-app-
        generation: null
        labels: {app=app-nginx, controller-revision-hash=nginx-app-79bbc5c486, statefulset.kubernetes.io/pod-name=nginx-app-0}
        managedFields: [class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={f:cni.projectcalico.org/containerID={}, f:cni.projectcalico.org/podIP={}, f:cni.projectcalico.org/podIPs={}}}}
            manager: calico
            operation: Update
            subresource: status
            time: 2023-01-09T08:41:45Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:generateName={}, f:labels={.={}, f:app={}, f:controller-revision-hash={}, f:statefulset.kubernetes.io/pod-name={}}, f:ownerReferences={.={}, k:{"uid":"ed4fc1de-f055-4ebf-b975-f4a5be731baf"}={}}}, f:spec={f:containers={k:{"name":"app-nginx"}={.={}, f:image={}, f:imagePullPolicy={}, f:name={}, f:ports={.={}, k:{"containerPort":80,"protocol":"TCP"}={.={}, f:containerPort={}, f:name={}, f:protocol={}}}, f:resources={}, f:terminationMessagePath={}, f:terminationMessagePolicy={}}}, f:dnsPolicy={}, f:enableServiceLinks={}, f:hostname={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={}, f:subdomain={}, f:terminationGracePeriodSeconds={}}}
            manager: kube-controller-manager
            operation: Update
            subresource: null
            time: 2023-01-09T08:41:45Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={k:{"type":"ContainersReady"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Initialized"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Ready"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}}, f:containerStatuses={}, f:hostIP={}, f:phase={}, f:podIP={}, f:podIPs={.={}, k:{"ip":"10.42.0.200"}={.={}, f:ip={}}}, f:startTime={}}}
            manager: kubelet
            operation: Update
            subresource: status
            time: 2023-02-27T01:41:23Z
        }]
        name: nginx-app-0
        namespace: app-test-group
        ownerReferences: [class V1OwnerReference {
            apiVersion: apps/v1
            blockOwnerDeletion: true
            controller: true
            kind: StatefulSet
            name: nginx-app
            uid: ed4fc1de-f055-4ebf-b975-f4a5be731baf
        }]
        resourceVersion: 1420750
        selfLink: null
        uid: 26b40cff-3929-4125-9f50-1d24c39271d0
    }
    spec: class V1PodSpec {
        activeDeadlineSeconds: null
        affinity: null
        automountServiceAccountToken: null
        containers: [class V1Container {
            args: null
            command: null
            env: null
            envFrom: null
            image: nginx:latest
            imagePullPolicy: IfNotPresent
            lifecycle: null
            livenessProbe: null
            name: app-nginx
            ports: [class V1ContainerPort {
                containerPort: 80
                hostIP: null
                hostPort: null
                name: nginx-port
                protocol: TCP
            }]
            readinessProbe: null
            resources: class V1ResourceRequirements {
                limits: null
                requests: null
            }
            securityContext: null
            startupProbe: null
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                mountPropagation: null
                name: kube-api-access-82xxf
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }]
        dnsConfig: null
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        ephemeralContainers: null
        hostAliases: null
        hostIPC: null
        hostNetwork: null
        hostPID: null
        hostUsers: null
        hostname: nginx-app-0
        imagePullSecrets: null
        initContainers: null
        nodeName: rke2-server4
        nodeSelector: null
        os: null
        overhead: null
        preemptionPolicy: PreemptLowerPriority
        priority: 0
        priorityClassName: null
        readinessGates: null
        restartPolicy: Always
        runtimeClassName: null
        schedulerName: default-scheduler
        securityContext: class V1PodSecurityContext {
            fsGroup: null
            fsGroupChangePolicy: null
            runAsGroup: null
            runAsNonRoot: null
            runAsUser: null
            seLinuxOptions: null
            seccompProfile: null
            supplementalGroups: null
            sysctls: null
            windowsOptions: null
        }
        serviceAccount: default
        serviceAccountName: default
        setHostnameAsFQDN: null
        shareProcessNamespace: null
        subdomain: nginx-hless-server
        terminationGracePeriodSeconds: 10
        tolerations: [class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/not-ready
            operator: Exists
            tolerationSeconds: 300
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/unreachable
            operator: Exists
            tolerationSeconds: 300
            value: null
        }]
        topologySpreadConstraints: null
        volumes: [class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: kube-api-access-82xxf
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: class V1ProjectedVolumeSource {
                defaultMode: 420
                sources: [class V1VolumeProjection {
                    configMap: null
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: class V1ServiceAccountTokenProjection {
                        audience: null
                        expirationSeconds: 3607
                        path: token
                    }
                }, class V1VolumeProjection {
                    configMap: class V1ConfigMapProjection {
                        items: [class V1KeyToPath {
                            key: ca.crt
                            mode: null
                            path: ca.crt
                        }]
                        name: kube-root-ca.crt
                        optional: null
                    }
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: null
                }, class V1VolumeProjection {
                    configMap: null
                    downwardAPI: class V1DownwardAPIProjection {
                        items: [class V1DownwardAPIVolumeFile {
                            fieldRef: class V1ObjectFieldSelector {
                                apiVersion: v1
                                fieldPath: metadata.namespace
                            }
                            mode: null
                            path: namespace
                            resourceFieldRef: null
                        }]
                    }
                    secret: null
                    serviceAccountToken: null
                }]
            }
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }]
    }
    status: class V1PodStatus {
        conditions: [class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-01-09T08:41:45Z
            message: null
            reason: null
            status: True
            type: Initialized
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:23Z
            message: null
            reason: null
            status: True
            type: Ready
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:23Z
            message: null
            reason: null
            status: True
            type: ContainersReady
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-01-09T08:41:45Z
            message: null
            reason: null
            status: True
            type: PodScheduled
        }]
        containerStatuses: [class V1ContainerStatus {
            containerID: containerd://912d93284068783ea7c15bcca89dc50fcbd2edc55bed3caafb0fda2250043cca
            image: sha256:a99a39d070bfd1cb60fe65c45dea3a33764dc00a9546bf8dc46cb5a11b1b50e9
            imageID: docker.io/library/nginx@sha256:b8f2383a95879e1ae064940d9a200f67a6c79e710ed82ac42263397367e7cc4e
            lastState: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://20071f1de1648a05661a5dba3f993ebd6fb37483ef0de8c574184941ffe8f9ef
                    exitCode: 255
                    finishedAt: 2023-02-27T01:40:25Z
                    message: null
                    reason: Unknown
                    signal: null
                    startedAt: 2023-02-02T01:28:12Z
                }
                waiting: null
            }
            name: app-nginx
            ready: true
            restartCount: 12
            started: true
            state: class V1ContainerState {
                running: class V1ContainerStateRunning {
                    startedAt: 2023-02-27T01:41:22Z
                }
                terminated: null
                waiting: null
            }
        }]
        ephemeralContainerStatuses: null
        hostIP: 172.168.113.110
        initContainerStatuses: null
        message: null
        nominatedNodeName: null
        phase: Running
        podIP: 10.42.0.200
        podIPs: [class V1PodIP {
            ip: 10.42.0.200
        }]
        qosClass: BestEffort
        reason: null
        startTime: 2023-01-09T08:41:45Z
    }
}
class V1Pod {
    apiVersion: null
    kind: null
    metadata: class V1ObjectMeta {
        annotations: {cni.projectcalico.org/containerID=2b07a13c856f737597a6d752df2bdb51cc64e93fd19b2abb8cb6cc24078ede77, cni.projectcalico.org/podIP=10.42.0.199/32, cni.projectcalico.org/podIPs=10.42.0.199/32, kubernetes.io/psp=global-unrestricted-psp}
        creationTimestamp: 2023-01-04T03:45:40Z
        deletionGracePeriodSeconds: null
        deletionTimestamp: null
        finalizers: null
        generateName: filebeat-
        generation: null
        labels: {app=filebeat, controller-revision-hash=74ff8f958d, pod-template-generation=2}
        managedFields: [class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:generateName={}, f:labels={.={}, f:app={}, f:controller-revision-hash={}, f:pod-template-generation={}}, f:ownerReferences={.={}, k:{"uid":"4467238b-6e62-42b6-a7d5-ed718500f84a"}={}}}, f:spec={f:affinity={.={}, f:nodeAffinity={.={}, f:requiredDuringSchedulingIgnoredDuringExecution={}}}, f:containers={k:{"name":"filebeat-contain"}={.={}, f:args={}, f:env={.={}, k:{"name":"ACK"}={.={}, f:name={}, f:value={}}, k:{"name":"KAFKA_URL"}={.={}, f:name={}, f:value={}}, k:{"name":"LOG_LEVEL"}={.={}, f:name={}, f:value={}}, k:{"name":"NODE_NAME"}={.={}, f:name={}, f:valueFrom={.={}, f:fieldRef={}}}, k:{"name":"TOPIC_NAME"}={.={}, f:name={}, f:value={}}}, f:image={}, f:imagePullPolicy={}, f:name={}, f:resources={}, f:securityContext={.={}, f:privileged={}, f:runAsUser={}}, f:terminationMessagePath={}, f:terminationMessagePolicy={}, f:volumeMounts={.={}, k:{"mountPath":"/etc/filebeat.yml"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}, f:subPath={}}, k:{"mountPath":"/var/log/containers"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/log/pods"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}}}}, f:dnsPolicy={}, f:enableServiceLinks={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={}, f:serviceAccount={}, f:serviceAccountName={}, f:terminationGracePeriodSeconds={}, f:tolerations={}, f:volumes={.={}, k:{"name":"config"}={.={}, f:configMap={.={}, f:defaultMode={}, f:name={}}, f:name={}}, k:{"name":"varlogcontainers"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"varlogpods"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}}}}
            manager: kube-controller-manager
            operation: Update
            subresource: null
            time: 2023-01-04T03:45:40Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={f:cni.projectcalico.org/containerID={}, f:cni.projectcalico.org/podIP={}, f:cni.projectcalico.org/podIPs={}}}}
            manager: calico
            operation: Update
            subresource: status
            time: 2023-01-04T03:45:41Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={k:{"type":"ContainersReady"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Initialized"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Ready"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}}, f:containerStatuses={}, f:hostIP={}, f:phase={}, f:podIP={}, f:podIPs={.={}, k:{"ip":"10.42.0.199"}={.={}, f:ip={}}}, f:startTime={}}}
            manager: kubelet
            operation: Update
            subresource: status
            time: 2023-02-27T01:41:22Z
        }]
        name: filebeat-mgl57
        namespace: default
        ownerReferences: [class V1OwnerReference {
            apiVersion: apps/v1
            blockOwnerDeletion: true
            controller: true
            kind: DaemonSet
            name: filebeat
            uid: 4467238b-6e62-42b6-a7d5-ed718500f84a
        }]
        resourceVersion: 1420563
        selfLink: null
        uid: 95bc36a2-de8a-4eed-85de-4388ae1f71d5
    }
    spec: class V1PodSpec {
        activeDeadlineSeconds: null
        affinity: class V1Affinity {
            nodeAffinity: class V1NodeAffinity {
                preferredDuringSchedulingIgnoredDuringExecution: null
                requiredDuringSchedulingIgnoredDuringExecution: class V1NodeSelector {
                    nodeSelectorTerms: [class V1NodeSelectorTerm {
                        matchExpressions: null
                        matchFields: [class V1NodeSelectorRequirement {
                            key: metadata.name
                            operator: In
                            values: [rke2-server4]
                        }]
                    }]
                }
            }
            podAffinity: null
            podAntiAffinity: null
        }
        automountServiceAccountToken: null
        containers: [class V1Container {
            args: [-c, /etc/filebeat.yml, -e]
            command: null
            env: [class V1EnvVar {
                name: KAFKA_URL
                value: [172.168.113.110:9092]
                valueFrom: null
            }, class V1EnvVar {
                name: TOPIC_NAME
                value: filebeat-kafka-elastic
                valueFrom: null
            }, class V1EnvVar {
                name: LOG_LEVEL
                value: info
                valueFrom: null
            }, class V1EnvVar {
                name: ACK
                value: 1
                valueFrom: null
            }, class V1EnvVar {
                name: NODE_NAME
                value: null
                valueFrom: class V1EnvVarSource {
                    configMapKeyRef: null
                    fieldRef: class V1ObjectFieldSelector {
                        apiVersion: v1
                        fieldPath: spec.nodeName
                    }
                    resourceFieldRef: null
                    secretKeyRef: null
                }
            }]
            envFrom: null
            image: docker.elastic.co/beats/filebeat:7.17.0
            imagePullPolicy: IfNotPresent
            lifecycle: null
            livenessProbe: null
            name: filebeat-contain
            ports: null
            readinessProbe: null
            resources: class V1ResourceRequirements {
                limits: null
                requests: null
            }
            securityContext: class V1SecurityContext {
                allowPrivilegeEscalation: null
                capabilities: null
                privileged: true
                procMount: null
                readOnlyRootFilesystem: null
                runAsGroup: null
                runAsNonRoot: null
                runAsUser: 0
                seLinuxOptions: null
                seccompProfile: null
                windowsOptions: null
            }
            startupProbe: null
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /etc/filebeat.yml
                mountPropagation: null
                name: config
                readOnly: true
                subPath: filebeat.yml
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/log/containers
                mountPropagation: null
                name: varlogcontainers
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/log/pods
                mountPropagation: null
                name: varlogpods
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                mountPropagation: null
                name: kube-api-access-58h7j
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }]
        dnsConfig: null
        dnsPolicy: ClusterFirstWithHostNet
        enableServiceLinks: true
        ephemeralContainers: null
        hostAliases: null
        hostIPC: null
        hostNetwork: null
        hostPID: null
        hostUsers: null
        hostname: null
        imagePullSecrets: null
        initContainers: null
        nodeName: rke2-server4
        nodeSelector: null
        os: null
        overhead: null
        preemptionPolicy: PreemptLowerPriority
        priority: 0
        priorityClassName: null
        readinessGates: null
        restartPolicy: Always
        runtimeClassName: null
        schedulerName: default-scheduler
        securityContext: class V1PodSecurityContext {
            fsGroup: null
            fsGroupChangePolicy: null
            runAsGroup: null
            runAsNonRoot: null
            runAsUser: null
            seLinuxOptions: null
            seccompProfile: null
            supplementalGroups: null
            sysctls: null
            windowsOptions: null
        }
        serviceAccount: filebeat-service-acc
        serviceAccountName: filebeat-service-acc
        setHostnameAsFQDN: null
        shareProcessNamespace: null
        subdomain: null
        terminationGracePeriodSeconds: 30
        tolerations: [class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/not-ready
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/unreachable
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node.kubernetes.io/disk-pressure
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node.kubernetes.io/memory-pressure
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node.kubernetes.io/pid-pressure
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node.kubernetes.io/unschedulable
            operator: Exists
            tolerationSeconds: null
            value: null
        }]
        topologySpreadConstraints: null
        volumes: [class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: class V1ConfigMapVolumeSource {
                defaultMode: 384
                items: null
                name: filebeat-config
                optional: null
            }
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: config
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/log/containers
                type: 
            }
            iscsi: null
            name: varlogcontainers
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/log/pods
                type: Directory
            }
            iscsi: null
            name: varlogpods
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: kube-api-access-58h7j
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: class V1ProjectedVolumeSource {
                defaultMode: 420
                sources: [class V1VolumeProjection {
                    configMap: null
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: class V1ServiceAccountTokenProjection {
                        audience: null
                        expirationSeconds: 3607
                        path: token
                    }
                }, class V1VolumeProjection {
                    configMap: class V1ConfigMapProjection {
                        items: [class V1KeyToPath {
                            key: ca.crt
                            mode: null
                            path: ca.crt
                        }]
                        name: kube-root-ca.crt
                        optional: null
                    }
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: null
                }, class V1VolumeProjection {
                    configMap: null
                    downwardAPI: class V1DownwardAPIProjection {
                        items: [class V1DownwardAPIVolumeFile {
                            fieldRef: class V1ObjectFieldSelector {
                                apiVersion: v1
                                fieldPath: metadata.namespace
                            }
                            mode: null
                            path: namespace
                            resourceFieldRef: null
                        }]
                    }
                    secret: null
                    serviceAccountToken: null
                }]
            }
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }]
    }
    status: class V1PodStatus {
        conditions: [class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-01-04T03:45:40Z
            message: null
            reason: null
            status: True
            type: Initialized
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:22Z
            message: null
            reason: null
            status: True
            type: Ready
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:22Z
            message: null
            reason: null
            status: True
            type: ContainersReady
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-01-04T03:45:40Z
            message: null
            reason: null
            status: True
            type: PodScheduled
        }]
        containerStatuses: [class V1ContainerStatus {
            containerID: containerd://dbdec9e3fbd33d30f1b8ba2ae1ac35b0674d0f1bda9d3d17b1ff2cb8bf3adab2
            image: docker.elastic.co/beats/filebeat:7.17.0
            imageID: docker.elastic.co/beats/filebeat@sha256:f71bc98cae85db7812ff6e7fc3f7f3fdd37cda162ff3fefa5c3a55cb31e21e6e
            lastState: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://308450058839fd5676471ca8bed8c830b1bfdf17d33bf00c174e526066d549eb
                    exitCode: 255
                    finishedAt: 2023-02-27T01:40:25Z
                    message: null
                    reason: Unknown
                    signal: null
                    startedAt: 2023-02-02T01:28:09Z
                }
                waiting: null
            }
            name: filebeat-contain
            ready: true
            restartCount: 15
            started: true
            state: class V1ContainerState {
                running: class V1ContainerStateRunning {
                    startedAt: 2023-02-27T01:41:22Z
                }
                terminated: null
                waiting: null
            }
        }]
        ephemeralContainerStatuses: null
        hostIP: 172.168.113.110
        initContainerStatuses: null
        message: null
        nominatedNodeName: null
        phase: Running
        podIP: 10.42.0.199
        podIPs: [class V1PodIP {
            ip: 10.42.0.199
        }]
        qosClass: BestEffort
        reason: null
        startTime: 2023-01-04T03:45:40Z
    }
}
class V1Pod {
    apiVersion: null
    kind: null
    metadata: class V1ObjectMeta {
        annotations: {kubernetes.io/config.hash=1a84611ed06607ed8a51e65d936a6ff0, kubernetes.io/config.mirror=1a84611ed06607ed8a51e65d936a6ff0, kubernetes.io/config.seen=2022-12-02T17:07:07.396321584+08:00, kubernetes.io/config.source=file, kubernetes.io/psp=global-unrestricted-psp}
        creationTimestamp: 2022-12-02T09:07:27Z
        deletionGracePeriodSeconds: null
        deletionTimestamp: null
        finalizers: null
        generateName: null
        generation: null
        labels: {component=cloud-controller-manager, tier=control-plane}
        managedFields: [class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={.={}, f:kubernetes.io/config.hash={}, f:kubernetes.io/config.mirror={}, f:kubernetes.io/config.seen={}, f:kubernetes.io/config.source={}}, f:labels={.={}, f:component={}, f:tier={}}, f:ownerReferences={.={}, k:{"uid":"7364174a-4282-4399-b1a2-bfad988f3fa5"}={}}}, f:spec={f:containers={k:{"name":"cloud-controller-manager"}={.={}, f:args={}, f:command={}, f:env={.={}, k:{"name":"FILE_HASH"}={.={}, f:name={}, f:value={}}, k:{"name":"NO_PROXY"}={.={}, f:name={}, f:value={}}, k:{"name":"POD_HASH"}={.={}, f:name={}, f:value={}}}, f:image={}, f:imagePullPolicy={}, f:livenessProbe={.={}, f:failureThreshold={}, f:httpGet={.={}, f:host={}, f:path={}, f:port={}, f:scheme={}}, f:initialDelaySeconds={}, f:periodSeconds={}, f:successThreshold={}, f:timeoutSeconds={}}, f:name={}, f:resources={.={}, f:requests={.={}, f:cpu={}, f:memory={}}}, f:securityContext={.={}, f:privileged={}}, f:startupProbe={.={}, f:failureThreshold={}, f:httpGet={.={}, f:host={}, f:path={}, f:port={}, f:scheme={}}, f:initialDelaySeconds={}, f:periodSeconds={}, f:successThreshold={}, f:timeoutSeconds={}}, f:terminationMessagePath={}, f:terminationMessagePolicy={}, f:volumeMounts={.={}, k:{"mountPath":"/etc/pki/tls/certs"}={.={}, f:mountPath={}, f:name={}}, k:{"mountPath":"/etc/ssl/certs"}={.={}, f:mountPath={}, f:name={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/cred/cloud-controller.kubeconfig"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/etc/cloud-config.yaml"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-rke2-cloud-controller.crt"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-rke2-cloud-controller.key"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/server-ca.crt"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}}}}, f:dnsPolicy={}, f:enableServiceLinks={}, f:hostNetwork={}, f:nodeName={}, f:priorityClassName={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={.={}, f:seLinuxOptions={.={}, f:type={}}}, f:terminationGracePeriodSeconds={}, f:tolerations={}, f:volumes={.={}, k:{"name":"dir0"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"dir1"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file0"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file1"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file2"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file3"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file4"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}}}}
            manager: kubelet
            operation: Update
            subresource: null
            time: 2022-12-02T09:07:27Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={.={}, k:{"type":"ContainersReady"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Initialized"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"PodScheduled"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Ready"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}}, f:containerStatuses={}, f:hostIP={}, f:phase={}, f:podIP={}, f:podIPs={.={}, k:{"ip":"172.168.113.110"}={.={}, f:ip={}}}, f:startTime={}}}
            manager: kubelet
            operation: Update
            subresource: status
            time: 2023-02-27T01:41:05Z
        }]
        name: cloud-controller-manager-rke2-server4
        namespace: kube-system
        ownerReferences: [class V1OwnerReference {
            apiVersion: v1
            blockOwnerDeletion: null
            controller: true
            kind: Node
            name: rke2-server4
            uid: 7364174a-4282-4399-b1a2-bfad988f3fa5
        }]
        resourceVersion: 1420445
        selfLink: null
        uid: 4d126759-cb06-4ab1-aee4-3c5c6a14ecfc
    }
    spec: class V1PodSpec {
        activeDeadlineSeconds: null
        affinity: null
        automountServiceAccountToken: null
        containers: [class V1Container {
            args: [--allocate-node-cidrs=true, --authentication-kubeconfig=/var/lib/rancher/rke2/server/cred/cloud-controller.kubeconfig, --authorization-kubeconfig=/var/lib/rancher/rke2/server/cred/cloud-controller.kubeconfig, --bind-address=127.0.0.1, --cloud-config=/var/lib/rancher/rke2/server/etc/cloud-config.yaml, --cloud-provider=rke2, --cluster-cidr=10.42.0.0/16, --configure-cloud-routes=false, --controllers=*,-route,-service, --kubeconfig=/var/lib/rancher/rke2/server/cred/cloud-controller.kubeconfig, --leader-elect-resource-name=rke2-cloud-controller-manager, --node-status-update-frequency=1m0s, --profiling=false]
            command: [cloud-controller-manager]
            env: [class V1EnvVar {
                name: FILE_HASH
                value: 9e5758cbf29b4a85abb65efcf07475be14eb59d6c1bcc2712e322d9f4fde69f3
                valueFrom: null
            }, class V1EnvVar {
                name: NO_PROXY
                value: .svc,.cluster.local,10.42.0.0/16,10.43.0.0/16
                valueFrom: null
            }, class V1EnvVar {
                name: POD_HASH
                value: 9de7aabc297796475769de41bb89415f
                valueFrom: null
            }]
            envFrom: null
            image: index.docker.io/rancher/rke2-cloud-provider:v1.25.3-build20221017
            imagePullPolicy: IfNotPresent
            lifecycle: null
            livenessProbe: class V1Probe {
                exec: null
                failureThreshold: 8
                grpc: null
                httpGet: class V1HTTPGetAction {
                    host: localhost
                    httpHeaders: null
                    path: /healthz
                    port: 10258
                    scheme: HTTPS
                }
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                tcpSocket: null
                terminationGracePeriodSeconds: null
                timeoutSeconds: 15
            }
            name: cloud-controller-manager
            ports: null
            readinessProbe: null
            resources: class V1ResourceRequirements {
                limits: null
                requests: {cpu=Quantity{number=0.100, format=DECIMAL_SI}, memory=Quantity{number=134217728, format=BINARY_SI}}
            }
            securityContext: class V1SecurityContext {
                allowPrivilegeEscalation: null
                capabilities: null
                privileged: false
                procMount: null
                readOnlyRootFilesystem: null
                runAsGroup: null
                runAsNonRoot: null
                runAsUser: null
                seLinuxOptions: null
                seccompProfile: null
                windowsOptions: null
            }
            startupProbe: class V1Probe {
                exec: null
                failureThreshold: 24
                grpc: null
                httpGet: class V1HTTPGetAction {
                    host: localhost
                    httpHeaders: null
                    path: /healthz
                    port: 10258
                    scheme: HTTPS
                }
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                tcpSocket: null
                terminationGracePeriodSeconds: null
                timeoutSeconds: 5
            }
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /etc/ssl/certs
                mountPropagation: null
                name: dir0
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /etc/pki/tls/certs
                mountPropagation: null
                name: dir1
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/cred/cloud-controller.kubeconfig
                mountPropagation: null
                name: file0
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/etc/cloud-config.yaml
                mountPropagation: null
                name: file1
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/client-rke2-cloud-controller.crt
                mountPropagation: null
                name: file2
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/client-rke2-cloud-controller.key
                mountPropagation: null
                name: file3
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/server-ca.crt
                mountPropagation: null
                name: file4
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }]
        dnsConfig: null
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        ephemeralContainers: null
        hostAliases: null
        hostIPC: null
        hostNetwork: true
        hostPID: null
        hostUsers: null
        hostname: null
        imagePullSecrets: null
        initContainers: null
        nodeName: rke2-server4
        nodeSelector: null
        os: null
        overhead: null
        preemptionPolicy: PreemptLowerPriority
        priority: 2000000000
        priorityClassName: system-cluster-critical
        readinessGates: null
        restartPolicy: Always
        runtimeClassName: null
        schedulerName: default-scheduler
        securityContext: class V1PodSecurityContext {
            fsGroup: null
            fsGroupChangePolicy: null
            runAsGroup: null
            runAsNonRoot: null
            runAsUser: null
            seLinuxOptions: class V1SELinuxOptions {
                level: null
                role: null
                type: rke2_service_t
                user: null
            }
            seccompProfile: null
            supplementalGroups: null
            sysctls: null
            windowsOptions: null
        }
        serviceAccount: null
        serviceAccountName: null
        setHostnameAsFQDN: null
        shareProcessNamespace: null
        subdomain: null
        terminationGracePeriodSeconds: 30
        tolerations: [class V1Toleration {
            effect: NoExecute
            key: null
            operator: Exists
            tolerationSeconds: null
            value: null
        }]
        topologySpreadConstraints: null
        volumes: [class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /etc/ssl/certs
                type: DirectoryOrCreate
            }
            iscsi: null
            name: dir0
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /etc/pki/tls/certs
                type: DirectoryOrCreate
            }
            iscsi: null
            name: dir1
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/cred/cloud-controller.kubeconfig
                type: File
            }
            iscsi: null
            name: file0
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/etc/cloud-config.yaml
                type: File
            }
            iscsi: null
            name: file1
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/client-rke2-cloud-controller.crt
                type: File
            }
            iscsi: null
            name: file2
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/client-rke2-cloud-controller.key
                type: File
            }
            iscsi: null
            name: file3
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/server-ca.crt
                type: File
            }
            iscsi: null
            name: file4
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }]
    }
    status: class V1PodStatus {
        conditions: [class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:40:31Z
            message: null
            reason: null
            status: True
            type: Initialized
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:05Z
            message: null
            reason: null
            status: True
            type: Ready
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:05Z
            message: null
            reason: null
            status: True
            type: ContainersReady
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:40:31Z
            message: null
            reason: null
            status: True
            type: PodScheduled
        }]
        containerStatuses: [class V1ContainerStatus {
            containerID: containerd://d4cdeb6d50371265f46a30c0084fd4dc87a947d017cae44c478660e88adf2e06
            image: docker.io/rancher/rke2-cloud-provider:v1.25.3-build20221017
            imageID: docker.io/rancher/rke2-cloud-provider@sha256:6d8417bd79a7f2a61fc0b3b8801520baf12861e79c1027994b26590522edf2d9
            lastState: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://a8b848735052def37e63c6531a4a533ab3aa7effe57b0590f78f6f8759e5b244
                    exitCode: 255
                    finishedAt: 2023-02-27T01:40:34Z
                    message: null
                    reason: Error
                    signal: null
                    startedAt: 2023-02-27T01:40:34Z
                }
                waiting: null
            }
            name: cloud-controller-manager
            ready: true
            restartCount: 68
            started: true
            state: class V1ContainerState {
                running: class V1ContainerStateRunning {
                    startedAt: 2023-02-27T01:40:46Z
                }
                terminated: null
                waiting: null
            }
        }]
        ephemeralContainerStatuses: null
        hostIP: 172.168.113.110
        initContainerStatuses: null
        message: null
        nominatedNodeName: null
        phase: Running
        podIP: 172.168.113.110
        podIPs: [class V1PodIP {
            ip: 172.168.113.110
        }]
        qosClass: Burstable
        reason: null
        startTime: 2023-02-27T01:40:31Z
    }
}
class V1Pod {
    apiVersion: null
    kind: null
    metadata: class V1ObjectMeta {
        annotations: {etcd.k3s.io/initial={"initial-advertise-peer-urls":"https://172.168.113.110:2380","initial-cluster":"rke2-server4-742f7d42=https://172.168.113.110:2380","initial-cluster-state":"new"}, kubernetes.io/config.hash=e18aa5e5b83a5a3c56d78e4054612394, kubernetes.io/config.mirror=e18aa5e5b83a5a3c56d78e4054612394, kubernetes.io/config.seen=2022-12-02T17:05:50.839322007+08:00, kubernetes.io/config.source=file, kubernetes.io/psp=global-unrestricted-psp}
        creationTimestamp: 2022-12-02T09:07:33Z
        deletionGracePeriodSeconds: null
        deletionTimestamp: null
        finalizers: null
        generateName: null
        generation: null
        labels: {component=etcd, tier=control-plane}
        managedFields: [class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={.={}, f:etcd.k3s.io/initial={}, f:kubernetes.io/config.hash={}, f:kubernetes.io/config.mirror={}, f:kubernetes.io/config.seen={}, f:kubernetes.io/config.source={}}, f:labels={.={}, f:component={}, f:tier={}}, f:ownerReferences={.={}, k:{"uid":"7364174a-4282-4399-b1a2-bfad988f3fa5"}={}}}, f:spec={f:containers={k:{"name":"etcd"}={.={}, f:args={}, f:command={}, f:env={.={}, k:{"name":"FILE_HASH"}={.={}, f:name={}, f:value={}}, k:{"name":"NO_PROXY"}={.={}, f:name={}, f:value={}}, k:{"name":"POD_HASH"}={.={}, f:name={}, f:value={}}}, f:image={}, f:imagePullPolicy={}, f:livenessProbe={.={}, f:failureThreshold={}, f:httpGet={.={}, f:host={}, f:path={}, f:port={}, f:scheme={}}, f:initialDelaySeconds={}, f:periodSeconds={}, f:successThreshold={}, f:timeoutSeconds={}}, f:name={}, f:resources={.={}, f:requests={.={}, f:cpu={}, f:memory={}}}, f:securityContext={.={}, f:privileged={}}, f:startupProbe={.={}, f:failureThreshold={}, f:httpGet={.={}, f:host={}, f:path={}, f:port={}, f:scheme={}}, f:initialDelaySeconds={}, f:periodSeconds={}, f:successThreshold={}, f:timeoutSeconds={}}, f:terminationMessagePath={}, f:terminationMessagePolicy={}, f:volumeMounts={.={}, k:{"mountPath":"/var/lib/rancher/rke2/server/db/etcd"}={.={}, f:mountPath={}, f:name={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/db/etcd/config"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/etcd/peer-ca.crt"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/etcd/peer-server-client.crt"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/etcd/peer-server-client.key"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/etcd/server-ca.crt"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/etcd/server-client.crt"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/etcd/server-client.key"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}}}}, f:dnsPolicy={}, f:enableServiceLinks={}, f:hostNetwork={}, f:nodeName={}, f:priorityClassName={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={.={}, f:seLinuxOptions={.={}, f:type={}}}, f:terminationGracePeriodSeconds={}, f:tolerations={}, f:volumes={.={}, k:{"name":"dir0"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file0"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file1"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file2"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file3"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file4"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file5"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file6"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}}}}
            manager: kubelet
            operation: Update
            subresource: null
            time: 2022-12-02T09:07:33Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={.={}, k:{"type":"ContainersReady"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Initialized"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"PodScheduled"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Ready"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}}, f:containerStatuses={}, f:hostIP={}, f:phase={}, f:podIP={}, f:podIPs={.={}, k:{"ip":"172.168.113.110"}={.={}, f:ip={}}}, f:startTime={}}}
            manager: kubelet
            operation: Update
            subresource: status
            time: 2023-02-27T01:40:52Z
        }]
        name: etcd-rke2-server4
        namespace: kube-system
        ownerReferences: [class V1OwnerReference {
            apiVersion: v1
            blockOwnerDeletion: null
            controller: true
            kind: Node
            name: rke2-server4
            uid: 7364174a-4282-4399-b1a2-bfad988f3fa5
        }]
        resourceVersion: 1420364
        selfLink: null
        uid: 13a123e5-2352-466d-930d-63fd382fda08
    }
    spec: class V1PodSpec {
        activeDeadlineSeconds: null
        affinity: null
        automountServiceAccountToken: null
        containers: [class V1Container {
            args: [--config-file=/var/lib/rancher/rke2/server/db/etcd/config]
            command: [etcd]
            env: [class V1EnvVar {
                name: FILE_HASH
                value: 90d214ce05fa143a2c542faee49b63ea72c41b53653c73f5edd66b754ed0b81f
                valueFrom: null
            }, class V1EnvVar {
                name: NO_PROXY
                value: .svc,.cluster.local,10.42.0.0/16,10.43.0.0/16
                valueFrom: null
            }, class V1EnvVar {
                name: POD_HASH
                value: ed6ed46ea152aaae3159f0a8420c5631
                valueFrom: null
            }]
            envFrom: null
            image: index.docker.io/rancher/hardened-etcd:v3.5.4-k3s1-build20221011
            imagePullPolicy: IfNotPresent
            lifecycle: null
            livenessProbe: class V1Probe {
                exec: null
                failureThreshold: 8
                grpc: null
                httpGet: class V1HTTPGetAction {
                    host: localhost
                    httpHeaders: null
                    path: /health?serializable=true
                    port: 2381
                    scheme: HTTP
                }
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                tcpSocket: null
                terminationGracePeriodSeconds: null
                timeoutSeconds: 15
            }
            name: etcd
            ports: null
            readinessProbe: null
            resources: class V1ResourceRequirements {
                limits: null
                requests: {cpu=Quantity{number=0.200, format=DECIMAL_SI}, memory=Quantity{number=536870912, format=BINARY_SI}}
            }
            securityContext: class V1SecurityContext {
                allowPrivilegeEscalation: null
                capabilities: null
                privileged: false
                procMount: null
                readOnlyRootFilesystem: null
                runAsGroup: null
                runAsNonRoot: null
                runAsUser: null
                seLinuxOptions: null
                seccompProfile: null
                windowsOptions: null
            }
            startupProbe: class V1Probe {
                exec: null
                failureThreshold: 24
                grpc: null
                httpGet: class V1HTTPGetAction {
                    host: localhost
                    httpHeaders: null
                    path: /health?serializable=true
                    port: 2381
                    scheme: HTTP
                }
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                tcpSocket: null
                terminationGracePeriodSeconds: null
                timeoutSeconds: 5
            }
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/db/etcd
                mountPropagation: null
                name: dir0
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/etcd/server-client.crt
                mountPropagation: null
                name: file0
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/etcd/server-client.key
                mountPropagation: null
                name: file1
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/etcd/server-ca.crt
                mountPropagation: null
                name: file2
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/etcd/peer-server-client.crt
                mountPropagation: null
                name: file3
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/etcd/peer-server-client.key
                mountPropagation: null
                name: file4
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/etcd/peer-ca.crt
                mountPropagation: null
                name: file5
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/db/etcd/config
                mountPropagation: null
                name: file6
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }]
        dnsConfig: null
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        ephemeralContainers: null
        hostAliases: null
        hostIPC: null
        hostNetwork: true
        hostPID: null
        hostUsers: null
        hostname: null
        imagePullSecrets: null
        initContainers: null
        nodeName: rke2-server4
        nodeSelector: null
        os: null
        overhead: null
        preemptionPolicy: PreemptLowerPriority
        priority: 2000000000
        priorityClassName: system-cluster-critical
        readinessGates: null
        restartPolicy: Always
        runtimeClassName: null
        schedulerName: default-scheduler
        securityContext: class V1PodSecurityContext {
            fsGroup: null
            fsGroupChangePolicy: null
            runAsGroup: null
            runAsNonRoot: null
            runAsUser: null
            seLinuxOptions: class V1SELinuxOptions {
                level: null
                role: null
                type: rke2_service_db_t
                user: null
            }
            seccompProfile: null
            supplementalGroups: null
            sysctls: null
            windowsOptions: null
        }
        serviceAccount: null
        serviceAccountName: null
        setHostnameAsFQDN: null
        shareProcessNamespace: null
        subdomain: null
        terminationGracePeriodSeconds: 30
        tolerations: [class V1Toleration {
            effect: NoExecute
            key: null
            operator: Exists
            tolerationSeconds: null
            value: null
        }]
        topologySpreadConstraints: null
        volumes: [class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/db/etcd
                type: DirectoryOrCreate
            }
            iscsi: null
            name: dir0
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/etcd/server-client.crt
                type: File
            }
            iscsi: null
            name: file0
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/etcd/server-client.key
                type: File
            }
            iscsi: null
            name: file1
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/etcd/server-ca.crt
                type: File
            }
            iscsi: null
            name: file2
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/etcd/peer-server-client.crt
                type: File
            }
            iscsi: null
            name: file3
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/etcd/peer-server-client.key
                type: File
            }
            iscsi: null
            name: file4
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/etcd/peer-ca.crt
                type: File
            }
            iscsi: null
            name: file5
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/db/etcd/config
                type: File
            }
            iscsi: null
            name: file6
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }]
    }
    status: class V1PodStatus {
        conditions: [class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-02T01:27:32Z
            message: null
            reason: null
            status: True
            type: Initialized
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:40:46Z
            message: null
            reason: null
            status: True
            type: Ready
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:40:46Z
            message: null
            reason: null
            status: True
            type: ContainersReady
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-02T01:27:32Z
            message: null
            reason: null
            status: True
            type: PodScheduled
        }]
        containerStatuses: [class V1ContainerStatus {
            containerID: containerd://c46ec2bea92a099145a9e4d416f105bb27d5743c270ef2d49c10263201ec76fb
            image: docker.io/rancher/hardened-etcd:v3.5.4-k3s1-build20221011
            imageID: docker.io/rancher/hardened-etcd@sha256:abb0674e4f1462153f3542ea90c0272988e024d304fe9e1f3267643d744caaab
            lastState: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://e9b27dd174279d2ee194ca2a1cfb51d9fe3f1d3544f97bb3df0846758ac7ad84
                    exitCode: 255
                    finishedAt: 2023-02-27T01:40:25Z
                    message: null
                    reason: Unknown
                    signal: null
                    startedAt: 2023-02-02T01:27:33Z
                }
                waiting: null
            }
            name: etcd
            ready: true
            restartCount: 32
            started: true
            state: class V1ContainerState {
                running: class V1ContainerStateRunning {
                    startedAt: 2023-02-27T01:40:34Z
                }
                terminated: null
                waiting: null
            }
        }]
        ephemeralContainerStatuses: null
        hostIP: 172.168.113.110
        initContainerStatuses: null
        message: null
        nominatedNodeName: null
        phase: Running
        podIP: 172.168.113.110
        podIPs: [class V1PodIP {
            ip: 172.168.113.110
        }]
        qosClass: Burstable
        reason: null
        startTime: 2023-02-02T01:27:32Z
    }
}
class V1Pod {
    apiVersion: null
    kind: null
    metadata: class V1ObjectMeta {
        annotations: {helmcharts.helm.cattle.io/configHash=SHA256=80E168DD6F42D5998ED5709439F66B349BF787382AB4FBBFCEAE7A6F03EFFB94, kubernetes.io/psp=global-unrestricted-psp}
        creationTimestamp: 2022-12-02T09:07:20Z
        deletionGracePeriodSeconds: null
        deletionTimestamp: null
        finalizers: null
        generateName: helm-install-rke2-canal-
        generation: null
        labels: {controller-uid=8ea4a708-1035-4b11-8c5f-fb547ee6d5f5, helmcharts.helm.cattle.io/chart=rke2-canal, job-name=helm-install-rke2-canal}
        managedFields: [class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={.={}, f:helmcharts.helm.cattle.io/configHash={}}, f:generateName={}, f:labels={.={}, f:controller-uid={}, f:helmcharts.helm.cattle.io/chart={}, f:job-name={}}, f:ownerReferences={.={}, k:{"uid":"8ea4a708-1035-4b11-8c5f-fb547ee6d5f5"}={}}}, f:spec={f:containers={k:{"name":"helm"}={.={}, f:args={}, f:env={.={}, k:{"name":"BOOTSTRAP"}={.={}, f:name={}, f:value={}}, k:{"name":"CHART"}={.={}, f:name={}}, k:{"name":"CHART_NAMESPACE"}={.={}, f:name={}, f:value={}}, k:{"name":"FAILURE_POLICY"}={.={}, f:name={}, f:value={}}, k:{"name":"HELM_DRIVER"}={.={}, f:name={}, f:value={}}, k:{"name":"HELM_VERSION"}={.={}, f:name={}}, k:{"name":"KUBERNETES_SERVICE_HOST"}={.={}, f:name={}, f:value={}}, k:{"name":"KUBERNETES_SERVICE_PORT"}={.={}, f:name={}, f:value={}}, k:{"name":"NAME"}={.={}, f:name={}, f:value={}}, k:{"name":"NO_PROXY"}={.={}, f:name={}, f:value={}}, k:{"name":"REPO"}={.={}, f:name={}}, k:{"name":"TARGET_NAMESPACE"}={.={}, f:name={}, f:value={}}, k:{"name":"VERSION"}={.={}, f:name={}}}, f:image={}, f:imagePullPolicy={}, f:name={}, f:resources={}, f:terminationMessagePath={}, f:terminationMessagePolicy={}, f:volumeMounts={.={}, k:{"mountPath":"/chart"}={.={}, f:mountPath={}, f:name={}}, k:{"mountPath":"/config"}={.={}, f:mountPath={}, f:name={}}}}}, f:dnsPolicy={}, f:enableServiceLinks={}, f:hostNetwork={}, f:nodeSelector={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={}, f:serviceAccount={}, f:serviceAccountName={}, f:terminationGracePeriodSeconds={}, f:tolerations={}, f:volumes={.={}, k:{"name":"content"}={.={}, f:configMap={.={}, f:defaultMode={}, f:name={}}, f:name={}}, k:{"name":"values"}={.={}, f:configMap={.={}, f:defaultMode={}, f:name={}}, f:name={}}}}}
            manager: kube-controller-manager
            operation: Update
            subresource: null
            time: 2022-12-02T09:07:20Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={k:{"type":"ContainersReady"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:reason={}, f:status={}, f:type={}}, k:{"type":"Initialized"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:reason={}, f:status={}, f:type={}}, k:{"type":"Ready"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:reason={}, f:status={}, f:type={}}}, f:containerStatuses={}, f:hostIP={}, f:phase={}, f:podIP={}, f:podIPs={.={}, k:{"ip":"172.168.113.110"}={.={}, f:ip={}}}, f:startTime={}}}
            manager: kubelet
            operation: Update
            subresource: status
            time: 2022-12-02T09:08:03Z
        }]
        name: helm-install-rke2-canal-ml28q
        namespace: kube-system
        ownerReferences: [class V1OwnerReference {
            apiVersion: batch/v1
            blockOwnerDeletion: true
            controller: true
            kind: Job
            name: helm-install-rke2-canal
            uid: 8ea4a708-1035-4b11-8c5f-fb547ee6d5f5
        }]
        resourceVersion: 732
        selfLink: null
        uid: 05557494-d713-4139-a933-07544ac19b9b
    }
    spec: class V1PodSpec {
        activeDeadlineSeconds: null
        affinity: null
        automountServiceAccountToken: null
        containers: [class V1Container {
            args: [install, --set-string, global.cattle.systemDefaultRegistry=, --set-string, global.clusterCIDR=10.42.0.0/16, --set-string, global.clusterCIDRv4=10.42.0.0/16, --set-string, global.clusterCIDRv6=, --set-string, global.clusterDNS=10.43.0.10, --set-string, global.clusterDomain=cluster.local, --set-string, global.rke2DataDir=/var/lib/rancher/rke2, --set-string, global.serviceCIDR=10.43.0.0/16, --set-string, global.systemDefaultRegistry=]
            command: null
            env: [class V1EnvVar {
                name: NAME
                value: rke2-canal
                valueFrom: null
            }, class V1EnvVar {
                name: VERSION
                value: null
                valueFrom: null
            }, class V1EnvVar {
                name: REPO
                value: null
                valueFrom: null
            }, class V1EnvVar {
                name: HELM_DRIVER
                value: secret
                valueFrom: null
            }, class V1EnvVar {
                name: CHART_NAMESPACE
                value: kube-system
                valueFrom: null
            }, class V1EnvVar {
                name: CHART
                value: null
                valueFrom: null
            }, class V1EnvVar {
                name: HELM_VERSION
                value: null
                valueFrom: null
            }, class V1EnvVar {
                name: TARGET_NAMESPACE
                value: kube-system
                valueFrom: null
            }, class V1EnvVar {
                name: KUBERNETES_SERVICE_HOST
                value: 127.0.0.1
                valueFrom: null
            }, class V1EnvVar {
                name: KUBERNETES_SERVICE_PORT
                value: 6443
                valueFrom: null
            }, class V1EnvVar {
                name: BOOTSTRAP
                value: true
                valueFrom: null
            }, class V1EnvVar {
                name: NO_PROXY
                value: .svc,.cluster.local,10.42.0.0/16,10.43.0.0/16
                valueFrom: null
            }, class V1EnvVar {
                name: FAILURE_POLICY
                value: reinstall
                valueFrom: null
            }]
            envFrom: null
            image: rancher/klipper-helm:v0.7.3-build20220613
            imagePullPolicy: IfNotPresent
            lifecycle: null
            livenessProbe: null
            name: helm
            ports: null
            readinessProbe: null
            resources: class V1ResourceRequirements {
                limits: null
                requests: null
            }
            securityContext: null
            startupProbe: null
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /config
                mountPropagation: null
                name: values
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /chart
                mountPropagation: null
                name: content
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                mountPropagation: null
                name: kube-api-access-jr6dd
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }]
        dnsConfig: null
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        ephemeralContainers: null
        hostAliases: null
        hostIPC: null
        hostNetwork: true
        hostPID: null
        hostUsers: null
        hostname: null
        imagePullSecrets: null
        initContainers: null
        nodeName: rke2-server4
        nodeSelector: {kubernetes.io/os=linux, node-role.kubernetes.io/control-plane=true}
        os: null
        overhead: null
        preemptionPolicy: PreemptLowerPriority
        priority: 0
        priorityClassName: null
        readinessGates: null
        restartPolicy: OnFailure
        runtimeClassName: null
        schedulerName: default-scheduler
        securityContext: class V1PodSecurityContext {
            fsGroup: null
            fsGroupChangePolicy: null
            runAsGroup: null
            runAsNonRoot: null
            runAsUser: null
            seLinuxOptions: null
            seccompProfile: null
            supplementalGroups: null
            sysctls: null
            windowsOptions: null
        }
        serviceAccount: helm-rke2-canal
        serviceAccountName: helm-rke2-canal
        setHostnameAsFQDN: null
        shareProcessNamespace: null
        subdomain: null
        terminationGracePeriodSeconds: 30
        tolerations: [class V1Toleration {
            effect: NoSchedule
            key: node.kubernetes.io/not-ready
            operator: null
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node.cloudprovider.kubernetes.io/uninitialized
            operator: Equal
            tolerationSeconds: null
            value: true
        }, class V1Toleration {
            effect: null
            key: CriticalAddonsOnly
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node-role.kubernetes.io/etcd
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node-role.kubernetes.io/control-plane
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/not-ready
            operator: Exists
            tolerationSeconds: 300
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/unreachable
            operator: Exists
            tolerationSeconds: 300
            value: null
        }]
        topologySpreadConstraints: null
        volumes: [class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: class V1ConfigMapVolumeSource {
                defaultMode: 420
                items: null
                name: chart-values-rke2-canal
                optional: null
            }
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: values
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: class V1ConfigMapVolumeSource {
                defaultMode: 420
                items: null
                name: chart-content-rke2-canal
                optional: null
            }
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: content
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: kube-api-access-jr6dd
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: class V1ProjectedVolumeSource {
                defaultMode: 420
                sources: [class V1VolumeProjection {
                    configMap: null
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: class V1ServiceAccountTokenProjection {
                        audience: null
                        expirationSeconds: 3607
                        path: token
                    }
                }, class V1VolumeProjection {
                    configMap: class V1ConfigMapProjection {
                        items: [class V1KeyToPath {
                            key: ca.crt
                            mode: null
                            path: ca.crt
                        }]
                        name: kube-root-ca.crt
                        optional: null
                    }
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: null
                }, class V1VolumeProjection {
                    configMap: null
                    downwardAPI: class V1DownwardAPIProjection {
                        items: [class V1DownwardAPIVolumeFile {
                            fieldRef: class V1ObjectFieldSelector {
                                apiVersion: v1
                                fieldPath: metadata.namespace
                            }
                            mode: null
                            path: namespace
                            resourceFieldRef: null
                        }]
                    }
                    secret: null
                    serviceAccountToken: null
                }]
            }
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }]
    }
    status: class V1PodStatus {
        conditions: [class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:07:23Z
            message: null
            reason: PodCompleted
            status: True
            type: Initialized
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:08:03Z
            message: null
            reason: PodCompleted
            status: False
            type: Ready
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:08:03Z
            message: null
            reason: PodCompleted
            status: False
            type: ContainersReady
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:07:20Z
            message: null
            reason: null
            status: True
            type: PodScheduled
        }]
        containerStatuses: [class V1ContainerStatus {
            containerID: containerd://27aaa3a81be89baa7952eacb7645ea618df3306ec23e4e455b5884e3128b6a4b
            image: docker.io/rancher/klipper-helm:v0.7.3-build20220613
            imageID: docker.io/rancher/klipper-helm@sha256:6a8e819402e3fdd5ff9ec576174b6c0013870b9c0627a05fa0ab17374b5cf189
            lastState: class V1ContainerState {
                running: null
                terminated: null
                waiting: null
            }
            name: helm
            ready: false
            restartCount: 0
            started: false
            state: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://27aaa3a81be89baa7952eacb7645ea618df3306ec23e4e455b5884e3128b6a4b
                    exitCode: 0
                    finishedAt: 2022-12-02T09:08:02Z
                    message: Installing helm_v3 chart
                    
                    reason: Completed
                    signal: null
                    startedAt: 2022-12-02T09:08:01Z
                }
                waiting: null
            }
        }]
        ephemeralContainerStatuses: null
        hostIP: 172.168.113.110
        initContainerStatuses: null
        message: null
        nominatedNodeName: null
        phase: Succeeded
        podIP: 172.168.113.110
        podIPs: [class V1PodIP {
            ip: 172.168.113.110
        }]
        qosClass: BestEffort
        reason: null
        startTime: 2022-12-02T09:07:23Z
    }
}
class V1Pod {
    apiVersion: null
    kind: null
    metadata: class V1ObjectMeta {
        annotations: {helmcharts.helm.cattle.io/configHash=SHA256=5AE48E10064F895A73D3DD0517ED2395BABEC5505AEEA114597D068B8D47BCCB, kubernetes.io/psp=global-unrestricted-psp}
        creationTimestamp: 2022-12-02T09:07:20Z
        deletionGracePeriodSeconds: null
        deletionTimestamp: null
        finalizers: null
        generateName: helm-install-rke2-coredns-
        generation: null
        labels: {controller-uid=79e2641f-9500-4df0-83f9-e954c931faef, helmcharts.helm.cattle.io/chart=rke2-coredns, job-name=helm-install-rke2-coredns}
        managedFields: [class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={.={}, f:helmcharts.helm.cattle.io/configHash={}}, f:generateName={}, f:labels={.={}, f:controller-uid={}, f:helmcharts.helm.cattle.io/chart={}, f:job-name={}}, f:ownerReferences={.={}, k:{"uid":"79e2641f-9500-4df0-83f9-e954c931faef"}={}}}, f:spec={f:containers={k:{"name":"helm"}={.={}, f:args={}, f:env={.={}, k:{"name":"BOOTSTRAP"}={.={}, f:name={}, f:value={}}, k:{"name":"CHART"}={.={}, f:name={}}, k:{"name":"CHART_NAMESPACE"}={.={}, f:name={}, f:value={}}, k:{"name":"FAILURE_POLICY"}={.={}, f:name={}, f:value={}}, k:{"name":"HELM_DRIVER"}={.={}, f:name={}, f:value={}}, k:{"name":"HELM_VERSION"}={.={}, f:name={}}, k:{"name":"KUBERNETES_SERVICE_HOST"}={.={}, f:name={}, f:value={}}, k:{"name":"KUBERNETES_SERVICE_PORT"}={.={}, f:name={}, f:value={}}, k:{"name":"NAME"}={.={}, f:name={}, f:value={}}, k:{"name":"NO_PROXY"}={.={}, f:name={}, f:value={}}, k:{"name":"REPO"}={.={}, f:name={}}, k:{"name":"TARGET_NAMESPACE"}={.={}, f:name={}, f:value={}}, k:{"name":"VERSION"}={.={}, f:name={}}}, f:image={}, f:imagePullPolicy={}, f:name={}, f:resources={}, f:terminationMessagePath={}, f:terminationMessagePolicy={}, f:volumeMounts={.={}, k:{"mountPath":"/chart"}={.={}, f:mountPath={}, f:name={}}, k:{"mountPath":"/config"}={.={}, f:mountPath={}, f:name={}}}}}, f:dnsPolicy={}, f:enableServiceLinks={}, f:hostNetwork={}, f:nodeSelector={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={}, f:serviceAccount={}, f:serviceAccountName={}, f:terminationGracePeriodSeconds={}, f:tolerations={}, f:volumes={.={}, k:{"name":"content"}={.={}, f:configMap={.={}, f:defaultMode={}, f:name={}}, f:name={}}, k:{"name":"values"}={.={}, f:configMap={.={}, f:defaultMode={}, f:name={}}, f:name={}}}}}
            manager: kube-controller-manager
            operation: Update
            subresource: null
            time: 2022-12-02T09:07:20Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={k:{"type":"ContainersReady"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:reason={}, f:status={}, f:type={}}, k:{"type":"Initialized"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:reason={}, f:status={}, f:type={}}, k:{"type":"Ready"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:reason={}, f:status={}, f:type={}}}, f:containerStatuses={}, f:hostIP={}, f:phase={}, f:podIP={}, f:podIPs={.={}, k:{"ip":"172.168.113.110"}={.={}, f:ip={}}}, f:startTime={}}}
            manager: kubelet
            operation: Update
            subresource: status
            time: 2022-12-02T09:08:02Z
        }]
        name: helm-install-rke2-coredns-svvmx
        namespace: kube-system
        ownerReferences: [class V1OwnerReference {
            apiVersion: batch/v1
            blockOwnerDeletion: true
            controller: true
            kind: Job
            name: helm-install-rke2-coredns
            uid: 79e2641f-9500-4df0-83f9-e954c931faef
        }]
        resourceVersion: 728
        selfLink: null
        uid: b9bf85be-8728-40d2-a694-1fd924f85cf9
    }
    spec: class V1PodSpec {
        activeDeadlineSeconds: null
        affinity: null
        automountServiceAccountToken: null
        containers: [class V1Container {
            args: [install, --set-string, global.cattle.systemDefaultRegistry=, --set-string, global.clusterCIDR=10.42.0.0/16, --set-string, global.clusterCIDRv4=10.42.0.0/16, --set-string, global.clusterCIDRv6=, --set-string, global.clusterDNS=10.43.0.10, --set-string, global.clusterDomain=cluster.local, --set-string, global.rke2DataDir=/var/lib/rancher/rke2, --set-string, global.serviceCIDR=10.43.0.0/16, --set-string, global.systemDefaultRegistry=]
            command: null
            env: [class V1EnvVar {
                name: NAME
                value: rke2-coredns
                valueFrom: null
            }, class V1EnvVar {
                name: VERSION
                value: null
                valueFrom: null
            }, class V1EnvVar {
                name: REPO
                value: null
                valueFrom: null
            }, class V1EnvVar {
                name: HELM_DRIVER
                value: secret
                valueFrom: null
            }, class V1EnvVar {
                name: CHART_NAMESPACE
                value: kube-system
                valueFrom: null
            }, class V1EnvVar {
                name: CHART
                value: null
                valueFrom: null
            }, class V1EnvVar {
                name: HELM_VERSION
                value: null
                valueFrom: null
            }, class V1EnvVar {
                name: TARGET_NAMESPACE
                value: kube-system
                valueFrom: null
            }, class V1EnvVar {
                name: KUBERNETES_SERVICE_HOST
                value: 127.0.0.1
                valueFrom: null
            }, class V1EnvVar {
                name: KUBERNETES_SERVICE_PORT
                value: 6443
                valueFrom: null
            }, class V1EnvVar {
                name: BOOTSTRAP
                value: true
                valueFrom: null
            }, class V1EnvVar {
                name: NO_PROXY
                value: .svc,.cluster.local,10.42.0.0/16,10.43.0.0/16
                valueFrom: null
            }, class V1EnvVar {
                name: FAILURE_POLICY
                value: reinstall
                valueFrom: null
            }]
            envFrom: null
            image: rancher/klipper-helm:v0.7.3-build20220613
            imagePullPolicy: IfNotPresent
            lifecycle: null
            livenessProbe: null
            name: helm
            ports: null
            readinessProbe: null
            resources: class V1ResourceRequirements {
                limits: null
                requests: null
            }
            securityContext: null
            startupProbe: null
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /config
                mountPropagation: null
                name: values
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /chart
                mountPropagation: null
                name: content
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                mountPropagation: null
                name: kube-api-access-n4grs
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }]
        dnsConfig: null
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        ephemeralContainers: null
        hostAliases: null
        hostIPC: null
        hostNetwork: true
        hostPID: null
        hostUsers: null
        hostname: null
        imagePullSecrets: null
        initContainers: null
        nodeName: rke2-server4
        nodeSelector: {kubernetes.io/os=linux, node-role.kubernetes.io/control-plane=true}
        os: null
        overhead: null
        preemptionPolicy: PreemptLowerPriority
        priority: 0
        priorityClassName: null
        readinessGates: null
        restartPolicy: OnFailure
        runtimeClassName: null
        schedulerName: default-scheduler
        securityContext: class V1PodSecurityContext {
            fsGroup: null
            fsGroupChangePolicy: null
            runAsGroup: null
            runAsNonRoot: null
            runAsUser: null
            seLinuxOptions: null
            seccompProfile: null
            supplementalGroups: null
            sysctls: null
            windowsOptions: null
        }
        serviceAccount: helm-rke2-coredns
        serviceAccountName: helm-rke2-coredns
        setHostnameAsFQDN: null
        shareProcessNamespace: null
        subdomain: null
        terminationGracePeriodSeconds: 30
        tolerations: [class V1Toleration {
            effect: NoSchedule
            key: node.kubernetes.io/not-ready
            operator: null
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node.cloudprovider.kubernetes.io/uninitialized
            operator: Equal
            tolerationSeconds: null
            value: true
        }, class V1Toleration {
            effect: null
            key: CriticalAddonsOnly
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node-role.kubernetes.io/etcd
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node-role.kubernetes.io/control-plane
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/not-ready
            operator: Exists
            tolerationSeconds: 300
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/unreachable
            operator: Exists
            tolerationSeconds: 300
            value: null
        }]
        topologySpreadConstraints: null
        volumes: [class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: class V1ConfigMapVolumeSource {
                defaultMode: 420
                items: null
                name: chart-values-rke2-coredns
                optional: null
            }
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: values
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: class V1ConfigMapVolumeSource {
                defaultMode: 420
                items: null
                name: chart-content-rke2-coredns
                optional: null
            }
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: content
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: kube-api-access-n4grs
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: class V1ProjectedVolumeSource {
                defaultMode: 420
                sources: [class V1VolumeProjection {
                    configMap: null
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: class V1ServiceAccountTokenProjection {
                        audience: null
                        expirationSeconds: 3607
                        path: token
                    }
                }, class V1VolumeProjection {
                    configMap: class V1ConfigMapProjection {
                        items: [class V1KeyToPath {
                            key: ca.crt
                            mode: null
                            path: ca.crt
                        }]
                        name: kube-root-ca.crt
                        optional: null
                    }
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: null
                }, class V1VolumeProjection {
                    configMap: null
                    downwardAPI: class V1DownwardAPIProjection {
                        items: [class V1DownwardAPIVolumeFile {
                            fieldRef: class V1ObjectFieldSelector {
                                apiVersion: v1
                                fieldPath: metadata.namespace
                            }
                            mode: null
                            path: namespace
                            resourceFieldRef: null
                        }]
                    }
                    secret: null
                    serviceAccountToken: null
                }]
            }
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }]
    }
    status: class V1PodStatus {
        conditions: [class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:07:23Z
            message: null
            reason: PodCompleted
            status: True
            type: Initialized
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:08:02Z
            message: null
            reason: PodCompleted
            status: False
            type: Ready
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:08:02Z
            message: null
            reason: PodCompleted
            status: False
            type: ContainersReady
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:07:20Z
            message: null
            reason: null
            status: True
            type: PodScheduled
        }]
        containerStatuses: [class V1ContainerStatus {
            containerID: containerd://ca97b0668914e309f236e94d0337949abde80eaac35b5f607176e22475080719
            image: docker.io/rancher/klipper-helm:v0.7.3-build20220613
            imageID: docker.io/rancher/klipper-helm@sha256:6a8e819402e3fdd5ff9ec576174b6c0013870b9c0627a05fa0ab17374b5cf189
            lastState: class V1ContainerState {
                running: null
                terminated: null
                waiting: null
            }
            name: helm
            ready: false
            restartCount: 0
            started: false
            state: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://ca97b0668914e309f236e94d0337949abde80eaac35b5f607176e22475080719
                    exitCode: 0
                    finishedAt: 2022-12-02T09:08:02Z
                    message: Installing helm_v3 chart
                    
                    reason: Completed
                    signal: null
                    startedAt: 2022-12-02T09:08:01Z
                }
                waiting: null
            }
        }]
        ephemeralContainerStatuses: null
        hostIP: 172.168.113.110
        initContainerStatuses: null
        message: null
        nominatedNodeName: null
        phase: Succeeded
        podIP: 172.168.113.110
        podIPs: [class V1PodIP {
            ip: 172.168.113.110
        }]
        qosClass: BestEffort
        reason: null
        startTime: 2022-12-02T09:07:23Z
    }
}
class V1Pod {
    apiVersion: null
    kind: null
    metadata: class V1ObjectMeta {
        annotations: {cni.projectcalico.org/containerID=d33aac8d18a6e5f9f0e7b8bbeb73d4b6ec6557f045ab60fdcec2848eacad4bf5, cni.projectcalico.org/podIP=, cni.projectcalico.org/podIPs=, helmcharts.helm.cattle.io/configHash=SHA256=8F093B0EB6B421FCD1F6874A7FC2CE2ED2B2B4D338BC6C6D77994133D502D4AF, kubernetes.io/psp=global-unrestricted-psp}
        creationTimestamp: 2022-12-02T09:07:20Z
        deletionGracePeriodSeconds: null
        deletionTimestamp: null
        finalizers: null
        generateName: helm-install-rke2-ingress-nginx-
        generation: null
        labels: {controller-uid=94c93d16-7142-4d09-ad77-854cf1d8ce6c, helmcharts.helm.cattle.io/chart=rke2-ingress-nginx, job-name=helm-install-rke2-ingress-nginx}
        managedFields: [class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={.={}, f:helmcharts.helm.cattle.io/configHash={}}, f:generateName={}, f:labels={.={}, f:controller-uid={}, f:helmcharts.helm.cattle.io/chart={}, f:job-name={}}, f:ownerReferences={.={}, k:{"uid":"94c93d16-7142-4d09-ad77-854cf1d8ce6c"}={}}}, f:spec={f:containers={k:{"name":"helm"}={.={}, f:args={}, f:env={.={}, k:{"name":"CHART"}={.={}, f:name={}}, k:{"name":"CHART_NAMESPACE"}={.={}, f:name={}, f:value={}}, k:{"name":"FAILURE_POLICY"}={.={}, f:name={}, f:value={}}, k:{"name":"HELM_DRIVER"}={.={}, f:name={}, f:value={}}, k:{"name":"HELM_VERSION"}={.={}, f:name={}}, k:{"name":"NAME"}={.={}, f:name={}, f:value={}}, k:{"name":"NO_PROXY"}={.={}, f:name={}, f:value={}}, k:{"name":"REPO"}={.={}, f:name={}}, k:{"name":"TARGET_NAMESPACE"}={.={}, f:name={}, f:value={}}, k:{"name":"VERSION"}={.={}, f:name={}}}, f:image={}, f:imagePullPolicy={}, f:name={}, f:resources={}, f:terminationMessagePath={}, f:terminationMessagePolicy={}, f:volumeMounts={.={}, k:{"mountPath":"/chart"}={.={}, f:mountPath={}, f:name={}}, k:{"mountPath":"/config"}={.={}, f:mountPath={}, f:name={}}}}}, f:dnsPolicy={}, f:enableServiceLinks={}, f:nodeSelector={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={}, f:serviceAccount={}, f:serviceAccountName={}, f:terminationGracePeriodSeconds={}, f:volumes={.={}, k:{"name":"content"}={.={}, f:configMap={.={}, f:defaultMode={}, f:name={}}, f:name={}}, k:{"name":"values"}={.={}, f:configMap={.={}, f:defaultMode={}, f:name={}}, f:name={}}}}}
            manager: kube-controller-manager
            operation: Update
            subresource: null
            time: 2022-12-02T09:07:20Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={.={}, k:{"type":"PodScheduled"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:message={}, f:reason={}, f:status={}, f:type={}}}}}
            manager: kube-scheduler
            operation: Update
            subresource: status
            time: 2022-12-02T09:07:20Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={f:cni.projectcalico.org/containerID={}, f:cni.projectcalico.org/podIP={}, f:cni.projectcalico.org/podIPs={}}}}
            manager: calico
            operation: Update
            subresource: status
            time: 2022-12-02T09:09:52Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={k:{"type":"ContainersReady"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:reason={}, f:status={}, f:type={}}, k:{"type":"Initialized"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:reason={}, f:status={}, f:type={}}, k:{"type":"Ready"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:reason={}, f:status={}, f:type={}}}, f:containerStatuses={}, f:hostIP={}, f:phase={}, f:podIP={}, f:podIPs={.={}, k:{"ip":"10.42.0.4"}={.={}, f:ip={}}}, f:startTime={}}}
            manager: kubelet
            operation: Update
            subresource: status
            time: 2022-12-02T09:10:56Z
        }]
        name: helm-install-rke2-ingress-nginx-9jxw7
        namespace: kube-system
        ownerReferences: [class V1OwnerReference {
            apiVersion: batch/v1
            blockOwnerDeletion: true
            controller: true
            kind: Job
            name: helm-install-rke2-ingress-nginx
            uid: 94c93d16-7142-4d09-ad77-854cf1d8ce6c
        }]
        resourceVersion: 1424
        selfLink: null
        uid: 3cf5ddb6-dbde-4323-adbd-77daf2b3c78d
    }
    spec: class V1PodSpec {
        activeDeadlineSeconds: null
        affinity: null
        automountServiceAccountToken: null
        containers: [class V1Container {
            args: [install, --set-string, global.cattle.systemDefaultRegistry=, --set-string, global.clusterCIDR=10.42.0.0/16, --set-string, global.clusterCIDRv4=10.42.0.0/16, --set-string, global.clusterCIDRv6=, --set-string, global.clusterDNS=10.43.0.10, --set-string, global.clusterDomain=cluster.local, --set-string, global.rke2DataDir=/var/lib/rancher/rke2, --set-string, global.serviceCIDR=10.43.0.0/16, --set-string, global.systemDefaultRegistry=]
            command: null
            env: [class V1EnvVar {
                name: NAME
                value: rke2-ingress-nginx
                valueFrom: null
            }, class V1EnvVar {
                name: VERSION
                value: null
                valueFrom: null
            }, class V1EnvVar {
                name: REPO
                value: null
                valueFrom: null
            }, class V1EnvVar {
                name: HELM_DRIVER
                value: secret
                valueFrom: null
            }, class V1EnvVar {
                name: CHART_NAMESPACE
                value: kube-system
                valueFrom: null
            }, class V1EnvVar {
                name: CHART
                value: null
                valueFrom: null
            }, class V1EnvVar {
                name: HELM_VERSION
                value: null
                valueFrom: null
            }, class V1EnvVar {
                name: TARGET_NAMESPACE
                value: kube-system
                valueFrom: null
            }, class V1EnvVar {
                name: NO_PROXY
                value: .svc,.cluster.local,10.42.0.0/16,10.43.0.0/16
                valueFrom: null
            }, class V1EnvVar {
                name: FAILURE_POLICY
                value: reinstall
                valueFrom: null
            }]
            envFrom: null
            image: rancher/klipper-helm:v0.7.3-build20220613
            imagePullPolicy: IfNotPresent
            lifecycle: null
            livenessProbe: null
            name: helm
            ports: null
            readinessProbe: null
            resources: class V1ResourceRequirements {
                limits: null
                requests: null
            }
            securityContext: null
            startupProbe: null
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /config
                mountPropagation: null
                name: values
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /chart
                mountPropagation: null
                name: content
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                mountPropagation: null
                name: kube-api-access-zlx9c
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }]
        dnsConfig: null
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        ephemeralContainers: null
        hostAliases: null
        hostIPC: null
        hostNetwork: null
        hostPID: null
        hostUsers: null
        hostname: null
        imagePullSecrets: null
        initContainers: null
        nodeName: rke2-server4
        nodeSelector: {kubernetes.io/os=linux}
        os: null
        overhead: null
        preemptionPolicy: PreemptLowerPriority
        priority: 0
        priorityClassName: null
        readinessGates: null
        restartPolicy: OnFailure
        runtimeClassName: null
        schedulerName: default-scheduler
        securityContext: class V1PodSecurityContext {
            fsGroup: null
            fsGroupChangePolicy: null
            runAsGroup: null
            runAsNonRoot: null
            runAsUser: null
            seLinuxOptions: null
            seccompProfile: null
            supplementalGroups: null
            sysctls: null
            windowsOptions: null
        }
        serviceAccount: helm-rke2-ingress-nginx
        serviceAccountName: helm-rke2-ingress-nginx
        setHostnameAsFQDN: null
        shareProcessNamespace: null
        subdomain: null
        terminationGracePeriodSeconds: 30
        tolerations: [class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/not-ready
            operator: Exists
            tolerationSeconds: 300
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/unreachable
            operator: Exists
            tolerationSeconds: 300
            value: null
        }]
        topologySpreadConstraints: null
        volumes: [class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: class V1ConfigMapVolumeSource {
                defaultMode: 420
                items: null
                name: chart-values-rke2-ingress-nginx
                optional: null
            }
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: values
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: class V1ConfigMapVolumeSource {
                defaultMode: 420
                items: null
                name: chart-content-rke2-ingress-nginx
                optional: null
            }
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: content
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: kube-api-access-zlx9c
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: class V1ProjectedVolumeSource {
                defaultMode: 420
                sources: [class V1VolumeProjection {
                    configMap: null
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: class V1ServiceAccountTokenProjection {
                        audience: null
                        expirationSeconds: 3607
                        path: token
                    }
                }, class V1VolumeProjection {
                    configMap: class V1ConfigMapProjection {
                        items: [class V1KeyToPath {
                            key: ca.crt
                            mode: null
                            path: ca.crt
                        }]
                        name: kube-root-ca.crt
                        optional: null
                    }
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: null
                }, class V1VolumeProjection {
                    configMap: null
                    downwardAPI: class V1DownwardAPIProjection {
                        items: [class V1DownwardAPIVolumeFile {
                            fieldRef: class V1ObjectFieldSelector {
                                apiVersion: v1
                                fieldPath: metadata.namespace
                            }
                            mode: null
                            path: namespace
                            resourceFieldRef: null
                        }]
                    }
                    secret: null
                    serviceAccountToken: null
                }]
            }
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }]
    }
    status: class V1PodStatus {
        conditions: [class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:09:50Z
            message: null
            reason: PodCompleted
            status: True
            type: Initialized
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:10:56Z
            message: null
            reason: PodCompleted
            status: False
            type: Ready
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:10:56Z
            message: null
            reason: PodCompleted
            status: False
            type: ContainersReady
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:09:50Z
            message: null
            reason: null
            status: True
            type: PodScheduled
        }]
        containerStatuses: [class V1ContainerStatus {
            containerID: containerd://d2ef31d0e4a0f71990724a9ec87b86c0e21f871347ac297c69f35b9c2ae6b5b6
            image: docker.io/rancher/klipper-helm:v0.7.3-build20220613
            imageID: docker.io/rancher/klipper-helm@sha256:6a8e819402e3fdd5ff9ec576174b6c0013870b9c0627a05fa0ab17374b5cf189
            lastState: class V1ContainerState {
                running: null
                terminated: null
                waiting: null
            }
            name: helm
            ready: false
            restartCount: 0
            started: false
            state: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://d2ef31d0e4a0f71990724a9ec87b86c0e21f871347ac297c69f35b9c2ae6b5b6
                    exitCode: 0
                    finishedAt: 2022-12-02T09:10:55Z
                    message: Installing helm_v3 chart
                    
                    reason: Completed
                    signal: null
                    startedAt: 2022-12-02T09:09:53Z
                }
                waiting: null
            }
        }]
        ephemeralContainerStatuses: null
        hostIP: 172.168.113.110
        initContainerStatuses: null
        message: null
        nominatedNodeName: null
        phase: Succeeded
        podIP: 10.42.0.4
        podIPs: [class V1PodIP {
            ip: 10.42.0.4
        }]
        qosClass: BestEffort
        reason: null
        startTime: 2022-12-02T09:09:50Z
    }
}
class V1Pod {
    apiVersion: null
    kind: null
    metadata: class V1ObjectMeta {
        annotations: {cni.projectcalico.org/containerID=ecc7b225fde8526f6825439614434c08ddb558b6c03adde45ccc1a03bb414410, cni.projectcalico.org/podIP=, cni.projectcalico.org/podIPs=, helmcharts.helm.cattle.io/configHash=SHA256=7BDA3D8CACF872FF66943B02FEE044F039CE60F6D264A5ADD04596A3BB480F11, kubernetes.io/psp=global-unrestricted-psp}
        creationTimestamp: 2022-12-02T09:07:20Z
        deletionGracePeriodSeconds: null
        deletionTimestamp: null
        finalizers: null
        generateName: helm-install-rke2-metrics-server-
        generation: null
        labels: {controller-uid=2d23ce1d-4d18-4185-a5e9-dad135f6972f, helmcharts.helm.cattle.io/chart=rke2-metrics-server, job-name=helm-install-rke2-metrics-server}
        managedFields: [class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={.={}, f:helmcharts.helm.cattle.io/configHash={}}, f:generateName={}, f:labels={.={}, f:controller-uid={}, f:helmcharts.helm.cattle.io/chart={}, f:job-name={}}, f:ownerReferences={.={}, k:{"uid":"2d23ce1d-4d18-4185-a5e9-dad135f6972f"}={}}}, f:spec={f:containers={k:{"name":"helm"}={.={}, f:args={}, f:env={.={}, k:{"name":"CHART"}={.={}, f:name={}}, k:{"name":"CHART_NAMESPACE"}={.={}, f:name={}, f:value={}}, k:{"name":"FAILURE_POLICY"}={.={}, f:name={}, f:value={}}, k:{"name":"HELM_DRIVER"}={.={}, f:name={}, f:value={}}, k:{"name":"HELM_VERSION"}={.={}, f:name={}}, k:{"name":"NAME"}={.={}, f:name={}, f:value={}}, k:{"name":"NO_PROXY"}={.={}, f:name={}, f:value={}}, k:{"name":"REPO"}={.={}, f:name={}}, k:{"name":"TARGET_NAMESPACE"}={.={}, f:name={}, f:value={}}, k:{"name":"VERSION"}={.={}, f:name={}}}, f:image={}, f:imagePullPolicy={}, f:name={}, f:resources={}, f:terminationMessagePath={}, f:terminationMessagePolicy={}, f:volumeMounts={.={}, k:{"mountPath":"/chart"}={.={}, f:mountPath={}, f:name={}}, k:{"mountPath":"/config"}={.={}, f:mountPath={}, f:name={}}}}}, f:dnsPolicy={}, f:enableServiceLinks={}, f:nodeSelector={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={}, f:serviceAccount={}, f:serviceAccountName={}, f:terminationGracePeriodSeconds={}, f:volumes={.={}, k:{"name":"content"}={.={}, f:configMap={.={}, f:defaultMode={}, f:name={}}, f:name={}}, k:{"name":"values"}={.={}, f:configMap={.={}, f:defaultMode={}, f:name={}}, f:name={}}}}}
            manager: kube-controller-manager
            operation: Update
            subresource: null
            time: 2022-12-02T09:07:20Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={.={}, k:{"type":"PodScheduled"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:message={}, f:reason={}, f:status={}, f:type={}}}}}
            manager: kube-scheduler
            operation: Update
            subresource: status
            time: 2022-12-02T09:07:20Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={f:cni.projectcalico.org/containerID={}, f:cni.projectcalico.org/podIP={}, f:cni.projectcalico.org/podIPs={}}}}
            manager: calico
            operation: Update
            subresource: status
            time: 2022-12-02T09:09:52Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={k:{"type":"ContainersReady"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:reason={}, f:status={}, f:type={}}, k:{"type":"Initialized"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:reason={}, f:status={}, f:type={}}, k:{"type":"Ready"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:reason={}, f:status={}, f:type={}}}, f:containerStatuses={}, f:hostIP={}, f:phase={}, f:podIP={}, f:podIPs={.={}, k:{"ip":"10.42.0.5"}={.={}, f:ip={}}}, f:startTime={}}}
            manager: kubelet
            operation: Update
            subresource: status
            time: 2022-12-02T09:09:55Z
        }]
        name: helm-install-rke2-metrics-server-7l6zf
        namespace: kube-system
        ownerReferences: [class V1OwnerReference {
            apiVersion: batch/v1
            blockOwnerDeletion: true
            controller: true
            kind: Job
            name: helm-install-rke2-metrics-server
            uid: 2d23ce1d-4d18-4185-a5e9-dad135f6972f
        }]
        resourceVersion: 1148
        selfLink: null
        uid: f4f42139-a783-4a4b-9899-8e85132606e3
    }
    spec: class V1PodSpec {
        activeDeadlineSeconds: null
        affinity: null
        automountServiceAccountToken: null
        containers: [class V1Container {
            args: [install, --set-string, global.cattle.systemDefaultRegistry=, --set-string, global.clusterCIDR=10.42.0.0/16, --set-string, global.clusterCIDRv4=10.42.0.0/16, --set-string, global.clusterCIDRv6=, --set-string, global.clusterDNS=10.43.0.10, --set-string, global.clusterDomain=cluster.local, --set-string, global.rke2DataDir=/var/lib/rancher/rke2, --set-string, global.serviceCIDR=10.43.0.0/16, --set-string, global.systemDefaultRegistry=]
            command: null
            env: [class V1EnvVar {
                name: NAME
                value: rke2-metrics-server
                valueFrom: null
            }, class V1EnvVar {
                name: VERSION
                value: null
                valueFrom: null
            }, class V1EnvVar {
                name: REPO
                value: null
                valueFrom: null
            }, class V1EnvVar {
                name: HELM_DRIVER
                value: secret
                valueFrom: null
            }, class V1EnvVar {
                name: CHART_NAMESPACE
                value: kube-system
                valueFrom: null
            }, class V1EnvVar {
                name: CHART
                value: null
                valueFrom: null
            }, class V1EnvVar {
                name: HELM_VERSION
                value: null
                valueFrom: null
            }, class V1EnvVar {
                name: TARGET_NAMESPACE
                value: kube-system
                valueFrom: null
            }, class V1EnvVar {
                name: NO_PROXY
                value: .svc,.cluster.local,10.42.0.0/16,10.43.0.0/16
                valueFrom: null
            }, class V1EnvVar {
                name: FAILURE_POLICY
                value: reinstall
                valueFrom: null
            }]
            envFrom: null
            image: rancher/klipper-helm:v0.7.3-build20220613
            imagePullPolicy: IfNotPresent
            lifecycle: null
            livenessProbe: null
            name: helm
            ports: null
            readinessProbe: null
            resources: class V1ResourceRequirements {
                limits: null
                requests: null
            }
            securityContext: null
            startupProbe: null
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /config
                mountPropagation: null
                name: values
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /chart
                mountPropagation: null
                name: content
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                mountPropagation: null
                name: kube-api-access-h9r24
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }]
        dnsConfig: null
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        ephemeralContainers: null
        hostAliases: null
        hostIPC: null
        hostNetwork: null
        hostPID: null
        hostUsers: null
        hostname: null
        imagePullSecrets: null
        initContainers: null
        nodeName: rke2-server4
        nodeSelector: {kubernetes.io/os=linux}
        os: null
        overhead: null
        preemptionPolicy: PreemptLowerPriority
        priority: 0
        priorityClassName: null
        readinessGates: null
        restartPolicy: OnFailure
        runtimeClassName: null
        schedulerName: default-scheduler
        securityContext: class V1PodSecurityContext {
            fsGroup: null
            fsGroupChangePolicy: null
            runAsGroup: null
            runAsNonRoot: null
            runAsUser: null
            seLinuxOptions: null
            seccompProfile: null
            supplementalGroups: null
            sysctls: null
            windowsOptions: null
        }
        serviceAccount: helm-rke2-metrics-server
        serviceAccountName: helm-rke2-metrics-server
        setHostnameAsFQDN: null
        shareProcessNamespace: null
        subdomain: null
        terminationGracePeriodSeconds: 30
        tolerations: [class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/not-ready
            operator: Exists
            tolerationSeconds: 300
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/unreachable
            operator: Exists
            tolerationSeconds: 300
            value: null
        }]
        topologySpreadConstraints: null
        volumes: [class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: class V1ConfigMapVolumeSource {
                defaultMode: 420
                items: null
                name: chart-values-rke2-metrics-server
                optional: null
            }
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: values
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: class V1ConfigMapVolumeSource {
                defaultMode: 420
                items: null
                name: chart-content-rke2-metrics-server
                optional: null
            }
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: content
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: kube-api-access-h9r24
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: class V1ProjectedVolumeSource {
                defaultMode: 420
                sources: [class V1VolumeProjection {
                    configMap: null
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: class V1ServiceAccountTokenProjection {
                        audience: null
                        expirationSeconds: 3607
                        path: token
                    }
                }, class V1VolumeProjection {
                    configMap: class V1ConfigMapProjection {
                        items: [class V1KeyToPath {
                            key: ca.crt
                            mode: null
                            path: ca.crt
                        }]
                        name: kube-root-ca.crt
                        optional: null
                    }
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: null
                }, class V1VolumeProjection {
                    configMap: null
                    downwardAPI: class V1DownwardAPIProjection {
                        items: [class V1DownwardAPIVolumeFile {
                            fieldRef: class V1ObjectFieldSelector {
                                apiVersion: v1
                                fieldPath: metadata.namespace
                            }
                            mode: null
                            path: namespace
                            resourceFieldRef: null
                        }]
                    }
                    secret: null
                    serviceAccountToken: null
                }]
            }
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }]
    }
    status: class V1PodStatus {
        conditions: [class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:09:50Z
            message: null
            reason: PodCompleted
            status: True
            type: Initialized
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:09:55Z
            message: null
            reason: PodCompleted
            status: False
            type: Ready
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:09:55Z
            message: null
            reason: PodCompleted
            status: False
            type: ContainersReady
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:09:50Z
            message: null
            reason: null
            status: True
            type: PodScheduled
        }]
        containerStatuses: [class V1ContainerStatus {
            containerID: containerd://34e8ee5c26ce75b5e1385966160fc337633a295a0af4ffcfc48a720b4b5193ce
            image: docker.io/rancher/klipper-helm:v0.7.3-build20220613
            imageID: docker.io/rancher/klipper-helm@sha256:6a8e819402e3fdd5ff9ec576174b6c0013870b9c0627a05fa0ab17374b5cf189
            lastState: class V1ContainerState {
                running: null
                terminated: null
                waiting: null
            }
            name: helm
            ready: false
            restartCount: 0
            started: false
            state: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://34e8ee5c26ce75b5e1385966160fc337633a295a0af4ffcfc48a720b4b5193ce
                    exitCode: 0
                    finishedAt: 2022-12-02T09:09:54Z
                    message: Installing helm_v3 chart
                    
                    reason: Completed
                    signal: null
                    startedAt: 2022-12-02T09:09:53Z
                }
                waiting: null
            }
        }]
        ephemeralContainerStatuses: null
        hostIP: 172.168.113.110
        initContainerStatuses: null
        message: null
        nominatedNodeName: null
        phase: Succeeded
        podIP: 10.42.0.5
        podIPs: [class V1PodIP {
            ip: 10.42.0.5
        }]
        qosClass: BestEffort
        reason: null
        startTime: 2022-12-02T09:09:50Z
    }
}
class V1Pod {
    apiVersion: null
    kind: null
    metadata: class V1ObjectMeta {
        annotations: {kubernetes.io/config.hash=4874a08227e8932676b83ca998a390f3, kubernetes.io/config.mirror=4874a08227e8932676b83ca998a390f3, kubernetes.io/config.seen=2022-12-02T17:07:01.323232999+08:00, kubernetes.io/config.source=file, kubernetes.io/psp=global-unrestricted-psp}
        creationTimestamp: 2022-12-02T09:08:05Z
        deletionGracePeriodSeconds: null
        deletionTimestamp: null
        finalizers: null
        generateName: null
        generation: null
        labels: {component=kube-apiserver, tier=control-plane}
        managedFields: [class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={.={}, f:kubernetes.io/config.hash={}, f:kubernetes.io/config.mirror={}, f:kubernetes.io/config.seen={}, f:kubernetes.io/config.source={}}, f:labels={.={}, f:component={}, f:tier={}}, f:ownerReferences={.={}, k:{"uid":"7364174a-4282-4399-b1a2-bfad988f3fa5"}={}}}, f:spec={f:containers={k:{"name":"kube-apiserver"}={.={}, f:args={}, f:command={}, f:env={.={}, k:{"name":"FILE_HASH"}={.={}, f:name={}, f:value={}}, k:{"name":"NO_PROXY"}={.={}, f:name={}, f:value={}}, k:{"name":"POD_HASH"}={.={}, f:name={}, f:value={}}}, f:image={}, f:imagePullPolicy={}, f:livenessProbe={.={}, f:exec={.={}, f:command={}}, f:failureThreshold={}, f:initialDelaySeconds={}, f:periodSeconds={}, f:successThreshold={}, f:timeoutSeconds={}}, f:name={}, f:readinessProbe={.={}, f:exec={.={}, f:command={}}, f:failureThreshold={}, f:periodSeconds={}, f:successThreshold={}, f:timeoutSeconds={}}, f:resources={.={}, f:requests={.={}, f:cpu={}, f:memory={}}}, f:securityContext={.={}, f:privileged={}}, f:startupProbe={.={}, f:exec={.={}, f:command={}}, f:failureThreshold={}, f:initialDelaySeconds={}, f:periodSeconds={}, f:successThreshold={}, f:timeoutSeconds={}}, f:terminationMessagePath={}, f:terminationMessagePolicy={}, f:volumeMounts={.={}, k:{"mountPath":"/etc/pki/tls/certs"}={.={}, f:mountPath={}, f:name={}}, k:{"mountPath":"/etc/ssl/certs"}={.={}, f:mountPath={}, f:name={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/cred/encryption-config.json"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/db/etcd/name"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/etc/egress-selector-config.yaml"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/logs"}={.={}, f:mountPath={}, f:name={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-auth-proxy.crt"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-auth-proxy.key"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-ca.crt"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-kube-apiserver.crt"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-kube-apiserver.key"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/etcd/client.crt"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/etcd/client.key"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/etcd/server-ca.crt"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/request-header-ca.crt"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/server-ca.crt"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/service.key"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/serving-kube-apiserver.crt"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/serving-kube-apiserver.key"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}}}}, f:dnsPolicy={}, f:enableServiceLinks={}, f:hostNetwork={}, f:nodeName={}, f:priorityClassName={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={.={}, f:seLinuxOptions={.={}, f:type={}}}, f:terminationGracePeriodSeconds={}, f:tolerations={}, f:volumes={.={}, k:{"name":"dir0"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"dir1"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"dir2"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file0"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file1"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file10"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file11"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file12"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file13"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file14"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file15"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file2"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file3"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file4"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file5"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file6"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file7"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file8"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file9"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}}}}
            manager: kubelet
            operation: Update
            subresource: null
            time: 2022-12-02T09:08:05Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={.={}, k:{"type":"ContainersReady"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Initialized"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"PodScheduled"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Ready"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}}, f:containerStatuses={}, f:hostIP={}, f:phase={}, f:podIP={}, f:podIPs={.={}, k:{"ip":"172.168.113.110"}={.={}, f:ip={}}}, f:startTime={}}}
            manager: kubelet
            operation: Update
            subresource: status
            time: 2023-02-27T01:40:53Z
        }]
        name: kube-apiserver-rke2-server4
        namespace: kube-system
        ownerReferences: [class V1OwnerReference {
            apiVersion: v1
            blockOwnerDeletion: null
            controller: true
            kind: Node
            name: rke2-server4
            uid: 7364174a-4282-4399-b1a2-bfad988f3fa5
        }]
        resourceVersion: 1420378
        selfLink: null
        uid: 1ec2ac6a-3de9-49c8-b7e6-26ded78909d1
    }
    spec: class V1PodSpec {
        activeDeadlineSeconds: null
        affinity: null
        automountServiceAccountToken: null
        containers: [class V1Container {
            args: [--allow-privileged=true, --anonymous-auth=false, --api-audiences=https://kubernetes.default.svc.cluster.local,rke2, --authorization-mode=Node,RBAC, --bind-address=0.0.0.0, --cert-dir=/var/lib/rancher/rke2/server/tls/temporary-certs, --client-ca-file=/var/lib/rancher/rke2/server/tls/client-ca.crt, --egress-selector-config-file=/var/lib/rancher/rke2/server/etc/egress-selector-config.yaml, --enable-admission-plugins=NodeRestriction,PodSecurityPolicy, --enable-aggregator-routing=true, --encryption-provider-config=/var/lib/rancher/rke2/server/cred/encryption-config.json, --etcd-cafile=/var/lib/rancher/rke2/server/tls/etcd/server-ca.crt, --etcd-certfile=/var/lib/rancher/rke2/server/tls/etcd/client.crt, --etcd-keyfile=/var/lib/rancher/rke2/server/tls/etcd/client.key, --etcd-servers=https://127.0.0.1:2379, --feature-gates=JobTrackingWithFinalizers=true, --kubelet-certificate-authority=/var/lib/rancher/rke2/server/tls/server-ca.crt, --kubelet-client-certificate=/var/lib/rancher/rke2/server/tls/client-kube-apiserver.crt, --kubelet-client-key=/var/lib/rancher/rke2/server/tls/client-kube-apiserver.key, --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname, --profiling=false, --proxy-client-cert-file=/var/lib/rancher/rke2/server/tls/client-auth-proxy.crt, --proxy-client-key-file=/var/lib/rancher/rke2/server/tls/client-auth-proxy.key, --requestheader-allowed-names=system:auth-proxy, --requestheader-client-ca-file=/var/lib/rancher/rke2/server/tls/request-header-ca.crt, --requestheader-extra-headers-prefix=X-Remote-Extra-, --requestheader-group-headers=X-Remote-Group, --requestheader-username-headers=X-Remote-User, --secure-port=6443, --service-account-issuer=https://kubernetes.default.svc.cluster.local, --service-account-key-file=/var/lib/rancher/rke2/server/tls/service.key, --service-account-signing-key-file=/var/lib/rancher/rke2/server/tls/service.key, --service-cluster-ip-range=10.43.0.0/16, --service-node-port-range=30000-32767, --storage-backend=etcd3, --tls-cert-file=/var/lib/rancher/rke2/server/tls/serving-kube-apiserver.crt, --tls-private-key-file=/var/lib/rancher/rke2/server/tls/serving-kube-apiserver.key]
            command: [kube-apiserver]
            env: [class V1EnvVar {
                name: FILE_HASH
                value: c49b5b2a7705931f82da833f63cf00d323f10079a828b5310730db234d3d8ba7
                valueFrom: null
            }, class V1EnvVar {
                name: NO_PROXY
                value: .svc,.cluster.local,10.42.0.0/16,10.43.0.0/16
                valueFrom: null
            }, class V1EnvVar {
                name: POD_HASH
                value: 7304bcd9877df17cbb445eae2e908b5c
                valueFrom: null
            }]
            envFrom: null
            image: index.docker.io/rancher/hardened-kubernetes:v1.24.8-rke2r1-build20221110
            imagePullPolicy: IfNotPresent
            lifecycle: null
            livenessProbe: class V1Probe {
                exec: class V1ExecAction {
                    command: [kubectl, get, --server=https://localhost:6443/, --client-certificate=/var/lib/rancher/rke2/server/tls/client-kube-apiserver.crt, --client-key=/var/lib/rancher/rke2/server/tls/client-kube-apiserver.key, --certificate-authority=/var/lib/rancher/rke2/server/tls/server-ca.crt, --raw=/livez]
                }
                failureThreshold: 8
                grpc: null
                httpGet: null
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                tcpSocket: null
                terminationGracePeriodSeconds: null
                timeoutSeconds: 15
            }
            name: kube-apiserver
            ports: null
            readinessProbe: class V1Probe {
                exec: class V1ExecAction {
                    command: [kubectl, get, --server=https://localhost:6443/, --client-certificate=/var/lib/rancher/rke2/server/tls/client-kube-apiserver.crt, --client-key=/var/lib/rancher/rke2/server/tls/client-kube-apiserver.key, --certificate-authority=/var/lib/rancher/rke2/server/tls/server-ca.crt, --raw=/readyz]
                }
                failureThreshold: 3
                grpc: null
                httpGet: null
                initialDelaySeconds: null
                periodSeconds: 5
                successThreshold: 1
                tcpSocket: null
                terminationGracePeriodSeconds: null
                timeoutSeconds: 15
            }
            resources: class V1ResourceRequirements {
                limits: null
                requests: {cpu=Quantity{number=0.250, format=DECIMAL_SI}, memory=Quantity{number=1073741824, format=BINARY_SI}}
            }
            securityContext: class V1SecurityContext {
                allowPrivilegeEscalation: null
                capabilities: null
                privileged: false
                procMount: null
                readOnlyRootFilesystem: null
                runAsGroup: null
                runAsNonRoot: null
                runAsUser: null
                seLinuxOptions: null
                seccompProfile: null
                windowsOptions: null
            }
            startupProbe: class V1Probe {
                exec: class V1ExecAction {
                    command: [kubectl, get, --server=https://localhost:6443/, --client-certificate=/var/lib/rancher/rke2/server/tls/client-kube-apiserver.crt, --client-key=/var/lib/rancher/rke2/server/tls/client-kube-apiserver.key, --certificate-authority=/var/lib/rancher/rke2/server/tls/server-ca.crt, --raw=/livez]
                }
                failureThreshold: 24
                grpc: null
                httpGet: null
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                tcpSocket: null
                terminationGracePeriodSeconds: null
                timeoutSeconds: 5
            }
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /etc/ssl/certs
                mountPropagation: null
                name: dir0
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /etc/pki/tls/certs
                mountPropagation: null
                name: dir1
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/logs
                mountPropagation: null
                name: dir2
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/db/etcd/name
                mountPropagation: null
                name: file0
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/cred/encryption-config.json
                mountPropagation: null
                name: file1
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/etc/egress-selector-config.yaml
                mountPropagation: null
                name: file2
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/client-auth-proxy.crt
                mountPropagation: null
                name: file3
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/client-auth-proxy.key
                mountPropagation: null
                name: file4
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/client-ca.crt
                mountPropagation: null
                name: file5
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/client-kube-apiserver.crt
                mountPropagation: null
                name: file6
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/client-kube-apiserver.key
                mountPropagation: null
                name: file7
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/etcd/client.crt
                mountPropagation: null
                name: file8
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/etcd/client.key
                mountPropagation: null
                name: file9
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/etcd/server-ca.crt
                mountPropagation: null
                name: file10
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/request-header-ca.crt
                mountPropagation: null
                name: file11
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/server-ca.crt
                mountPropagation: null
                name: file12
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/service.key
                mountPropagation: null
                name: file13
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/serving-kube-apiserver.crt
                mountPropagation: null
                name: file14
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/serving-kube-apiserver.key
                mountPropagation: null
                name: file15
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }]
        dnsConfig: null
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        ephemeralContainers: null
        hostAliases: null
        hostIPC: null
        hostNetwork: true
        hostPID: null
        hostUsers: null
        hostname: null
        imagePullSecrets: null
        initContainers: null
        nodeName: rke2-server4
        nodeSelector: null
        os: null
        overhead: null
        preemptionPolicy: PreemptLowerPriority
        priority: 2000000000
        priorityClassName: system-cluster-critical
        readinessGates: null
        restartPolicy: Always
        runtimeClassName: null
        schedulerName: default-scheduler
        securityContext: class V1PodSecurityContext {
            fsGroup: null
            fsGroupChangePolicy: null
            runAsGroup: null
            runAsNonRoot: null
            runAsUser: null
            seLinuxOptions: class V1SELinuxOptions {
                level: null
                role: null
                type: rke2_service_t
                user: null
            }
            seccompProfile: null
            supplementalGroups: null
            sysctls: null
            windowsOptions: null
        }
        serviceAccount: null
        serviceAccountName: null
        setHostnameAsFQDN: null
        shareProcessNamespace: null
        subdomain: null
        terminationGracePeriodSeconds: 30
        tolerations: [class V1Toleration {
            effect: NoExecute
            key: null
            operator: Exists
            tolerationSeconds: null
            value: null
        }]
        topologySpreadConstraints: null
        volumes: [class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /etc/ssl/certs
                type: DirectoryOrCreate
            }
            iscsi: null
            name: dir0
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /etc/pki/tls/certs
                type: DirectoryOrCreate
            }
            iscsi: null
            name: dir1
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/logs
                type: DirectoryOrCreate
            }
            iscsi: null
            name: dir2
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/db/etcd/name
                type: File
            }
            iscsi: null
            name: file0
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/cred/encryption-config.json
                type: File
            }
            iscsi: null
            name: file1
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/etc/egress-selector-config.yaml
                type: File
            }
            iscsi: null
            name: file2
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/client-auth-proxy.crt
                type: File
            }
            iscsi: null
            name: file3
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/client-auth-proxy.key
                type: File
            }
            iscsi: null
            name: file4
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/client-ca.crt
                type: File
            }
            iscsi: null
            name: file5
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/client-kube-apiserver.crt
                type: File
            }
            iscsi: null
            name: file6
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/client-kube-apiserver.key
                type: File
            }
            iscsi: null
            name: file7
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/etcd/client.crt
                type: File
            }
            iscsi: null
            name: file8
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/etcd/client.key
                type: File
            }
            iscsi: null
            name: file9
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/etcd/server-ca.crt
                type: File
            }
            iscsi: null
            name: file10
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/request-header-ca.crt
                type: File
            }
            iscsi: null
            name: file11
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/server-ca.crt
                type: File
            }
            iscsi: null
            name: file12
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/service.key
                type: File
            }
            iscsi: null
            name: file13
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/serving-kube-apiserver.crt
                type: File
            }
            iscsi: null
            name: file14
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/serving-kube-apiserver.key
                type: File
            }
            iscsi: null
            name: file15
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }]
    }
    status: class V1PodStatus {
        conditions: [class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-02T01:27:32Z
            message: null
            reason: null
            status: True
            type: Initialized
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:40:51Z
            message: null
            reason: null
            status: True
            type: Ready
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:40:51Z
            message: null
            reason: null
            status: True
            type: ContainersReady
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-02T01:27:32Z
            message: null
            reason: null
            status: True
            type: PodScheduled
        }]
        containerStatuses: [class V1ContainerStatus {
            containerID: containerd://f2bb031fb56de3aba858397008863a870f4ac90d2145579cd2a3843bc220d7d0
            image: docker.io/rancher/hardened-kubernetes:v1.24.8-rke2r1-build20221110
            imageID: docker.io/rancher/hardened-kubernetes@sha256:c9b4b723041f09938d807f633b07d69c125ce40430d3e8c5c5fc8c4e777822e3
            lastState: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://833d4d0989d123e338c252432a6637e96d43810beae6c678e13e1335151b1c3c
                    exitCode: 255
                    finishedAt: 2023-02-27T01:40:25Z
                    message: null
                    reason: Unknown
                    signal: null
                    startedAt: 2023-02-02T01:27:33Z
                }
                waiting: null
            }
            name: kube-apiserver
            ready: true
            restartCount: 32
            started: true
            state: class V1ContainerState {
                running: class V1ContainerStateRunning {
                    startedAt: 2023-02-27T01:40:34Z
                }
                terminated: null
                waiting: null
            }
        }]
        ephemeralContainerStatuses: null
        hostIP: 172.168.113.110
        initContainerStatuses: null
        message: null
        nominatedNodeName: null
        phase: Running
        podIP: 172.168.113.110
        podIPs: [class V1PodIP {
            ip: 172.168.113.110
        }]
        qosClass: Burstable
        reason: null
        startTime: 2023-02-02T01:27:32Z
    }
}
class V1Pod {
    apiVersion: null
    kind: null
    metadata: class V1ObjectMeta {
        annotations: {kubernetes.io/config.hash=57585a0305e4e46df816ebab263926f3, kubernetes.io/config.mirror=57585a0305e4e46df816ebab263926f3, kubernetes.io/config.seen=2022-12-02T17:07:05.357740909+08:00, kubernetes.io/config.source=file, kubernetes.io/psp=global-unrestricted-psp}
        creationTimestamp: 2022-12-02T09:07:25Z
        deletionGracePeriodSeconds: null
        deletionTimestamp: null
        finalizers: null
        generateName: null
        generation: null
        labels: {component=kube-controller-manager, tier=control-plane}
        managedFields: [class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={.={}, f:kubernetes.io/config.hash={}, f:kubernetes.io/config.mirror={}, f:kubernetes.io/config.seen={}, f:kubernetes.io/config.source={}}, f:labels={.={}, f:component={}, f:tier={}}, f:ownerReferences={.={}, k:{"uid":"7364174a-4282-4399-b1a2-bfad988f3fa5"}={}}}, f:spec={f:containers={k:{"name":"kube-controller-manager"}={.={}, f:args={}, f:command={}, f:env={.={}, k:{"name":"FILE_HASH"}={.={}, f:name={}, f:value={}}, k:{"name":"NO_PROXY"}={.={}, f:name={}, f:value={}}, k:{"name":"POD_HASH"}={.={}, f:name={}, f:value={}}}, f:image={}, f:imagePullPolicy={}, f:livenessProbe={.={}, f:failureThreshold={}, f:httpGet={.={}, f:host={}, f:path={}, f:port={}, f:scheme={}}, f:initialDelaySeconds={}, f:periodSeconds={}, f:successThreshold={}, f:timeoutSeconds={}}, f:name={}, f:resources={.={}, f:requests={.={}, f:cpu={}, f:memory={}}}, f:securityContext={.={}, f:privileged={}}, f:startupProbe={.={}, f:failureThreshold={}, f:httpGet={.={}, f:host={}, f:path={}, f:port={}, f:scheme={}}, f:initialDelaySeconds={}, f:periodSeconds={}, f:successThreshold={}, f:timeoutSeconds={}}, f:terminationMessagePath={}, f:terminationMessagePolicy={}, f:volumeMounts={.={}, k:{"mountPath":"/etc/pki/tls/certs"}={.={}, f:mountPath={}, f:name={}}, k:{"mountPath":"/etc/ssl/certs"}={.={}, f:mountPath={}, f:name={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/cred/controller.kubeconfig"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/db/etcd/name"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-ca.crt"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-ca.key"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-controller.crt"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-controller.key"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/server-ca.crt"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/server-ca.key"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/service.key"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}}}}, f:dnsPolicy={}, f:enableServiceLinks={}, f:hostNetwork={}, f:nodeName={}, f:priorityClassName={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={.={}, f:seLinuxOptions={.={}, f:type={}}}, f:terminationGracePeriodSeconds={}, f:tolerations={}, f:volumes={.={}, k:{"name":"dir0"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"dir1"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file0"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file1"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file2"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file3"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file4"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file5"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file6"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file7"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file8"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}}}}
            manager: kubelet
            operation: Update
            subresource: null
            time: 2022-12-02T09:07:25Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={.={}, k:{"type":"ContainersReady"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Initialized"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"PodScheduled"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Ready"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}}, f:containerStatuses={}, f:hostIP={}, f:phase={}, f:podIP={}, f:podIPs={.={}, k:{"ip":"172.168.113.110"}={.={}, f:ip={}}}, f:startTime={}}}
            manager: kubelet
            operation: Update
            subresource: status
            time: 2023-02-27T01:41:08Z
        }]
        name: kube-controller-manager-rke2-server4
        namespace: kube-system
        ownerReferences: [class V1OwnerReference {
            apiVersion: v1
            blockOwnerDeletion: null
            controller: true
            kind: Node
            name: rke2-server4
            uid: 7364174a-4282-4399-b1a2-bfad988f3fa5
        }]
        resourceVersion: 1420477
        selfLink: null
        uid: 70bc38f2-e747-4a96-a06d-c3803d5c8e58
    }
    spec: class V1PodSpec {
        activeDeadlineSeconds: null
        affinity: null
        automountServiceAccountToken: null
        containers: [class V1Container {
            args: [--flex-volume-plugin-dir=/var/lib/kubelet/volumeplugins, --terminated-pod-gc-threshold=1000, --permit-port-sharing=true, --allocate-node-cidrs=true, --authentication-kubeconfig=/var/lib/rancher/rke2/server/cred/controller.kubeconfig, --authorization-kubeconfig=/var/lib/rancher/rke2/server/cred/controller.kubeconfig, --bind-address=127.0.0.1, --cluster-cidr=10.42.0.0/16, --cluster-signing-kube-apiserver-client-cert-file=/var/lib/rancher/rke2/server/tls/client-ca.crt, --cluster-signing-kube-apiserver-client-key-file=/var/lib/rancher/rke2/server/tls/client-ca.key, --cluster-signing-kubelet-client-cert-file=/var/lib/rancher/rke2/server/tls/client-ca.crt, --cluster-signing-kubelet-client-key-file=/var/lib/rancher/rke2/server/tls/client-ca.key, --cluster-signing-kubelet-serving-cert-file=/var/lib/rancher/rke2/server/tls/server-ca.crt, --cluster-signing-kubelet-serving-key-file=/var/lib/rancher/rke2/server/tls/server-ca.key, --cluster-signing-legacy-unknown-cert-file=/var/lib/rancher/rke2/server/tls/server-ca.crt, --cluster-signing-legacy-unknown-key-file=/var/lib/rancher/rke2/server/tls/server-ca.key, --configure-cloud-routes=false, --controllers=*,-service,-route,-cloud-node-lifecycle, --feature-gates=JobTrackingWithFinalizers=true, --kubeconfig=/var/lib/rancher/rke2/server/cred/controller.kubeconfig, --profiling=false, --root-ca-file=/var/lib/rancher/rke2/server/tls/server-ca.crt, --secure-port=10257, --service-account-private-key-file=/var/lib/rancher/rke2/server/tls/service.key, --service-cluster-ip-range=10.43.0.0/16, --use-service-account-credentials=true]
            command: [kube-controller-manager]
            env: [class V1EnvVar {
                name: FILE_HASH
                value: a87bac9852a61864cb1210242d17e17e506c806c02711ca83bcaaac6bdcd0275
                valueFrom: null
            }, class V1EnvVar {
                name: NO_PROXY
                value: .svc,.cluster.local,10.42.0.0/16,10.43.0.0/16
                valueFrom: null
            }, class V1EnvVar {
                name: POD_HASH
                value: 9afe3140a14669e23bb1d74d7668caee
                valueFrom: null
            }]
            envFrom: null
            image: index.docker.io/rancher/hardened-kubernetes:v1.24.8-rke2r1-build20221110
            imagePullPolicy: IfNotPresent
            lifecycle: null
            livenessProbe: class V1Probe {
                exec: null
                failureThreshold: 8
                grpc: null
                httpGet: class V1HTTPGetAction {
                    host: localhost
                    httpHeaders: null
                    path: /healthz
                    port: 10257
                    scheme: HTTPS
                }
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                tcpSocket: null
                terminationGracePeriodSeconds: null
                timeoutSeconds: 15
            }
            name: kube-controller-manager
            ports: null
            readinessProbe: null
            resources: class V1ResourceRequirements {
                limits: null
                requests: {cpu=Quantity{number=0.200, format=DECIMAL_SI}, memory=Quantity{number=268435456, format=BINARY_SI}}
            }
            securityContext: class V1SecurityContext {
                allowPrivilegeEscalation: null
                capabilities: null
                privileged: false
                procMount: null
                readOnlyRootFilesystem: null
                runAsGroup: null
                runAsNonRoot: null
                runAsUser: null
                seLinuxOptions: null
                seccompProfile: null
                windowsOptions: null
            }
            startupProbe: class V1Probe {
                exec: null
                failureThreshold: 24
                grpc: null
                httpGet: class V1HTTPGetAction {
                    host: localhost
                    httpHeaders: null
                    path: /healthz
                    port: 10257
                    scheme: HTTPS
                }
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                tcpSocket: null
                terminationGracePeriodSeconds: null
                timeoutSeconds: 5
            }
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /etc/ssl/certs
                mountPropagation: null
                name: dir0
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /etc/pki/tls/certs
                mountPropagation: null
                name: dir1
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/db/etcd/name
                mountPropagation: null
                name: file0
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/cred/controller.kubeconfig
                mountPropagation: null
                name: file1
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/client-ca.crt
                mountPropagation: null
                name: file2
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/client-ca.key
                mountPropagation: null
                name: file3
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/client-controller.crt
                mountPropagation: null
                name: file4
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/client-controller.key
                mountPropagation: null
                name: file5
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/server-ca.crt
                mountPropagation: null
                name: file6
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/server-ca.key
                mountPropagation: null
                name: file7
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/service.key
                mountPropagation: null
                name: file8
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }]
        dnsConfig: null
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        ephemeralContainers: null
        hostAliases: null
        hostIPC: null
        hostNetwork: true
        hostPID: null
        hostUsers: null
        hostname: null
        imagePullSecrets: null
        initContainers: null
        nodeName: rke2-server4
        nodeSelector: null
        os: null
        overhead: null
        preemptionPolicy: PreemptLowerPriority
        priority: 2000000000
        priorityClassName: system-cluster-critical
        readinessGates: null
        restartPolicy: Always
        runtimeClassName: null
        schedulerName: default-scheduler
        securityContext: class V1PodSecurityContext {
            fsGroup: null
            fsGroupChangePolicy: null
            runAsGroup: null
            runAsNonRoot: null
            runAsUser: null
            seLinuxOptions: class V1SELinuxOptions {
                level: null
                role: null
                type: rke2_service_t
                user: null
            }
            seccompProfile: null
            supplementalGroups: null
            sysctls: null
            windowsOptions: null
        }
        serviceAccount: null
        serviceAccountName: null
        setHostnameAsFQDN: null
        shareProcessNamespace: null
        subdomain: null
        terminationGracePeriodSeconds: 30
        tolerations: [class V1Toleration {
            effect: NoExecute
            key: null
            operator: Exists
            tolerationSeconds: null
            value: null
        }]
        topologySpreadConstraints: null
        volumes: [class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /etc/ssl/certs
                type: DirectoryOrCreate
            }
            iscsi: null
            name: dir0
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /etc/pki/tls/certs
                type: DirectoryOrCreate
            }
            iscsi: null
            name: dir1
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/db/etcd/name
                type: File
            }
            iscsi: null
            name: file0
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/cred/controller.kubeconfig
                type: File
            }
            iscsi: null
            name: file1
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/client-ca.crt
                type: File
            }
            iscsi: null
            name: file2
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/client-ca.key
                type: File
            }
            iscsi: null
            name: file3
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/client-controller.crt
                type: File
            }
            iscsi: null
            name: file4
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/client-controller.key
                type: File
            }
            iscsi: null
            name: file5
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/server-ca.crt
                type: File
            }
            iscsi: null
            name: file6
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/server-ca.key
                type: File
            }
            iscsi: null
            name: file7
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/service.key
                type: File
            }
            iscsi: null
            name: file8
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }]
    }
    status: class V1PodStatus {
        conditions: [class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:40:31Z
            message: null
            reason: null
            status: True
            type: Initialized
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:08Z
            message: null
            reason: null
            status: True
            type: Ready
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:08Z
            message: null
            reason: null
            status: True
            type: ContainersReady
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:40:31Z
            message: null
            reason: null
            status: True
            type: PodScheduled
        }]
        containerStatuses: [class V1ContainerStatus {
            containerID: containerd://b5bdf7c28eecadb0d0936b4d5bb1a6faebe4b63b3da9279ccc453cf8240b9492
            image: docker.io/rancher/hardened-kubernetes:v1.24.8-rke2r1-build20221110
            imageID: docker.io/rancher/hardened-kubernetes@sha256:c9b4b723041f09938d807f633b07d69c125ce40430d3e8c5c5fc8c4e777822e3
            lastState: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://cea171ea432c217b3c47922ad3a8f67719e7c335776bb6c4141d5f54b318e0d5
                    exitCode: 1
                    finishedAt: 2023-02-27T01:40:36Z
                    message: null
                    reason: Error
                    signal: null
                    startedAt: 2023-02-27T01:40:34Z
                }
                waiting: null
            }
            name: kube-controller-manager
            ready: true
            restartCount: 68
            started: true
            state: class V1ContainerState {
                running: class V1ContainerStateRunning {
                    startedAt: 2023-02-27T01:40:54Z
                }
                terminated: null
                waiting: null
            }
        }]
        ephemeralContainerStatuses: null
        hostIP: 172.168.113.110
        initContainerStatuses: null
        message: null
        nominatedNodeName: null
        phase: Running
        podIP: 172.168.113.110
        podIPs: [class V1PodIP {
            ip: 172.168.113.110
        }]
        qosClass: Burstable
        reason: null
        startTime: 2023-02-27T01:40:31Z
    }
}
class V1Pod {
    apiVersion: null
    kind: null
    metadata: class V1ObjectMeta {
        annotations: {kubernetes.io/config.hash=ce051fc91f9e463593a1d45efa60be52, kubernetes.io/config.mirror=ce051fc91f9e463593a1d45efa60be52, kubernetes.io/config.seen=2022-12-02T17:07:10.758726148+08:00, kubernetes.io/config.source=file, kubernetes.io/psp=global-unrestricted-psp}
        creationTimestamp: 2022-12-02T09:07:53Z
        deletionGracePeriodSeconds: null
        deletionTimestamp: null
        finalizers: null
        generateName: null
        generation: null
        labels: {component=kube-proxy, tier=control-plane}
        managedFields: [class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={.={}, f:kubernetes.io/config.hash={}, f:kubernetes.io/config.mirror={}, f:kubernetes.io/config.seen={}, f:kubernetes.io/config.source={}}, f:labels={.={}, f:component={}, f:tier={}}, f:ownerReferences={.={}, k:{"uid":"7364174a-4282-4399-b1a2-bfad988f3fa5"}={}}}, f:spec={f:containers={k:{"name":"kube-proxy"}={.={}, f:args={}, f:command={}, f:env={.={}, k:{"name":"FILE_HASH"}={.={}, f:name={}, f:value={}}, k:{"name":"NO_PROXY"}={.={}, f:name={}, f:value={}}, k:{"name":"POD_HASH"}={.={}, f:name={}, f:value={}}}, f:image={}, f:imagePullPolicy={}, f:livenessProbe={.={}, f:failureThreshold={}, f:httpGet={.={}, f:host={}, f:path={}, f:port={}, f:scheme={}}, f:initialDelaySeconds={}, f:periodSeconds={}, f:successThreshold={}, f:timeoutSeconds={}}, f:name={}, f:resources={.={}, f:requests={.={}, f:cpu={}, f:memory={}}}, f:securityContext={.={}, f:privileged={}}, f:startupProbe={.={}, f:failureThreshold={}, f:httpGet={.={}, f:host={}, f:path={}, f:port={}, f:scheme={}}, f:initialDelaySeconds={}, f:periodSeconds={}, f:successThreshold={}, f:timeoutSeconds={}}, f:terminationMessagePath={}, f:terminationMessagePolicy={}, f:volumeMounts={.={}, k:{"mountPath":"/var/lib/rancher/rke2/agent/client-kube-proxy.crt"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/agent/client-kube-proxy.key"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/agent/kubeproxy.kubeconfig"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/agent/server-ca.crt"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}}}}, f:dnsPolicy={}, f:enableServiceLinks={}, f:hostNetwork={}, f:nodeName={}, f:priorityClassName={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={.={}, f:seLinuxOptions={.={}, f:type={}}}, f:terminationGracePeriodSeconds={}, f:tolerations={}, f:volumes={.={}, k:{"name":"file0"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file1"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file2"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file3"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}}}}
            manager: kubelet
            operation: Update
            subresource: null
            time: 2022-12-02T09:07:53Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={.={}, k:{"type":"ContainersReady"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Initialized"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"PodScheduled"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Ready"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}}, f:containerStatuses={}, f:hostIP={}, f:phase={}, f:podIP={}, f:podIPs={.={}, k:{"ip":"172.168.113.110"}={.={}, f:ip={}}}, f:startTime={}}}
            manager: kubelet
            operation: Update
            subresource: status
            time: 2023-02-27T01:40:55Z
        }]
        name: kube-proxy-rke2-server4
        namespace: kube-system
        ownerReferences: [class V1OwnerReference {
            apiVersion: v1
            blockOwnerDeletion: null
            controller: true
            kind: Node
            name: rke2-server4
            uid: 7364174a-4282-4399-b1a2-bfad988f3fa5
        }]
        resourceVersion: 1420395
        selfLink: null
        uid: e326deb6-e878-4f5e-bb3b-075db7f2f11b
    }
    spec: class V1PodSpec {
        activeDeadlineSeconds: null
        affinity: null
        automountServiceAccountToken: null
        containers: [class V1Container {
            args: [--cluster-cidr=10.42.0.0/16, --conntrack-max-per-core=0, --conntrack-tcp-timeout-close-wait=0s, --conntrack-tcp-timeout-established=0s, --healthz-bind-address=127.0.0.1, --hostname-override=rke2-server4, --kubeconfig=/var/lib/rancher/rke2/agent/kubeproxy.kubeconfig, --proxy-mode=iptables]
            command: [kube-proxy]
            env: [class V1EnvVar {
                name: FILE_HASH
                value: e74f54b939a3805d8b13ec49e901a37613569b4e0732ebf152d75b9934e0a983
                valueFrom: null
            }, class V1EnvVar {
                name: NO_PROXY
                value: .svc,.cluster.local,10.42.0.0/16,10.43.0.0/16
                valueFrom: null
            }, class V1EnvVar {
                name: POD_HASH
                value: f52e8bbce459a3deb2cf5d649371b553
                valueFrom: null
            }]
            envFrom: null
            image: index.docker.io/rancher/hardened-kubernetes:v1.24.8-rke2r1-build20221110
            imagePullPolicy: IfNotPresent
            lifecycle: null
            livenessProbe: class V1Probe {
                exec: null
                failureThreshold: 8
                grpc: null
                httpGet: class V1HTTPGetAction {
                    host: localhost
                    httpHeaders: null
                    path: /healthz
                    port: 10256
                    scheme: HTTP
                }
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                tcpSocket: null
                terminationGracePeriodSeconds: null
                timeoutSeconds: 15
            }
            name: kube-proxy
            ports: null
            readinessProbe: null
            resources: class V1ResourceRequirements {
                limits: null
                requests: {cpu=Quantity{number=0.250, format=DECIMAL_SI}, memory=Quantity{number=134217728, format=BINARY_SI}}
            }
            securityContext: class V1SecurityContext {
                allowPrivilegeEscalation: null
                capabilities: null
                privileged: true
                procMount: null
                readOnlyRootFilesystem: null
                runAsGroup: null
                runAsNonRoot: null
                runAsUser: null
                seLinuxOptions: null
                seccompProfile: null
                windowsOptions: null
            }
            startupProbe: class V1Probe {
                exec: null
                failureThreshold: 24
                grpc: null
                httpGet: class V1HTTPGetAction {
                    host: localhost
                    httpHeaders: null
                    path: /healthz
                    port: 10256
                    scheme: HTTP
                }
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                tcpSocket: null
                terminationGracePeriodSeconds: null
                timeoutSeconds: 5
            }
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/agent/client-kube-proxy.crt
                mountPropagation: null
                name: file0
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/agent/client-kube-proxy.key
                mountPropagation: null
                name: file1
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/agent/kubeproxy.kubeconfig
                mountPropagation: null
                name: file2
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/agent/server-ca.crt
                mountPropagation: null
                name: file3
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }]
        dnsConfig: null
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        ephemeralContainers: null
        hostAliases: null
        hostIPC: null
        hostNetwork: true
        hostPID: null
        hostUsers: null
        hostname: null
        imagePullSecrets: null
        initContainers: null
        nodeName: rke2-server4
        nodeSelector: null
        os: null
        overhead: null
        preemptionPolicy: PreemptLowerPriority
        priority: 2000000000
        priorityClassName: system-cluster-critical
        readinessGates: null
        restartPolicy: Always
        runtimeClassName: null
        schedulerName: default-scheduler
        securityContext: class V1PodSecurityContext {
            fsGroup: null
            fsGroupChangePolicy: null
            runAsGroup: null
            runAsNonRoot: null
            runAsUser: null
            seLinuxOptions: class V1SELinuxOptions {
                level: null
                role: null
                type: rke2_service_t
                user: null
            }
            seccompProfile: null
            supplementalGroups: null
            sysctls: null
            windowsOptions: null
        }
        serviceAccount: null
        serviceAccountName: null
        setHostnameAsFQDN: null
        shareProcessNamespace: null
        subdomain: null
        terminationGracePeriodSeconds: 30
        tolerations: [class V1Toleration {
            effect: NoExecute
            key: null
            operator: Exists
            tolerationSeconds: null
            value: null
        }]
        topologySpreadConstraints: null
        volumes: [class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/agent/client-kube-proxy.crt
                type: File
            }
            iscsi: null
            name: file0
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/agent/client-kube-proxy.key
                type: File
            }
            iscsi: null
            name: file1
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/agent/kubeproxy.kubeconfig
                type: File
            }
            iscsi: null
            name: file2
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/agent/server-ca.crt
                type: File
            }
            iscsi: null
            name: file3
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }]
    }
    status: class V1PodStatus {
        conditions: [class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:40:31Z
            message: null
            reason: null
            status: True
            type: Initialized
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:40:54Z
            message: null
            reason: null
            status: True
            type: Ready
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:40:54Z
            message: null
            reason: null
            status: True
            type: ContainersReady
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:40:31Z
            message: null
            reason: null
            status: True
            type: PodScheduled
        }]
        containerStatuses: [class V1ContainerStatus {
            containerID: containerd://d9f1a0c05a1ffe43f78a124b7354a9cdd7145c44ebc06c8b05ccf6b371cf5ef6
            image: docker.io/rancher/hardened-kubernetes:v1.24.8-rke2r1-build20221110
            imageID: docker.io/rancher/hardened-kubernetes@sha256:c9b4b723041f09938d807f633b07d69c125ce40430d3e8c5c5fc8c4e777822e3
            lastState: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://515d2a5e141c63be700726cae19e0cccfe1b0dff9fa2f7f66ac8f0eb3477073f
                    exitCode: 255
                    finishedAt: 2023-02-27T01:40:25Z
                    message: null
                    reason: Unknown
                    signal: null
                    startedAt: 2023-02-02T01:27:32Z
                }
                waiting: null
            }
            name: kube-proxy
            ready: true
            restartCount: 32
            started: true
            state: class V1ContainerState {
                running: class V1ContainerStateRunning {
                    startedAt: 2023-02-27T01:40:34Z
                }
                terminated: null
                waiting: null
            }
        }]
        ephemeralContainerStatuses: null
        hostIP: 172.168.113.110
        initContainerStatuses: null
        message: null
        nominatedNodeName: null
        phase: Running
        podIP: 172.168.113.110
        podIPs: [class V1PodIP {
            ip: 172.168.113.110
        }]
        qosClass: Burstable
        reason: null
        startTime: 2023-02-27T01:40:31Z
    }
}
class V1Pod {
    apiVersion: null
    kind: null
    metadata: class V1ObjectMeta {
        annotations: {kubernetes.io/config.hash=2495d4d1888db1561e78ccbc2ff8677c, kubernetes.io/config.mirror=2495d4d1888db1561e78ccbc2ff8677c, kubernetes.io/config.seen=2022-12-02T17:07:05.346756445+08:00, kubernetes.io/config.source=file, kubernetes.io/psp=global-unrestricted-psp}
        creationTimestamp: 2022-12-02T09:07:25Z
        deletionGracePeriodSeconds: null
        deletionTimestamp: null
        finalizers: null
        generateName: null
        generation: null
        labels: {component=kube-scheduler, tier=control-plane}
        managedFields: [class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={.={}, f:kubernetes.io/config.hash={}, f:kubernetes.io/config.mirror={}, f:kubernetes.io/config.seen={}, f:kubernetes.io/config.source={}}, f:labels={.={}, f:component={}, f:tier={}}, f:ownerReferences={.={}, k:{"uid":"7364174a-4282-4399-b1a2-bfad988f3fa5"}={}}}, f:spec={f:containers={k:{"name":"kube-scheduler"}={.={}, f:args={}, f:command={}, f:env={.={}, k:{"name":"FILE_HASH"}={.={}, f:name={}, f:value={}}, k:{"name":"NO_PROXY"}={.={}, f:name={}, f:value={}}, k:{"name":"POD_HASH"}={.={}, f:name={}, f:value={}}}, f:image={}, f:imagePullPolicy={}, f:livenessProbe={.={}, f:failureThreshold={}, f:httpGet={.={}, f:host={}, f:path={}, f:port={}, f:scheme={}}, f:initialDelaySeconds={}, f:periodSeconds={}, f:successThreshold={}, f:timeoutSeconds={}}, f:name={}, f:resources={.={}, f:requests={.={}, f:cpu={}, f:memory={}}}, f:securityContext={.={}, f:privileged={}}, f:startupProbe={.={}, f:failureThreshold={}, f:httpGet={.={}, f:host={}, f:path={}, f:port={}, f:scheme={}}, f:initialDelaySeconds={}, f:periodSeconds={}, f:successThreshold={}, f:timeoutSeconds={}}, f:terminationMessagePath={}, f:terminationMessagePolicy={}, f:volumeMounts={.={}, k:{"mountPath":"/var/lib/rancher/rke2/server/cred/scheduler.kubeconfig"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/db/etcd/name"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-scheduler.crt"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/client-scheduler.key"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/lib/rancher/rke2/server/tls/server-ca.crt"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}}}}, f:dnsPolicy={}, f:enableServiceLinks={}, f:hostNetwork={}, f:nodeName={}, f:priorityClassName={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={.={}, f:seLinuxOptions={.={}, f:type={}}}, f:terminationGracePeriodSeconds={}, f:tolerations={}, f:volumes={.={}, k:{"name":"file0"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file1"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file2"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file3"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"file4"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}}}}
            manager: kubelet
            operation: Update
            subresource: null
            time: 2022-12-02T09:07:25Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={.={}, k:{"type":"ContainersReady"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Initialized"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"PodScheduled"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Ready"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}}, f:containerStatuses={}, f:hostIP={}, f:phase={}, f:podIP={}, f:podIPs={.={}, k:{"ip":"172.168.113.110"}={.={}, f:ip={}}}, f:startTime={}}}
            manager: kubelet
            operation: Update
            subresource: status
            time: 2023-02-27T01:40:54Z
        }]
        name: kube-scheduler-rke2-server4
        namespace: kube-system
        ownerReferences: [class V1OwnerReference {
            apiVersion: v1
            blockOwnerDeletion: null
            controller: true
            kind: Node
            name: rke2-server4
            uid: 7364174a-4282-4399-b1a2-bfad988f3fa5
        }]
        resourceVersion: 1420389
        selfLink: null
        uid: 5fb45f6b-f3ec-4c11-a34a-2be0302784e5
    }
    spec: class V1PodSpec {
        activeDeadlineSeconds: null
        affinity: null
        automountServiceAccountToken: null
        containers: [class V1Container {
            args: [--permit-port-sharing=true, --authentication-kubeconfig=/var/lib/rancher/rke2/server/cred/scheduler.kubeconfig, --authorization-kubeconfig=/var/lib/rancher/rke2/server/cred/scheduler.kubeconfig, --bind-address=127.0.0.1, --kubeconfig=/var/lib/rancher/rke2/server/cred/scheduler.kubeconfig, --profiling=false, --secure-port=10259]
            command: [kube-scheduler]
            env: [class V1EnvVar {
                name: FILE_HASH
                value: 91a89f808b6ce37bac2a1dd665b9abedaac682f72f2c75fb29c52fba4868bd58
                valueFrom: null
            }, class V1EnvVar {
                name: NO_PROXY
                value: .svc,.cluster.local,10.42.0.0/16,10.43.0.0/16
                valueFrom: null
            }, class V1EnvVar {
                name: POD_HASH
                value: f85552e5728a3e53d46c0af89f49cdf2
                valueFrom: null
            }]
            envFrom: null
            image: index.docker.io/rancher/hardened-kubernetes:v1.24.8-rke2r1-build20221110
            imagePullPolicy: IfNotPresent
            lifecycle: null
            livenessProbe: class V1Probe {
                exec: null
                failureThreshold: 8
                grpc: null
                httpGet: class V1HTTPGetAction {
                    host: localhost
                    httpHeaders: null
                    path: /healthz
                    port: 10259
                    scheme: HTTPS
                }
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                tcpSocket: null
                terminationGracePeriodSeconds: null
                timeoutSeconds: 15
            }
            name: kube-scheduler
            ports: null
            readinessProbe: null
            resources: class V1ResourceRequirements {
                limits: null
                requests: {cpu=Quantity{number=0.100, format=DECIMAL_SI}, memory=Quantity{number=134217728, format=BINARY_SI}}
            }
            securityContext: class V1SecurityContext {
                allowPrivilegeEscalation: null
                capabilities: null
                privileged: false
                procMount: null
                readOnlyRootFilesystem: null
                runAsGroup: null
                runAsNonRoot: null
                runAsUser: null
                seLinuxOptions: null
                seccompProfile: null
                windowsOptions: null
            }
            startupProbe: class V1Probe {
                exec: null
                failureThreshold: 24
                grpc: null
                httpGet: class V1HTTPGetAction {
                    host: localhost
                    httpHeaders: null
                    path: /healthz
                    port: 10259
                    scheme: HTTPS
                }
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                tcpSocket: null
                terminationGracePeriodSeconds: null
                timeoutSeconds: 5
            }
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/db/etcd/name
                mountPropagation: null
                name: file0
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/cred/scheduler.kubeconfig
                mountPropagation: null
                name: file1
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/client-scheduler.crt
                mountPropagation: null
                name: file2
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/client-scheduler.key
                mountPropagation: null
                name: file3
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/rancher/rke2/server/tls/server-ca.crt
                mountPropagation: null
                name: file4
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }]
        dnsConfig: null
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        ephemeralContainers: null
        hostAliases: null
        hostIPC: null
        hostNetwork: true
        hostPID: null
        hostUsers: null
        hostname: null
        imagePullSecrets: null
        initContainers: null
        nodeName: rke2-server4
        nodeSelector: null
        os: null
        overhead: null
        preemptionPolicy: PreemptLowerPriority
        priority: 2000000000
        priorityClassName: system-cluster-critical
        readinessGates: null
        restartPolicy: Always
        runtimeClassName: null
        schedulerName: default-scheduler
        securityContext: class V1PodSecurityContext {
            fsGroup: null
            fsGroupChangePolicy: null
            runAsGroup: null
            runAsNonRoot: null
            runAsUser: null
            seLinuxOptions: class V1SELinuxOptions {
                level: null
                role: null
                type: rke2_service_t
                user: null
            }
            seccompProfile: null
            supplementalGroups: null
            sysctls: null
            windowsOptions: null
        }
        serviceAccount: null
        serviceAccountName: null
        setHostnameAsFQDN: null
        shareProcessNamespace: null
        subdomain: null
        terminationGracePeriodSeconds: 30
        tolerations: [class V1Toleration {
            effect: NoExecute
            key: null
            operator: Exists
            tolerationSeconds: null
            value: null
        }]
        topologySpreadConstraints: null
        volumes: [class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/db/etcd/name
                type: File
            }
            iscsi: null
            name: file0
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/cred/scheduler.kubeconfig
                type: File
            }
            iscsi: null
            name: file1
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/client-scheduler.crt
                type: File
            }
            iscsi: null
            name: file2
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/client-scheduler.key
                type: File
            }
            iscsi: null
            name: file3
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/rancher/rke2/server/tls/server-ca.crt
                type: File
            }
            iscsi: null
            name: file4
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }]
    }
    status: class V1PodStatus {
        conditions: [class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:40:31Z
            message: null
            reason: null
            status: True
            type: Initialized
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:40:53Z
            message: null
            reason: null
            status: True
            type: Ready
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:40:53Z
            message: null
            reason: null
            status: True
            type: ContainersReady
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:40:31Z
            message: null
            reason: null
            status: True
            type: PodScheduled
        }]
        containerStatuses: [class V1ContainerStatus {
            containerID: containerd://0a341898535fd25907478bd5df3ee799a5d360d84e43b0f675b98cb427930642
            image: docker.io/rancher/hardened-kubernetes:v1.24.8-rke2r1-build20221110
            imageID: docker.io/rancher/hardened-kubernetes@sha256:c9b4b723041f09938d807f633b07d69c125ce40430d3e8c5c5fc8c4e777822e3
            lastState: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://f6d6de057a9be66b4066af8cabb7a899f8190d7520308e11e1ce555f052fc076
                    exitCode: 255
                    finishedAt: 2023-02-27T01:40:25Z
                    message: null
                    reason: Unknown
                    signal: null
                    startedAt: 2023-02-02T01:27:33Z
                }
                waiting: null
            }
            name: kube-scheduler
            ready: true
            restartCount: 38
            started: true
            state: class V1ContainerState {
                running: class V1ContainerStateRunning {
                    startedAt: 2023-02-27T01:40:34Z
                }
                terminated: null
                waiting: null
            }
        }]
        ephemeralContainerStatuses: null
        hostIP: 172.168.113.110
        initContainerStatuses: null
        message: null
        nominatedNodeName: null
        phase: Running
        podIP: 172.168.113.110
        podIPs: [class V1PodIP {
            ip: 172.168.113.110
        }]
        qosClass: Burstable
        reason: null
        startTime: 2023-02-27T01:40:31Z
    }
}
class V1Pod {
    apiVersion: null
    kind: null
    metadata: class V1ObjectMeta {
        annotations: {kubernetes.io/psp=global-unrestricted-psp}
        creationTimestamp: 2022-12-02T09:08:02Z
        deletionGracePeriodSeconds: null
        deletionTimestamp: null
        finalizers: null
        generateName: rke2-canal-
        generation: null
        labels: {controller-revision-hash=78649f5954, k8s-app=canal, pod-template-generation=1}
        managedFields: [class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:generateName={}, f:labels={.={}, f:controller-revision-hash={}, f:k8s-app={}, f:pod-template-generation={}}, f:ownerReferences={.={}, k:{"uid":"08e258e9-710f-4ba7-9aa9-02db4e797e19"}={}}}, f:spec={f:affinity={.={}, f:nodeAffinity={.={}, f:requiredDuringSchedulingIgnoredDuringExecution={}}}, f:containers={k:{"name":"calico-node"}={.={}, f:command={}, f:env={.={}, k:{"name":"CALICO_CNI_SERVICE_ACCOUNT"}={.={}, f:name={}, f:valueFrom={.={}, f:fieldRef={}}}, k:{"name":"CALICO_DISABLE_FILE_LOGGING"}={.={}, f:name={}, f:value={}}, k:{"name":"CALICO_NETWORKING_BACKEND"}={.={}, f:name={}, f:value={}}, k:{"name":"CLUSTER_TYPE"}={.={}, f:name={}, f:value={}}, k:{"name":"DATASTORE_TYPE"}={.={}, f:name={}, f:value={}}, k:{"name":"FELIX_DEFAULTENDPOINTTOHOSTACTION"}={.={}, f:name={}, f:value={}}, k:{"name":"FELIX_FAILSAFEINBOUNDHOSTPORTS"}={.={}, f:name={}}, k:{"name":"FELIX_FAILSAFEOUTBOUNDHOSTPORTS"}={.={}, f:name={}}, k:{"name":"FELIX_HEALTHENABLED"}={.={}, f:name={}, f:value={}}, k:{"name":"FELIX_IPTABLESBACKEND"}={.={}, f:name={}, f:value={}}, k:{"name":"FELIX_IPTABLESREFRESHINTERVAL"}={.={}, f:name={}, f:value={}}, k:{"name":"FELIX_IPV6SUPPORT"}={.={}, f:name={}, f:value={}}, k:{"name":"FELIX_LOGSEVERITYSCREEN"}={.={}, f:name={}, f:value={}}, k:{"name":"FELIX_PROMETHEUSMETRICSENABLED"}={.={}, f:name={}, f:value={}}, k:{"name":"FELIX_XDPENABLED"}={.={}, f:name={}, f:value={}}, k:{"name":"IP_AUTODETECTION_METHOD"}={.={}, f:name={}, f:value={}}, k:{"name":"NODENAME"}={.={}, f:name={}, f:valueFrom={.={}, f:fieldRef={}}}, k:{"name":"USE_POD_CIDR"}={.={}, f:name={}, f:value={}}, k:{"name":"WAIT_FOR_DATASTORE"}={.={}, f:name={}, f:value={}}}, f:image={}, f:imagePullPolicy={}, f:lifecycle={.={}, f:preStop={.={}, f:exec={.={}, f:command={}}}}, f:livenessProbe={.={}, f:exec={.={}, f:command={}}, f:failureThreshold={}, f:initialDelaySeconds={}, f:periodSeconds={}, f:successThreshold={}, f:timeoutSeconds={}}, f:name={}, f:readinessProbe={.={}, f:failureThreshold={}, f:httpGet={.={}, f:host={}, f:path={}, f:port={}, f:scheme={}}, f:periodSeconds={}, f:successThreshold={}, f:timeoutSeconds={}}, f:resources={.={}, f:requests={.={}, f:cpu={}}}, f:securityContext={.={}, f:privileged={}}, f:terminationMessagePath={}, f:terminationMessagePolicy={}, f:volumeMounts={.={}, k:{"mountPath":"/host/etc/cni/net.d"}={.={}, f:mountPath={}, f:name={}}, k:{"mountPath":"/lib/modules"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/run/xtables.lock"}={.={}, f:mountPath={}, f:name={}}, k:{"mountPath":"/var/lib/calico"}={.={}, f:mountPath={}, f:name={}}, k:{"mountPath":"/var/log/calico/cni"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/var/run/calico"}={.={}, f:mountPath={}, f:name={}}, k:{"mountPath":"/var/run/nodeagent"}={.={}, f:mountPath={}, f:name={}}}}, k:{"name":"kube-flannel"}={.={}, f:command={}, f:env={.={}, k:{"name":"FLANNELD_IFACE"}={.={}, f:name={}, f:valueFrom={.={}, f:configMapKeyRef={}}}, k:{"name":"FLANNELD_IP_MASQ"}={.={}, f:name={}, f:valueFrom={.={}, f:configMapKeyRef={}}}, k:{"name":"POD_NAME"}={.={}, f:name={}, f:valueFrom={.={}, f:fieldRef={}}}, k:{"name":"POD_NAMESPACE"}={.={}, f:name={}, f:valueFrom={.={}, f:fieldRef={}}}}, f:image={}, f:imagePullPolicy={}, f:name={}, f:resources={}, f:securityContext={.={}, f:privileged={}}, f:terminationMessagePath={}, f:terminationMessagePolicy={}, f:volumeMounts={.={}, k:{"mountPath":"/etc/kube-flannel/"}={.={}, f:mountPath={}, f:name={}}, k:{"mountPath":"/run/xtables.lock"}={.={}, f:mountPath={}, f:name={}}}}}, f:dnsPolicy={}, f:enableServiceLinks={}, f:hostNetwork={}, f:initContainers={.={}, k:{"name":"flexvol-driver"}={.={}, f:command={}, f:image={}, f:imagePullPolicy={}, f:name={}, f:resources={}, f:securityContext={.={}, f:privileged={}}, f:terminationMessagePath={}, f:terminationMessagePolicy={}, f:volumeMounts={.={}, k:{"mountPath":"/host/driver"}={.={}, f:mountPath={}, f:name={}}}}, k:{"name":"install-cni"}={.={}, f:command={}, f:env={.={}, k:{"name":"CALICO_CNI_SERVICE_ACCOUNT"}={.={}, f:name={}, f:valueFrom={.={}, f:fieldRef={}}}, k:{"name":"CNI_CONF_NAME"}={.={}, f:name={}, f:value={}}, k:{"name":"CNI_MTU"}={.={}, f:name={}, f:valueFrom={.={}, f:configMapKeyRef={}}}, k:{"name":"CNI_NETWORK_CONFIG"}={.={}, f:name={}, f:valueFrom={.={}, f:configMapKeyRef={}}}, k:{"name":"KUBERNETES_NODE_NAME"}={.={}, f:name={}, f:valueFrom={.={}, f:fieldRef={}}}, k:{"name":"SLEEP"}={.={}, f:name={}, f:value={}}}, f:image={}, f:imagePullPolicy={}, f:name={}, f:resources={}, f:securityContext={.={}, f:privileged={}}, f:terminationMessagePath={}, f:terminationMessagePolicy={}, f:volumeMounts={.={}, k:{"mountPath":"/host/etc/cni/net.d"}={.={}, f:mountPath={}, f:name={}}, k:{"mountPath":"/host/opt/cni/bin"}={.={}, f:mountPath={}, f:name={}}}}}, f:nodeSelector={}, f:priorityClassName={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={}, f:serviceAccount={}, f:serviceAccountName={}, f:terminationGracePeriodSeconds={}, f:tolerations={}, f:volumes={.={}, k:{"name":"cni-bin-dir"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"cni-log-dir"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"cni-net-dir"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"flannel-cfg"}={.={}, f:configMap={.={}, f:defaultMode={}, f:name={}}, f:name={}}, k:{"name":"flexvol-driver-host"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"lib-modules"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"policysync"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"var-lib-calico"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"var-run-calico"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"xtables-lock"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}}}}
            manager: kube-controller-manager
            operation: Update
            subresource: null
            time: 2022-12-02T09:08:02Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={k:{"type":"ContainersReady"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Initialized"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Ready"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}}, f:containerStatuses={}, f:hostIP={}, f:initContainerStatuses={}, f:phase={}, f:podIP={}, f:podIPs={.={}, k:{"ip":"172.168.113.110"}={.={}, f:ip={}}}, f:startTime={}}}
            manager: kubelet
            operation: Update
            subresource: status
            time: 2023-02-27T01:41:07Z
        }]
        name: rke2-canal-lqh2x
        namespace: kube-system
        ownerReferences: [class V1OwnerReference {
            apiVersion: apps/v1
            blockOwnerDeletion: true
            controller: true
            kind: DaemonSet
            name: rke2-canal
            uid: 08e258e9-710f-4ba7-9aa9-02db4e797e19
        }]
        resourceVersion: 1420468
        selfLink: null
        uid: b644f2a6-f459-45c5-8c4b-4ee07886cfb2
    }
    spec: class V1PodSpec {
        activeDeadlineSeconds: null
        affinity: class V1Affinity {
            nodeAffinity: class V1NodeAffinity {
                preferredDuringSchedulingIgnoredDuringExecution: null
                requiredDuringSchedulingIgnoredDuringExecution: class V1NodeSelector {
                    nodeSelectorTerms: [class V1NodeSelectorTerm {
                        matchExpressions: null
                        matchFields: [class V1NodeSelectorRequirement {
                            key: metadata.name
                            operator: In
                            values: [rke2-server4]
                        }]
                    }]
                }
            }
            podAffinity: null
            podAntiAffinity: null
        }
        automountServiceAccountToken: null
        containers: [class V1Container {
            args: null
            command: [start_runit]
            env: [class V1EnvVar {
                name: DATASTORE_TYPE
                value: kubernetes
                valueFrom: null
            }, class V1EnvVar {
                name: USE_POD_CIDR
                value: true
                valueFrom: null
            }, class V1EnvVar {
                name: WAIT_FOR_DATASTORE
                value: true
                valueFrom: null
            }, class V1EnvVar {
                name: NODENAME
                value: null
                valueFrom: class V1EnvVarSource {
                    configMapKeyRef: null
                    fieldRef: class V1ObjectFieldSelector {
                        apiVersion: v1
                        fieldPath: spec.nodeName
                    }
                    resourceFieldRef: null
                    secretKeyRef: null
                }
            }, class V1EnvVar {
                name: CALICO_CNI_SERVICE_ACCOUNT
                value: null
                valueFrom: class V1EnvVarSource {
                    configMapKeyRef: null
                    fieldRef: class V1ObjectFieldSelector {
                        apiVersion: v1
                        fieldPath: spec.serviceAccountName
                    }
                    resourceFieldRef: null
                    secretKeyRef: null
                }
            }, class V1EnvVar {
                name: CALICO_NETWORKING_BACKEND
                value: none
                valueFrom: null
            }, class V1EnvVar {
                name: CLUSTER_TYPE
                value: k8s,canal
                valueFrom: null
            }, class V1EnvVar {
                name: FELIX_IPTABLESREFRESHINTERVAL
                value: 60
                valueFrom: null
            }, class V1EnvVar {
                name: FELIX_IPTABLESBACKEND
                value: auto
                valueFrom: null
            }, class V1EnvVar {
                name: CALICO_DISABLE_FILE_LOGGING
                value: true
                valueFrom: null
            }, class V1EnvVar {
                name: FELIX_DEFAULTENDPOINTTOHOSTACTION
                value: ACCEPT
                valueFrom: null
            }, class V1EnvVar {
                name: FELIX_IPV6SUPPORT
                value: false
                valueFrom: null
            }, class V1EnvVar {
                name: FELIX_LOGSEVERITYSCREEN
                value: info
                valueFrom: null
            }, class V1EnvVar {
                name: FELIX_HEALTHENABLED
                value: true
                valueFrom: null
            }, class V1EnvVar {
                name: FELIX_PROMETHEUSMETRICSENABLED
                value: true
                valueFrom: null
            }, class V1EnvVar {
                name: FELIX_XDPENABLED
                value: false
                valueFrom: null
            }, class V1EnvVar {
                name: FELIX_FAILSAFEINBOUNDHOSTPORTS
                value: null
                valueFrom: null
            }, class V1EnvVar {
                name: FELIX_FAILSAFEOUTBOUNDHOSTPORTS
                value: null
                valueFrom: null
            }, class V1EnvVar {
                name: IP_AUTODETECTION_METHOD
                value: first-found
                valueFrom: null
            }]
            envFrom: null
            image: rancher/hardened-calico:v3.24.1-build20221011
            imagePullPolicy: IfNotPresent
            lifecycle: class V1Lifecycle {
                postStart: null
                preStop: class V1LifecycleHandler {
                    exec: class V1ExecAction {
                        command: [/usr/bin/calico-node, -shutdown]
                    }
                    httpGet: null
                    tcpSocket: null
                }
            }
            livenessProbe: class V1Probe {
                exec: class V1ExecAction {
                    command: [/usr/bin/calico-node, -felix-live]
                }
                failureThreshold: 6
                grpc: null
                httpGet: null
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                tcpSocket: null
                terminationGracePeriodSeconds: null
                timeoutSeconds: 10
            }
            name: calico-node
            ports: null
            readinessProbe: class V1Probe {
                exec: null
                failureThreshold: 3
                grpc: null
                httpGet: class V1HTTPGetAction {
                    host: localhost
                    httpHeaders: null
                    path: /readiness
                    port: 9099
                    scheme: HTTP
                }
                initialDelaySeconds: null
                periodSeconds: 10
                successThreshold: 1
                tcpSocket: null
                terminationGracePeriodSeconds: null
                timeoutSeconds: 10
            }
            resources: class V1ResourceRequirements {
                limits: null
                requests: {cpu=Quantity{number=0.250, format=DECIMAL_SI}}
            }
            securityContext: class V1SecurityContext {
                allowPrivilegeEscalation: null
                capabilities: null
                privileged: true
                procMount: null
                readOnlyRootFilesystem: null
                runAsGroup: null
                runAsNonRoot: null
                runAsUser: null
                seLinuxOptions: null
                seccompProfile: null
                windowsOptions: null
            }
            startupProbe: null
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /host/etc/cni/net.d
                mountPropagation: null
                name: cni-net-dir
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /lib/modules
                mountPropagation: null
                name: lib-modules
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /run/xtables.lock
                mountPropagation: null
                name: xtables-lock
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/run/calico
                mountPropagation: null
                name: var-run-calico
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/lib/calico
                mountPropagation: null
                name: var-lib-calico
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/run/nodeagent
                mountPropagation: null
                name: policysync
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/log/calico/cni
                mountPropagation: null
                name: cni-log-dir
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                mountPropagation: null
                name: kube-api-access-x62px
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }, class V1Container {
            args: null
            command: [/opt/bin/flanneld, --ip-masq, --kube-subnet-mgr]
            env: [class V1EnvVar {
                name: POD_NAME
                value: null
                valueFrom: class V1EnvVarSource {
                    configMapKeyRef: null
                    fieldRef: class V1ObjectFieldSelector {
                        apiVersion: v1
                        fieldPath: metadata.name
                    }
                    resourceFieldRef: null
                    secretKeyRef: null
                }
            }, class V1EnvVar {
                name: POD_NAMESPACE
                value: null
                valueFrom: class V1EnvVarSource {
                    configMapKeyRef: null
                    fieldRef: class V1ObjectFieldSelector {
                        apiVersion: v1
                        fieldPath: metadata.namespace
                    }
                    resourceFieldRef: null
                    secretKeyRef: null
                }
            }, class V1EnvVar {
                name: FLANNELD_IFACE
                value: null
                valueFrom: class V1EnvVarSource {
                    configMapKeyRef: class V1ConfigMapKeySelector {
                        key: canal_iface
                        name: rke2-canal-config
                        optional: null
                    }
                    fieldRef: null
                    resourceFieldRef: null
                    secretKeyRef: null
                }
            }, class V1EnvVar {
                name: FLANNELD_IP_MASQ
                value: null
                valueFrom: class V1EnvVarSource {
                    configMapKeyRef: class V1ConfigMapKeySelector {
                        key: masquerade
                        name: rke2-canal-config
                        optional: null
                    }
                    fieldRef: null
                    resourceFieldRef: null
                    secretKeyRef: null
                }
            }]
            envFrom: null
            image: rancher/hardened-flannel:v0.19.1-build20221011
            imagePullPolicy: IfNotPresent
            lifecycle: null
            livenessProbe: null
            name: kube-flannel
            ports: null
            readinessProbe: null
            resources: class V1ResourceRequirements {
                limits: null
                requests: null
            }
            securityContext: class V1SecurityContext {
                allowPrivilegeEscalation: null
                capabilities: null
                privileged: true
                procMount: null
                readOnlyRootFilesystem: null
                runAsGroup: null
                runAsNonRoot: null
                runAsUser: null
                seLinuxOptions: null
                seccompProfile: null
                windowsOptions: null
            }
            startupProbe: null
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /run/xtables.lock
                mountPropagation: null
                name: xtables-lock
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /etc/kube-flannel/
                mountPropagation: null
                name: flannel-cfg
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                mountPropagation: null
                name: kube-api-access-x62px
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }]
        dnsConfig: null
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        ephemeralContainers: null
        hostAliases: null
        hostIPC: null
        hostNetwork: true
        hostPID: null
        hostUsers: null
        hostname: null
        imagePullSecrets: null
        initContainers: [class V1Container {
            args: null
            command: [/opt/cni/bin/install]
            env: [class V1EnvVar {
                name: CALICO_CNI_SERVICE_ACCOUNT
                value: null
                valueFrom: class V1EnvVarSource {
                    configMapKeyRef: null
                    fieldRef: class V1ObjectFieldSelector {
                        apiVersion: v1
                        fieldPath: spec.serviceAccountName
                    }
                    resourceFieldRef: null
                    secretKeyRef: null
                }
            }, class V1EnvVar {
                name: CNI_CONF_NAME
                value: 10-canal.conflist
                valueFrom: null
            }, class V1EnvVar {
                name: CNI_NETWORK_CONFIG
                value: null
                valueFrom: class V1EnvVarSource {
                    configMapKeyRef: class V1ConfigMapKeySelector {
                        key: cni_network_config
                        name: rke2-canal-config
                        optional: null
                    }
                    fieldRef: null
                    resourceFieldRef: null
                    secretKeyRef: null
                }
            }, class V1EnvVar {
                name: KUBERNETES_NODE_NAME
                value: null
                valueFrom: class V1EnvVarSource {
                    configMapKeyRef: null
                    fieldRef: class V1ObjectFieldSelector {
                        apiVersion: v1
                        fieldPath: spec.nodeName
                    }
                    resourceFieldRef: null
                    secretKeyRef: null
                }
            }, class V1EnvVar {
                name: CNI_MTU
                value: null
                valueFrom: class V1EnvVarSource {
                    configMapKeyRef: class V1ConfigMapKeySelector {
                        key: veth_mtu
                        name: rke2-canal-config
                        optional: null
                    }
                    fieldRef: null
                    resourceFieldRef: null
                    secretKeyRef: null
                }
            }, class V1EnvVar {
                name: SLEEP
                value: false
                valueFrom: null
            }]
            envFrom: null
            image: rancher/hardened-calico:v3.24.1-build20221011
            imagePullPolicy: IfNotPresent
            lifecycle: null
            livenessProbe: null
            name: install-cni
            ports: null
            readinessProbe: null
            resources: class V1ResourceRequirements {
                limits: null
                requests: null
            }
            securityContext: class V1SecurityContext {
                allowPrivilegeEscalation: null
                capabilities: null
                privileged: true
                procMount: null
                readOnlyRootFilesystem: null
                runAsGroup: null
                runAsNonRoot: null
                runAsUser: null
                seLinuxOptions: null
                seccompProfile: null
                windowsOptions: null
            }
            startupProbe: null
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /host/opt/cni/bin
                mountPropagation: null
                name: cni-bin-dir
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /host/etc/cni/net.d
                mountPropagation: null
                name: cni-net-dir
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                mountPropagation: null
                name: kube-api-access-x62px
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }, class V1Container {
            args: null
            command: [/usr/local/bin/flexvol.sh, -s, /usr/local/bin/flexvol, -i, flexvoldriver]
            env: null
            envFrom: null
            image: rancher/hardened-calico:v3.24.1-build20221011
            imagePullPolicy: IfNotPresent
            lifecycle: null
            livenessProbe: null
            name: flexvol-driver
            ports: null
            readinessProbe: null
            resources: class V1ResourceRequirements {
                limits: null
                requests: null
            }
            securityContext: class V1SecurityContext {
                allowPrivilegeEscalation: null
                capabilities: null
                privileged: true
                procMount: null
                readOnlyRootFilesystem: null
                runAsGroup: null
                runAsNonRoot: null
                runAsUser: null
                seLinuxOptions: null
                seccompProfile: null
                windowsOptions: null
            }
            startupProbe: null
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /host/driver
                mountPropagation: null
                name: flexvol-driver-host
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                mountPropagation: null
                name: kube-api-access-x62px
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }]
        nodeName: rke2-server4
        nodeSelector: {kubernetes.io/os=linux}
        os: null
        overhead: null
        preemptionPolicy: PreemptLowerPriority
        priority: 2000001000
        priorityClassName: system-node-critical
        readinessGates: null
        restartPolicy: Always
        runtimeClassName: null
        schedulerName: default-scheduler
        securityContext: class V1PodSecurityContext {
            fsGroup: null
            fsGroupChangePolicy: null
            runAsGroup: null
            runAsNonRoot: null
            runAsUser: null
            seLinuxOptions: null
            seccompProfile: null
            supplementalGroups: null
            sysctls: null
            windowsOptions: null
        }
        serviceAccount: canal
        serviceAccountName: canal
        setHostnameAsFQDN: null
        shareProcessNamespace: null
        subdomain: null
        terminationGracePeriodSeconds: 0
        tolerations: [class V1Toleration {
            effect: NoSchedule
            key: null
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: null
            key: CriticalAddonsOnly
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: null
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/not-ready
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/unreachable
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node.kubernetes.io/disk-pressure
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node.kubernetes.io/memory-pressure
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node.kubernetes.io/pid-pressure
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node.kubernetes.io/unschedulable
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node.kubernetes.io/network-unavailable
            operator: Exists
            tolerationSeconds: null
            value: null
        }]
        topologySpreadConstraints: null
        volumes: [class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /lib/modules
                type: 
            }
            iscsi: null
            name: lib-modules
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/run/calico
                type: 
            }
            iscsi: null
            name: var-run-calico
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/calico
                type: 
            }
            iscsi: null
            name: var-lib-calico
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /run/xtables.lock
                type: FileOrCreate
            }
            iscsi: null
            name: xtables-lock
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: class V1ConfigMapVolumeSource {
                defaultMode: 420
                items: null
                name: rke2-canal-config
                optional: null
            }
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: flannel-cfg
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /opt/cni/bin
                type: 
            }
            iscsi: null
            name: cni-bin-dir
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /etc/cni/net.d
                type: 
            }
            iscsi: null
            name: cni-net-dir
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/log/calico/cni
                type: 
            }
            iscsi: null
            name: cni-log-dir
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/run/nodeagent
                type: DirectoryOrCreate
            }
            iscsi: null
            name: policysync
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /var/lib/kubelet/volumeplugins/nodeagent~uds
                type: DirectoryOrCreate
            }
            iscsi: null
            name: flexvol-driver-host
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: kube-api-access-x62px
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: class V1ProjectedVolumeSource {
                defaultMode: 420
                sources: [class V1VolumeProjection {
                    configMap: null
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: class V1ServiceAccountTokenProjection {
                        audience: null
                        expirationSeconds: 3607
                        path: token
                    }
                }, class V1VolumeProjection {
                    configMap: class V1ConfigMapProjection {
                        items: [class V1KeyToPath {
                            key: ca.crt
                            mode: null
                            path: ca.crt
                        }]
                        name: kube-root-ca.crt
                        optional: null
                    }
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: null
                }, class V1VolumeProjection {
                    configMap: null
                    downwardAPI: class V1DownwardAPIProjection {
                        items: [class V1DownwardAPIVolumeFile {
                            fieldRef: class V1ObjectFieldSelector {
                                apiVersion: v1
                                fieldPath: metadata.namespace
                            }
                            mode: null
                            path: namespace
                            resourceFieldRef: null
                        }]
                    }
                    secret: null
                    serviceAccountToken: null
                }]
            }
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }]
    }
    status: class V1PodStatus {
        conditions: [class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:02Z
            message: null
            reason: null
            status: True
            type: Initialized
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:07Z
            message: null
            reason: null
            status: True
            type: Ready
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:07Z
            message: null
            reason: null
            status: True
            type: ContainersReady
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:08:02Z
            message: null
            reason: null
            status: True
            type: PodScheduled
        }]
        containerStatuses: [class V1ContainerStatus {
            containerID: containerd://47ed68032ab45186df77dc542462326324c7192644d71d75f323391ae18b3ae5
            image: docker.io/rancher/hardened-calico:v3.24.1-build20221011
            imageID: docker.io/rancher/hardened-calico@sha256:844c5e91732879b91a022c4000ac3ada05e7e7d91e3c163d0bb4b8488d48c303
            lastState: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://b0a261643bf2cf08e4c9d77453d65e446ea8358c48f13bd547b80f6115b6693c
                    exitCode: 255
                    finishedAt: 2023-02-27T01:40:25Z
                    message: null
                    reason: Unknown
                    signal: null
                    startedAt: 2023-02-02T01:27:54Z
                }
                waiting: null
            }
            name: calico-node
            ready: true
            restartCount: 29
            started: true
            state: class V1ContainerState {
                running: class V1ContainerStateRunning {
                    startedAt: 2023-02-27T01:41:04Z
                }
                terminated: null
                waiting: null
            }
        }, class V1ContainerStatus {
            containerID: containerd://da69e360a727d897fa22cc3ae702bd2406c2f3825f9c025f4baa9e8d5b3fec9e
            image: docker.io/rancher/hardened-flannel:v0.19.1-build20221011
            imageID: docker.io/rancher/hardened-flannel@sha256:f8b624655da659bcbcc035383fd6bada12c59d4921683cf1a7167da525f3b53b
            lastState: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://0a4992c7891664f5eca472b1d40747cbe36860ddb37707761241aad67037f192
                    exitCode: 255
                    finishedAt: 2023-02-27T01:40:25Z
                    message: null
                    reason: Unknown
                    signal: null
                    startedAt: 2023-02-02T01:27:55Z
                }
                waiting: null
            }
            name: kube-flannel
            ready: true
            restartCount: 29
            started: true
            state: class V1ContainerState {
                running: class V1ContainerStateRunning {
                    startedAt: 2023-02-27T01:41:05Z
                }
                terminated: null
                waiting: null
            }
        }]
        ephemeralContainerStatuses: null
        hostIP: 172.168.113.110
        initContainerStatuses: [class V1ContainerStatus {
            containerID: containerd://66be391c8914f07a842f0611648703ae2913291b23ab71d1941f5daf25f53b36
            image: docker.io/rancher/hardened-calico:v3.24.1-build20221011
            imageID: docker.io/rancher/hardened-calico@sha256:844c5e91732879b91a022c4000ac3ada05e7e7d91e3c163d0bb4b8488d48c303
            lastState: class V1ContainerState {
                running: null
                terminated: null
                waiting: null
            }
            name: install-cni
            ready: true
            restartCount: 0
            started: null
            state: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://66be391c8914f07a842f0611648703ae2913291b23ab71d1941f5daf25f53b36
                    exitCode: 0
                    finishedAt: 2023-02-27T01:41:01Z
                    message: null
                    reason: Completed
                    signal: null
                    startedAt: 2023-02-27T01:40:58Z
                }
                waiting: null
            }
        }, class V1ContainerStatus {
            containerID: containerd://5e019d347a8c103bc78ffb8a2f06567b369e1ffc7da331c5cd4867286a089b56
            image: docker.io/rancher/hardened-calico:v3.24.1-build20221011
            imageID: docker.io/rancher/hardened-calico@sha256:844c5e91732879b91a022c4000ac3ada05e7e7d91e3c163d0bb4b8488d48c303
            lastState: class V1ContainerState {
                running: null
                terminated: null
                waiting: null
            }
            name: flexvol-driver
            ready: true
            restartCount: 0
            started: null
            state: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://5e019d347a8c103bc78ffb8a2f06567b369e1ffc7da331c5cd4867286a089b56
                    exitCode: 0
                    finishedAt: 2023-02-27T01:41:02Z
                    message: null
                    reason: Completed
                    signal: null
                    startedAt: 2023-02-27T01:41:02Z
                }
                waiting: null
            }
        }]
        message: null
        nominatedNodeName: null
        phase: Running
        podIP: 172.168.113.110
        podIPs: [class V1PodIP {
            ip: 172.168.113.110
        }]
        qosClass: Burstable
        reason: null
        startTime: 2022-12-02T09:08:02Z
    }
}
class V1Pod {
    apiVersion: null
    kind: null
    metadata: class V1ObjectMeta {
        annotations: {checksum/config=90084c15b9df1ec38fa682119b5fbfa5841c2ee563106fc61f97318a9641acf3, cni.projectcalico.org/containerID=429545585f34364b9d356fa93e0eb4b3f2b3422d6941011295f49e5058105d02, cni.projectcalico.org/podIP=10.42.0.193/32, cni.projectcalico.org/podIPs=10.42.0.193/32, kubernetes.io/psp=global-unrestricted-psp, scheduler.alpha.kubernetes.io/critical-pod=}
        creationTimestamp: 2022-12-02T09:08:02Z
        deletionGracePeriodSeconds: null
        deletionTimestamp: null
        finalizers: null
        generateName: rke2-coredns-rke2-coredns-58fd75f64b-
        generation: null
        labels: {app.kubernetes.io/instance=rke2-coredns, app.kubernetes.io/name=rke2-coredns, k8s-app=kube-dns, pod-template-hash=58fd75f64b}
        managedFields: [class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={.={}, f:checksum/config={}, f:scheduler.alpha.kubernetes.io/critical-pod={}}, f:generateName={}, f:labels={.={}, f:app.kubernetes.io/instance={}, f:app.kubernetes.io/name={}, f:k8s-app={}, f:pod-template-hash={}}, f:ownerReferences={.={}, k:{"uid":"0137c14b-39d2-441f-9fd0-e589ad73b489"}={}}}, f:spec={f:affinity={.={}, f:podAntiAffinity={.={}, f:requiredDuringSchedulingIgnoredDuringExecution={}}}, f:containers={k:{"name":"coredns"}={.={}, f:args={}, f:image={}, f:imagePullPolicy={}, f:livenessProbe={.={}, f:failureThreshold={}, f:httpGet={.={}, f:path={}, f:port={}, f:scheme={}}, f:initialDelaySeconds={}, f:periodSeconds={}, f:successThreshold={}, f:timeoutSeconds={}}, f:name={}, f:ports={.={}, k:{"containerPort":53,"protocol":"TCP"}={.={}, f:containerPort={}, f:name={}, f:protocol={}}, k:{"containerPort":53,"protocol":"UDP"}={.={}, f:containerPort={}, f:name={}, f:protocol={}}}, f:readinessProbe={.={}, f:failureThreshold={}, f:httpGet={.={}, f:path={}, f:port={}, f:scheme={}}, f:initialDelaySeconds={}, f:periodSeconds={}, f:successThreshold={}, f:timeoutSeconds={}}, f:resources={.={}, f:limits={.={}, f:cpu={}, f:memory={}}, f:requests={.={}, f:cpu={}, f:memory={}}}, f:terminationMessagePath={}, f:terminationMessagePolicy={}, f:volumeMounts={.={}, k:{"mountPath":"/etc/coredns"}={.={}, f:mountPath={}, f:name={}}}}}, f:dnsPolicy={}, f:enableServiceLinks={}, f:nodeSelector={}, f:priorityClassName={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={}, f:serviceAccount={}, f:serviceAccountName={}, f:terminationGracePeriodSeconds={}, f:tolerations={}, f:volumes={.={}, k:{"name":"config-volume"}={.={}, f:configMap={.={}, f:defaultMode={}, f:items={}, f:name={}}, f:name={}}}}}
            manager: kube-controller-manager
            operation: Update
            subresource: null
            time: 2022-12-02T09:08:02Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={.={}, k:{"type":"PodScheduled"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:message={}, f:reason={}, f:status={}, f:type={}}}}}
            manager: kube-scheduler
            operation: Update
            subresource: status
            time: 2022-12-02T09:08:02Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={f:cni.projectcalico.org/containerID={}, f:cni.projectcalico.org/podIP={}, f:cni.projectcalico.org/podIPs={}}}}
            manager: calico
            operation: Update
            subresource: status
            time: 2022-12-02T09:09:52Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={k:{"type":"ContainersReady"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Initialized"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Ready"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}}, f:containerStatuses={}, f:hostIP={}, f:phase={}, f:podIP={}, f:podIPs={.={}, k:{"ip":"10.42.0.193"}={.={}, f:ip={}}}, f:startTime={}}}
            manager: kubelet
            operation: Update
            subresource: status
            time: 2023-02-27T01:41:44Z
        }]
        name: rke2-coredns-rke2-coredns-58fd75f64b-9htg5
        namespace: kube-system
        ownerReferences: [class V1OwnerReference {
            apiVersion: apps/v1
            blockOwnerDeletion: true
            controller: true
            kind: ReplicaSet
            name: rke2-coredns-rke2-coredns-58fd75f64b
            uid: 0137c14b-39d2-441f-9fd0-e589ad73b489
        }]
        resourceVersion: 1420661
        selfLink: null
        uid: c842fe43-d497-4bf2-b17c-1287e9bfa71c
    }
    spec: class V1PodSpec {
        activeDeadlineSeconds: null
        affinity: class V1Affinity {
            nodeAffinity: null
            podAffinity: null
            podAntiAffinity: class V1PodAntiAffinity {
                preferredDuringSchedulingIgnoredDuringExecution: null
                requiredDuringSchedulingIgnoredDuringExecution: [class V1PodAffinityTerm {
                    labelSelector: class V1LabelSelector {
                        matchExpressions: [class V1LabelSelectorRequirement {
                            key: k8s-app
                            operator: In
                            values: [kube-dns]
                        }]
                        matchLabels: null
                    }
                    namespaceSelector: null
                    namespaces: null
                    topologyKey: kubernetes.io/hostname
                }]
            }
        }
        automountServiceAccountToken: null
        containers: [class V1Container {
            args: [-conf, /etc/coredns/Corefile]
            command: null
            env: null
            envFrom: null
            image: rancher/hardened-coredns:v1.9.3-build20221011
            imagePullPolicy: IfNotPresent
            lifecycle: null
            livenessProbe: class V1Probe {
                exec: null
                failureThreshold: 5
                grpc: null
                httpGet: class V1HTTPGetAction {
                    host: null
                    httpHeaders: null
                    path: /health
                    port: 8080
                    scheme: HTTP
                }
                initialDelaySeconds: 60
                periodSeconds: 10
                successThreshold: 1
                tcpSocket: null
                terminationGracePeriodSeconds: null
                timeoutSeconds: 5
            }
            name: coredns
            ports: [class V1ContainerPort {
                containerPort: 53
                hostIP: null
                hostPort: null
                name: udp-53
                protocol: UDP
            }, class V1ContainerPort {
                containerPort: 53
                hostIP: null
                hostPort: null
                name: tcp-53
                protocol: TCP
            }]
            readinessProbe: class V1Probe {
                exec: null
                failureThreshold: 5
                grpc: null
                httpGet: class V1HTTPGetAction {
                    host: null
                    httpHeaders: null
                    path: /ready
                    port: 8181
                    scheme: HTTP
                }
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                tcpSocket: null
                terminationGracePeriodSeconds: null
                timeoutSeconds: 5
            }
            resources: class V1ResourceRequirements {
                limits: {cpu=Quantity{number=0.100, format=DECIMAL_SI}, memory=Quantity{number=134217728, format=BINARY_SI}}
                requests: {cpu=Quantity{number=0.100, format=DECIMAL_SI}, memory=Quantity{number=134217728, format=BINARY_SI}}
            }
            securityContext: null
            startupProbe: null
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /etc/coredns
                mountPropagation: null
                name: config-volume
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                mountPropagation: null
                name: kube-api-access-pkzv2
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }]
        dnsConfig: null
        dnsPolicy: Default
        enableServiceLinks: true
        ephemeralContainers: null
        hostAliases: null
        hostIPC: null
        hostNetwork: null
        hostPID: null
        hostUsers: null
        hostname: null
        imagePullSecrets: null
        initContainers: null
        nodeName: rke2-server4
        nodeSelector: {kubernetes.io/os=linux}
        os: null
        overhead: null
        preemptionPolicy: PreemptLowerPriority
        priority: 2000000000
        priorityClassName: system-cluster-critical
        readinessGates: null
        restartPolicy: Always
        runtimeClassName: null
        schedulerName: default-scheduler
        securityContext: class V1PodSecurityContext {
            fsGroup: null
            fsGroupChangePolicy: null
            runAsGroup: null
            runAsNonRoot: null
            runAsUser: null
            seLinuxOptions: null
            seccompProfile: null
            supplementalGroups: null
            sysctls: null
            windowsOptions: null
        }
        serviceAccount: coredns
        serviceAccountName: coredns
        setHostnameAsFQDN: null
        shareProcessNamespace: null
        subdomain: null
        terminationGracePeriodSeconds: 30
        tolerations: [class V1Toleration {
            effect: null
            key: CriticalAddonsOnly
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node-role.kubernetes.io/control-plane
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node-role.kubernetes.io/etcd
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/not-ready
            operator: Exists
            tolerationSeconds: 300
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/unreachable
            operator: Exists
            tolerationSeconds: 300
            value: null
        }]
        topologySpreadConstraints: null
        volumes: [class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: class V1ConfigMapVolumeSource {
                defaultMode: 420
                items: [class V1KeyToPath {
                    key: Corefile
                    mode: null
                    path: Corefile
                }]
                name: rke2-coredns-rke2-coredns
                optional: null
            }
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: config-volume
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: kube-api-access-pkzv2
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: class V1ProjectedVolumeSource {
                defaultMode: 420
                sources: [class V1VolumeProjection {
                    configMap: null
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: class V1ServiceAccountTokenProjection {
                        audience: null
                        expirationSeconds: 3607
                        path: token
                    }
                }, class V1VolumeProjection {
                    configMap: class V1ConfigMapProjection {
                        items: [class V1KeyToPath {
                            key: ca.crt
                            mode: null
                            path: ca.crt
                        }]
                        name: kube-root-ca.crt
                        optional: null
                    }
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: null
                }, class V1VolumeProjection {
                    configMap: null
                    downwardAPI: class V1DownwardAPIProjection {
                        items: [class V1DownwardAPIVolumeFile {
                            fieldRef: class V1ObjectFieldSelector {
                                apiVersion: v1
                                fieldPath: metadata.namespace
                            }
                            mode: null
                            path: namespace
                            resourceFieldRef: null
                        }]
                    }
                    secret: null
                    serviceAccountToken: null
                }]
            }
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }]
    }
    status: class V1PodStatus {
        conditions: [class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:09:50Z
            message: null
            reason: null
            status: True
            type: Initialized
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:44Z
            message: null
            reason: null
            status: True
            type: Ready
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:44Z
            message: null
            reason: null
            status: True
            type: ContainersReady
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:09:50Z
            message: null
            reason: null
            status: True
            type: PodScheduled
        }]
        containerStatuses: [class V1ContainerStatus {
            containerID: containerd://ff198c4b1f3e3cab49fc7af274a53760e2ff708609fbe3388161fd98ccfc40d9
            image: docker.io/rancher/hardened-coredns:v1.9.3-build20221011
            imageID: docker.io/rancher/hardened-coredns@sha256:3020505d755499eb8d22f631aa88fc597b4849eae18404401087669a6bc5ca06
            lastState: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://132c4eae7df13a82419f5dc460b64b0dae3dff0aef33e7f917acb539243bef4a
                    exitCode: 255
                    finishedAt: 2023-02-27T01:40:25Z
                    message: null
                    reason: Unknown
                    signal: null
                    startedAt: 2023-02-02T01:27:59Z
                }
                waiting: null
            }
            name: coredns
            ready: true
            restartCount: 29
            started: true
            state: class V1ContainerState {
                running: class V1ContainerStateRunning {
                    startedAt: 2023-02-27T01:41:08Z
                }
                terminated: null
                waiting: null
            }
        }]
        ephemeralContainerStatuses: null
        hostIP: 172.168.113.110
        initContainerStatuses: null
        message: null
        nominatedNodeName: null
        phase: Running
        podIP: 10.42.0.193
        podIPs: [class V1PodIP {
            ip: 10.42.0.193
        }]
        qosClass: Guaranteed
        reason: null
        startTime: 2022-12-02T09:09:50Z
    }
}
class V1Pod {
    apiVersion: null
    kind: null
    metadata: class V1ObjectMeta {
        annotations: {checksum/configmap=51d277b156327fec136a6c496429b4402ddaed1136569736368ef5603a16abad, cni.projectcalico.org/containerID=a4f18ac968c9f5070bdd183a32131b9e0717bc379a32ea1c652af89c3df53e54, cni.projectcalico.org/podIP=10.42.0.192/32, cni.projectcalico.org/podIPs=10.42.0.192/32, kubernetes.io/psp=global-unrestricted-psp, scheduler.alpha.kubernetes.io/critical-pod=, scheduler.alpha.kubernetes.io/tolerations=[{"key":"CriticalAddonsOnly", "operator":"Exists"}]}
        creationTimestamp: 2022-12-02T09:08:02Z
        deletionGracePeriodSeconds: null
        deletionTimestamp: null
        finalizers: null
        generateName: rke2-coredns-rke2-coredns-autoscaler-768bfc5985-
        generation: null
        labels: {app.kubernetes.io/instance=rke2-coredns, app.kubernetes.io/name=rke2-coredns-autoscaler, k8s-app=kube-dns-autoscaler, pod-template-hash=768bfc5985}
        managedFields: [class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={.={}, f:checksum/configmap={}, f:scheduler.alpha.kubernetes.io/critical-pod={}, f:scheduler.alpha.kubernetes.io/tolerations={}}, f:generateName={}, f:labels={.={}, f:app.kubernetes.io/instance={}, f:app.kubernetes.io/name={}, f:k8s-app={}, f:pod-template-hash={}}, f:ownerReferences={.={}, k:{"uid":"bd90d1ca-7194-4d21-acd8-a3de6a83363f"}={}}}, f:spec={f:containers={k:{"name":"autoscaler"}={.={}, f:command={}, f:image={}, f:imagePullPolicy={}, f:livenessProbe={.={}, f:failureThreshold={}, f:httpGet={.={}, f:path={}, f:port={}, f:scheme={}}, f:initialDelaySeconds={}, f:periodSeconds={}, f:successThreshold={}, f:timeoutSeconds={}}, f:name={}, f:resources={.={}, f:limits={.={}, f:cpu={}, f:memory={}}, f:requests={.={}, f:cpu={}, f:memory={}}}, f:terminationMessagePath={}, f:terminationMessagePolicy={}}}, f:dnsPolicy={}, f:enableServiceLinks={}, f:nodeSelector={}, f:priorityClassName={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={}, f:serviceAccount={}, f:serviceAccountName={}, f:terminationGracePeriodSeconds={}, f:tolerations={}}}
            manager: kube-controller-manager
            operation: Update
            subresource: null
            time: 2022-12-02T09:08:02Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={.={}, k:{"type":"PodScheduled"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:message={}, f:reason={}, f:status={}, f:type={}}}}}
            manager: kube-scheduler
            operation: Update
            subresource: status
            time: 2022-12-02T09:08:02Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={f:cni.projectcalico.org/containerID={}, f:cni.projectcalico.org/podIP={}, f:cni.projectcalico.org/podIPs={}}}}
            manager: calico
            operation: Update
            subresource: status
            time: 2022-12-02T09:09:51Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={k:{"type":"ContainersReady"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Initialized"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Ready"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}}, f:containerStatuses={}, f:hostIP={}, f:phase={}, f:podIP={}, f:podIPs={.={}, k:{"ip":"10.42.0.192"}={.={}, f:ip={}}}, f:startTime={}}}
            manager: kubelet
            operation: Update
            subresource: status
            time: 2023-02-27T01:41:09Z
        }]
        name: rke2-coredns-rke2-coredns-autoscaler-768bfc5985-7fc8k
        namespace: kube-system
        ownerReferences: [class V1OwnerReference {
            apiVersion: apps/v1
            blockOwnerDeletion: true
            controller: true
            kind: ReplicaSet
            name: rke2-coredns-rke2-coredns-autoscaler-768bfc5985
            uid: bd90d1ca-7194-4d21-acd8-a3de6a83363f
        }]
        resourceVersion: 1420488
        selfLink: null
        uid: c71be843-e048-4b01-9810-95ba5925dd82
    }
    spec: class V1PodSpec {
        activeDeadlineSeconds: null
        affinity: null
        automountServiceAccountToken: null
        containers: [class V1Container {
            args: null
            command: [/cluster-proportional-autoscaler, --namespace=kube-system, --configmap=rke2-coredns-rke2-coredns-autoscaler, --target=Deployment/rke2-coredns-rke2-coredns, --logtostderr=true, --v=2]
            env: null
            envFrom: null
            image: rancher/hardened-cluster-autoscaler:v1.8.5-build20221011
            imagePullPolicy: IfNotPresent
            lifecycle: null
            livenessProbe: class V1Probe {
                exec: null
                failureThreshold: 3
                grpc: null
                httpGet: class V1HTTPGetAction {
                    host: null
                    httpHeaders: null
                    path: /healthz
                    port: 8080
                    scheme: HTTP
                }
                initialDelaySeconds: 10
                periodSeconds: 30
                successThreshold: 1
                tcpSocket: null
                terminationGracePeriodSeconds: null
                timeoutSeconds: 10
            }
            name: autoscaler
            ports: null
            readinessProbe: null
            resources: class V1ResourceRequirements {
                limits: {cpu=Quantity{number=0.100, format=DECIMAL_SI}, memory=Quantity{number=67108864, format=BINARY_SI}}
                requests: {cpu=Quantity{number=0.025, format=DECIMAL_SI}, memory=Quantity{number=16777216, format=BINARY_SI}}
            }
            securityContext: null
            startupProbe: null
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                mountPropagation: null
                name: kube-api-access-zh42v
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }]
        dnsConfig: null
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        ephemeralContainers: null
        hostAliases: null
        hostIPC: null
        hostNetwork: null
        hostPID: null
        hostUsers: null
        hostname: null
        imagePullSecrets: null
        initContainers: null
        nodeName: rke2-server4
        nodeSelector: {kubernetes.io/os=linux}
        os: null
        overhead: null
        preemptionPolicy: PreemptLowerPriority
        priority: 2000000000
        priorityClassName: system-cluster-critical
        readinessGates: null
        restartPolicy: Always
        runtimeClassName: null
        schedulerName: default-scheduler
        securityContext: class V1PodSecurityContext {
            fsGroup: null
            fsGroupChangePolicy: null
            runAsGroup: null
            runAsNonRoot: null
            runAsUser: null
            seLinuxOptions: null
            seccompProfile: null
            supplementalGroups: null
            sysctls: null
            windowsOptions: null
        }
        serviceAccount: rke2-coredns-rke2-coredns-autoscaler
        serviceAccountName: rke2-coredns-rke2-coredns-autoscaler
        setHostnameAsFQDN: null
        shareProcessNamespace: null
        subdomain: null
        terminationGracePeriodSeconds: 30
        tolerations: [class V1Toleration {
            effect: NoSchedule
            key: node-role.kubernetes.io/control-plane
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node-role.kubernetes.io/etcd
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/not-ready
            operator: Exists
            tolerationSeconds: 300
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/unreachable
            operator: Exists
            tolerationSeconds: 300
            value: null
        }]
        topologySpreadConstraints: null
        volumes: [class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: kube-api-access-zh42v
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: class V1ProjectedVolumeSource {
                defaultMode: 420
                sources: [class V1VolumeProjection {
                    configMap: null
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: class V1ServiceAccountTokenProjection {
                        audience: null
                        expirationSeconds: 3607
                        path: token
                    }
                }, class V1VolumeProjection {
                    configMap: class V1ConfigMapProjection {
                        items: [class V1KeyToPath {
                            key: ca.crt
                            mode: null
                            path: ca.crt
                        }]
                        name: kube-root-ca.crt
                        optional: null
                    }
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: null
                }, class V1VolumeProjection {
                    configMap: null
                    downwardAPI: class V1DownwardAPIProjection {
                        items: [class V1DownwardAPIVolumeFile {
                            fieldRef: class V1ObjectFieldSelector {
                                apiVersion: v1
                                fieldPath: metadata.namespace
                            }
                            mode: null
                            path: namespace
                            resourceFieldRef: null
                        }]
                    }
                    secret: null
                    serviceAccountToken: null
                }]
            }
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }]
    }
    status: class V1PodStatus {
        conditions: [class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:09:50Z
            message: null
            reason: null
            status: True
            type: Initialized
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:09Z
            message: null
            reason: null
            status: True
            type: Ready
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:09Z
            message: null
            reason: null
            status: True
            type: ContainersReady
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:09:50Z
            message: null
            reason: null
            status: True
            type: PodScheduled
        }]
        containerStatuses: [class V1ContainerStatus {
            containerID: containerd://2ebd6f44556a49625fed0edff6b37e0cec79e3a8ce1cf1e2dbbe11f061e7b694
            image: docker.io/rancher/hardened-cluster-autoscaler:v1.8.5-build20221011
            imageID: docker.io/rancher/hardened-cluster-autoscaler@sha256:18cf5a3f1c2c7df073b310016b1ac28e8e543afb5cffe91da6bc33176f0fb9f8
            lastState: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://4fd85cc9fbb0f81c3b91ccb7242c7694c1a4cd7c5146e231aae993aff2141e3a
                    exitCode: 255
                    finishedAt: 2023-02-27T01:40:25Z
                    message: null
                    reason: Unknown
                    signal: null
                    startedAt: 2023-02-02T01:28:09Z
                }
                waiting: null
            }
            name: autoscaler
            ready: true
            restartCount: 29
            started: true
            state: class V1ContainerState {
                running: class V1ContainerStateRunning {
                    startedAt: 2023-02-27T01:41:08Z
                }
                terminated: null
                waiting: null
            }
        }]
        ephemeralContainerStatuses: null
        hostIP: 172.168.113.110
        initContainerStatuses: null
        message: null
        nominatedNodeName: null
        phase: Running
        podIP: 10.42.0.192
        podIPs: [class V1PodIP {
            ip: 10.42.0.192
        }]
        qosClass: Burstable
        reason: null
        startTime: 2022-12-02T09:09:50Z
    }
}
class V1Pod {
    apiVersion: null
    kind: null
    metadata: class V1ObjectMeta {
        annotations: {cni.projectcalico.org/containerID=3fad4cfcfe44a12c3430ff4aec7a2279cbc990a6ef78f551bd37e26f32dd5ce6, cni.projectcalico.org/podIP=10.42.0.195/32, cni.projectcalico.org/podIPs=10.42.0.195/32, kubernetes.io/psp=global-unrestricted-psp}
        creationTimestamp: 2022-12-02T09:10:51Z
        deletionGracePeriodSeconds: null
        deletionTimestamp: null
        finalizers: null
        generateName: rke2-ingress-nginx-controller-
        generation: null
        labels: {app.kubernetes.io/component=controller, app.kubernetes.io/instance=rke2-ingress-nginx, app.kubernetes.io/name=rke2-ingress-nginx, controller-revision-hash=6b86554f85, pod-template-generation=1}
        managedFields: [class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={f:cni.projectcalico.org/containerID={}, f:cni.projectcalico.org/podIP={}, f:cni.projectcalico.org/podIPs={}}}}
            manager: calico
            operation: Update
            subresource: status
            time: 2022-12-02T09:10:51Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:generateName={}, f:labels={.={}, f:app.kubernetes.io/component={}, f:app.kubernetes.io/instance={}, f:app.kubernetes.io/name={}, f:controller-revision-hash={}, f:pod-template-generation={}}, f:ownerReferences={.={}, k:{"uid":"6d40c69f-c9dc-4eb1-8fc1-9e7ec4e59824"}={}}}, f:spec={f:affinity={.={}, f:nodeAffinity={.={}, f:requiredDuringSchedulingIgnoredDuringExecution={}}}, f:containers={k:{"name":"rke2-ingress-nginx-controller"}={.={}, f:args={}, f:env={.={}, k:{"name":"LD_PRELOAD"}={.={}, f:name={}, f:value={}}, k:{"name":"POD_NAME"}={.={}, f:name={}, f:valueFrom={.={}, f:fieldRef={}}}, k:{"name":"POD_NAMESPACE"}={.={}, f:name={}, f:valueFrom={.={}, f:fieldRef={}}}}, f:image={}, f:imagePullPolicy={}, f:lifecycle={.={}, f:preStop={.={}, f:exec={.={}, f:command={}}}}, f:livenessProbe={.={}, f:failureThreshold={}, f:httpGet={.={}, f:path={}, f:port={}, f:scheme={}}, f:initialDelaySeconds={}, f:periodSeconds={}, f:successThreshold={}, f:timeoutSeconds={}}, f:name={}, f:ports={.={}, k:{"containerPort":80,"protocol":"TCP"}={.={}, f:containerPort={}, f:hostPort={}, f:name={}, f:protocol={}}, k:{"containerPort":443,"protocol":"TCP"}={.={}, f:containerPort={}, f:hostPort={}, f:name={}, f:protocol={}}, k:{"containerPort":8443,"protocol":"TCP"}={.={}, f:containerPort={}, f:name={}, f:protocol={}}}, f:readinessProbe={.={}, f:failureThreshold={}, f:httpGet={.={}, f:path={}, f:port={}, f:scheme={}}, f:initialDelaySeconds={}, f:periodSeconds={}, f:successThreshold={}, f:timeoutSeconds={}}, f:resources={.={}, f:requests={.={}, f:cpu={}, f:memory={}}}, f:securityContext={.={}, f:allowPrivilegeEscalation={}, f:capabilities={.={}, f:add={}, f:drop={}}, f:runAsUser={}}, f:terminationMessagePath={}, f:terminationMessagePolicy={}, f:volumeMounts={.={}, k:{"mountPath":"/usr/local/certificates/"}={.={}, f:mountPath={}, f:name={}, f:readOnly={}}}}}, f:dnsPolicy={}, f:enableServiceLinks={}, f:nodeSelector={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={}, f:serviceAccount={}, f:serviceAccountName={}, f:terminationGracePeriodSeconds={}, f:tolerations={}, f:volumes={.={}, k:{"name":"webhook-cert"}={.={}, f:name={}, f:secret={.={}, f:defaultMode={}, f:secretName={}}}}}}
            manager: kube-controller-manager
            operation: Update
            subresource: null
            time: 2022-12-02T09:10:51Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={k:{"type":"ContainersReady"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Initialized"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Ready"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}}, f:containerStatuses={}, f:hostIP={}, f:phase={}, f:podIP={}, f:podIPs={.={}, k:{"ip":"10.42.0.195"}={.={}, f:ip={}}}, f:startTime={}}}
            manager: kubelet
            operation: Update
            subresource: status
            time: 2023-02-27T01:41:23Z
        }]
        name: rke2-ingress-nginx-controller-84tlq
        namespace: kube-system
        ownerReferences: [class V1OwnerReference {
            apiVersion: apps/v1
            blockOwnerDeletion: true
            controller: true
            kind: DaemonSet
            name: rke2-ingress-nginx-controller
            uid: 6d40c69f-c9dc-4eb1-8fc1-9e7ec4e59824
        }]
        resourceVersion: 1420568
        selfLink: null
        uid: 029032ff-8064-462e-978f-496bfda63f5a
    }
    spec: class V1PodSpec {
        activeDeadlineSeconds: null
        affinity: class V1Affinity {
            nodeAffinity: class V1NodeAffinity {
                preferredDuringSchedulingIgnoredDuringExecution: null
                requiredDuringSchedulingIgnoredDuringExecution: class V1NodeSelector {
                    nodeSelectorTerms: [class V1NodeSelectorTerm {
                        matchExpressions: null
                        matchFields: [class V1NodeSelectorRequirement {
                            key: metadata.name
                            operator: In
                            values: [rke2-server4]
                        }]
                    }]
                }
            }
            podAffinity: null
            podAntiAffinity: null
        }
        automountServiceAccountToken: null
        containers: [class V1Container {
            args: [/nginx-ingress-controller, --election-id=ingress-controller-leader, --controller-class=k8s.io/ingress-nginx, --ingress-class=nginx, --configmap=$(POD_NAMESPACE)/rke2-ingress-nginx-controller, --validating-webhook=:8443, --validating-webhook-certificate=/usr/local/certificates/cert, --validating-webhook-key=/usr/local/certificates/key, --watch-ingress-without-class=true]
            command: null
            env: [class V1EnvVar {
                name: POD_NAME
                value: null
                valueFrom: class V1EnvVarSource {
                    configMapKeyRef: null
                    fieldRef: class V1ObjectFieldSelector {
                        apiVersion: v1
                        fieldPath: metadata.name
                    }
                    resourceFieldRef: null
                    secretKeyRef: null
                }
            }, class V1EnvVar {
                name: POD_NAMESPACE
                value: null
                valueFrom: class V1EnvVarSource {
                    configMapKeyRef: null
                    fieldRef: class V1ObjectFieldSelector {
                        apiVersion: v1
                        fieldPath: metadata.namespace
                    }
                    resourceFieldRef: null
                    secretKeyRef: null
                }
            }, class V1EnvVar {
                name: LD_PRELOAD
                value: /usr/local/lib/libmimalloc.so
                valueFrom: null
            }]
            envFrom: null
            image: rancher/nginx-ingress-controller:nginx-1.2.1-hardened9
            imagePullPolicy: IfNotPresent
            lifecycle: class V1Lifecycle {
                postStart: null
                preStop: class V1LifecycleHandler {
                    exec: class V1ExecAction {
                        command: [/wait-shutdown]
                    }
                    httpGet: null
                    tcpSocket: null
                }
            }
            livenessProbe: class V1Probe {
                exec: null
                failureThreshold: 5
                grpc: null
                httpGet: class V1HTTPGetAction {
                    host: null
                    httpHeaders: null
                    path: /healthz
                    port: 10254
                    scheme: HTTP
                }
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                tcpSocket: null
                terminationGracePeriodSeconds: null
                timeoutSeconds: 1
            }
            name: rke2-ingress-nginx-controller
            ports: [class V1ContainerPort {
                containerPort: 80
                hostIP: null
                hostPort: 80
                name: http
                protocol: TCP
            }, class V1ContainerPort {
                containerPort: 443
                hostIP: null
                hostPort: 443
                name: https
                protocol: TCP
            }, class V1ContainerPort {
                containerPort: 8443
                hostIP: null
                hostPort: null
                name: webhook
                protocol: TCP
            }]
            readinessProbe: class V1Probe {
                exec: null
                failureThreshold: 3
                grpc: null
                httpGet: class V1HTTPGetAction {
                    host: null
                    httpHeaders: null
                    path: /healthz
                    port: 10254
                    scheme: HTTP
                }
                initialDelaySeconds: 10
                periodSeconds: 10
                successThreshold: 1
                tcpSocket: null
                terminationGracePeriodSeconds: null
                timeoutSeconds: 1
            }
            resources: class V1ResourceRequirements {
                limits: null
                requests: {cpu=Quantity{number=0.100, format=DECIMAL_SI}, memory=Quantity{number=94371840, format=BINARY_SI}}
            }
            securityContext: class V1SecurityContext {
                allowPrivilegeEscalation: true
                capabilities: class V1Capabilities {
                    add: [NET_BIND_SERVICE]
                    drop: [ALL]
                }
                privileged: null
                procMount: null
                readOnlyRootFilesystem: null
                runAsGroup: null
                runAsNonRoot: null
                runAsUser: 101
                seLinuxOptions: null
                seccompProfile: null
                windowsOptions: null
            }
            startupProbe: null
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /usr/local/certificates/
                mountPropagation: null
                name: webhook-cert
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                mountPropagation: null
                name: kube-api-access-2nxj4
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }]
        dnsConfig: null
        dnsPolicy: ClusterFirstWithHostNet
        enableServiceLinks: true
        ephemeralContainers: null
        hostAliases: null
        hostIPC: null
        hostNetwork: null
        hostPID: null
        hostUsers: null
        hostname: null
        imagePullSecrets: null
        initContainers: null
        nodeName: rke2-server4
        nodeSelector: {kubernetes.io/os=linux}
        os: null
        overhead: null
        preemptionPolicy: PreemptLowerPriority
        priority: 0
        priorityClassName: null
        readinessGates: null
        restartPolicy: Always
        runtimeClassName: null
        schedulerName: default-scheduler
        securityContext: class V1PodSecurityContext {
            fsGroup: null
            fsGroupChangePolicy: null
            runAsGroup: null
            runAsNonRoot: null
            runAsUser: null
            seLinuxOptions: null
            seccompProfile: null
            supplementalGroups: null
            sysctls: null
            windowsOptions: null
        }
        serviceAccount: rke2-ingress-nginx
        serviceAccountName: rke2-ingress-nginx
        setHostnameAsFQDN: null
        shareProcessNamespace: null
        subdomain: null
        terminationGracePeriodSeconds: 300
        tolerations: [class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/not-ready
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/unreachable
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node.kubernetes.io/disk-pressure
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node.kubernetes.io/memory-pressure
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node.kubernetes.io/pid-pressure
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node.kubernetes.io/unschedulable
            operator: Exists
            tolerationSeconds: null
            value: null
        }]
        topologySpreadConstraints: null
        volumes: [class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: webhook-cert
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: class V1SecretVolumeSource {
                defaultMode: 420
                items: null
                optional: null
                secretName: rke2-ingress-nginx-admission
            }
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: kube-api-access-2nxj4
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: class V1ProjectedVolumeSource {
                defaultMode: 420
                sources: [class V1VolumeProjection {
                    configMap: null
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: class V1ServiceAccountTokenProjection {
                        audience: null
                        expirationSeconds: 3607
                        path: token
                    }
                }, class V1VolumeProjection {
                    configMap: class V1ConfigMapProjection {
                        items: [class V1KeyToPath {
                            key: ca.crt
                            mode: null
                            path: ca.crt
                        }]
                        name: kube-root-ca.crt
                        optional: null
                    }
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: null
                }, class V1VolumeProjection {
                    configMap: null
                    downwardAPI: class V1DownwardAPIProjection {
                        items: [class V1DownwardAPIVolumeFile {
                            fieldRef: class V1ObjectFieldSelector {
                                apiVersion: v1
                                fieldPath: metadata.namespace
                            }
                            mode: null
                            path: namespace
                            resourceFieldRef: null
                        }]
                    }
                    secret: null
                    serviceAccountToken: null
                }]
            }
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }]
    }
    status: class V1PodStatus {
        conditions: [class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:10:51Z
            message: null
            reason: null
            status: True
            type: Initialized
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:23Z
            message: null
            reason: null
            status: True
            type: Ready
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:23Z
            message: null
            reason: null
            status: True
            type: ContainersReady
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:10:51Z
            message: null
            reason: null
            status: True
            type: PodScheduled
        }]
        containerStatuses: [class V1ContainerStatus {
            containerID: containerd://e276af13a7ba8651aaf72cb747822db5cb638470693a16905abc8d043ba507e6
            image: docker.io/rancher/nginx-ingress-controller:nginx-1.2.1-hardened9
            imageID: docker.io/rancher/nginx-ingress-controller@sha256:6be4f6e2c0f4a6fdce39b3c225ef5ad864e8fd0990ce26260719dee3aafcfcf6
            lastState: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://5d8769e94b987e1b0aaa5e7a76b170b9a2ee59449c08c7f2fee59d53be318b02
                    exitCode: 255
                    finishedAt: 2023-02-27T01:40:25Z
                    message: null
                    reason: Unknown
                    signal: null
                    startedAt: 2023-02-02T01:27:58Z
                }
                waiting: null
            }
            name: rke2-ingress-nginx-controller
            ready: true
            restartCount: 29
            started: true
            state: class V1ContainerState {
                running: class V1ContainerStateRunning {
                    startedAt: 2023-02-27T01:41:09Z
                }
                terminated: null
                waiting: null
            }
        }]
        ephemeralContainerStatuses: null
        hostIP: 172.168.113.110
        initContainerStatuses: null
        message: null
        nominatedNodeName: null
        phase: Running
        podIP: 10.42.0.195
        podIPs: [class V1PodIP {
            ip: 10.42.0.195
        }]
        qosClass: Burstable
        reason: null
        startTime: 2022-12-02T09:10:51Z
    }
}
class V1Pod {
    apiVersion: null
    kind: null
    metadata: class V1ObjectMeta {
        annotations: {cni.projectcalico.org/containerID=5a3cf20e22c6e7818a76776581ff55d57cfc4e6c7a866527926bd64a4f6229c0, cni.projectcalico.org/podIP=10.42.0.194/32, cni.projectcalico.org/podIPs=10.42.0.194/32, kubernetes.io/psp=global-unrestricted-psp}
        creationTimestamp: 2022-12-02T09:09:54Z
        deletionGracePeriodSeconds: null
        deletionTimestamp: null
        finalizers: null
        generateName: rke2-metrics-server-67697454f8-
        generation: null
        labels: {app=rke2-metrics-server, pod-template-hash=67697454f8, release=rke2-metrics-server}
        managedFields: [class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={f:cni.projectcalico.org/containerID={}, f:cni.projectcalico.org/podIP={}, f:cni.projectcalico.org/podIPs={}}}}
            manager: calico
            operation: Update
            subresource: status
            time: 2022-12-02T09:09:54Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:generateName={}, f:labels={.={}, f:app={}, f:pod-template-hash={}, f:release={}}, f:ownerReferences={.={}, k:{"uid":"8cf111b6-f780-403e-94a4-ebf4d8505be2"}={}}}, f:spec={f:affinity={}, f:containers={k:{"name":"metrics-server"}={.={}, f:command={}, f:image={}, f:imagePullPolicy={}, f:livenessProbe={.={}, f:failureThreshold={}, f:httpGet={.={}, f:path={}, f:port={}, f:scheme={}}, f:initialDelaySeconds={}, f:periodSeconds={}, f:successThreshold={}, f:timeoutSeconds={}}, f:name={}, f:ports={.={}, k:{"containerPort":10250,"protocol":"TCP"}={.={}, f:containerPort={}, f:name={}, f:protocol={}}}, f:readinessProbe={.={}, f:failureThreshold={}, f:httpGet={.={}, f:path={}, f:port={}, f:scheme={}}, f:initialDelaySeconds={}, f:periodSeconds={}, f:successThreshold={}, f:timeoutSeconds={}}, f:resources={}, f:securityContext={.={}, f:allowPrivilegeEscalation={}, f:capabilities={.={}, f:drop={}}, f:readOnlyRootFilesystem={}, f:runAsGroup={}, f:runAsNonRoot={}, f:runAsUser={}}, f:terminationMessagePath={}, f:terminationMessagePolicy={}, f:volumeMounts={.={}, k:{"mountPath":"/tmp"}={.={}, f:mountPath={}, f:name={}}}}}, f:dnsPolicy={}, f:enableServiceLinks={}, f:nodeSelector={}, f:priorityClassName={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={}, f:serviceAccount={}, f:serviceAccountName={}, f:terminationGracePeriodSeconds={}, f:volumes={.={}, k:{"name":"tmp"}={.={}, f:emptyDir={}, f:name={}}}}}
            manager: kube-controller-manager
            operation: Update
            subresource: null
            time: 2022-12-02T09:09:54Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={k:{"type":"ContainersReady"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Initialized"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Ready"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}}, f:containerStatuses={}, f:hostIP={}, f:phase={}, f:podIP={}, f:podIPs={.={}, k:{"ip":"10.42.0.194"}={.={}, f:ip={}}}, f:startTime={}}}
            manager: kubelet
            operation: Update
            subresource: status
            time: 2023-02-27T01:41:34Z
        }]
        name: rke2-metrics-server-67697454f8-twp2l
        namespace: kube-system
        ownerReferences: [class V1OwnerReference {
            apiVersion: apps/v1
            blockOwnerDeletion: true
            controller: true
            kind: ReplicaSet
            name: rke2-metrics-server-67697454f8
            uid: 8cf111b6-f780-403e-94a4-ebf4d8505be2
        }]
        resourceVersion: 1420626
        selfLink: null
        uid: 7e14c808-fd49-4fa7-8f73-190ef81f96eb
    }
    spec: class V1PodSpec {
        activeDeadlineSeconds: null
        affinity: class V1Affinity {
            nodeAffinity: null
            podAffinity: null
            podAntiAffinity: null
        }
        automountServiceAccountToken: null
        containers: [class V1Container {
            args: null
            command: [/metrics-server, --cert-dir=/tmp, --logtostderr, --secure-port=10250, --kubelet-use-node-status-port, --metric-resolution=15s, --kubelet-preferred-address-types=InternalIP]
            env: null
            envFrom: null
            image: rancher/hardened-k8s-metrics-server:v0.6.1-build20221011
            imagePullPolicy: IfNotPresent
            lifecycle: null
            livenessProbe: class V1Probe {
                exec: null
                failureThreshold: 3
                grpc: null
                httpGet: class V1HTTPGetAction {
                    host: null
                    httpHeaders: null
                    path: /healthz
                    port: https
                    scheme: HTTPS
                }
                initialDelaySeconds: 20
                periodSeconds: 10
                successThreshold: 1
                tcpSocket: null
                terminationGracePeriodSeconds: null
                timeoutSeconds: 1
            }
            name: metrics-server
            ports: [class V1ContainerPort {
                containerPort: 10250
                hostIP: null
                hostPort: null
                name: https
                protocol: TCP
            }]
            readinessProbe: class V1Probe {
                exec: null
                failureThreshold: 3
                grpc: null
                httpGet: class V1HTTPGetAction {
                    host: null
                    httpHeaders: null
                    path: /healthz
                    port: https
                    scheme: HTTPS
                }
                initialDelaySeconds: 20
                periodSeconds: 10
                successThreshold: 1
                tcpSocket: null
                terminationGracePeriodSeconds: null
                timeoutSeconds: 1
            }
            resources: class V1ResourceRequirements {
                limits: null
                requests: null
            }
            securityContext: class V1SecurityContext {
                allowPrivilegeEscalation: false
                capabilities: class V1Capabilities {
                    add: null
                    drop: [all]
                }
                privileged: null
                procMount: null
                readOnlyRootFilesystem: true
                runAsGroup: 10001
                runAsNonRoot: true
                runAsUser: 10001
                seLinuxOptions: null
                seccompProfile: null
                windowsOptions: null
            }
            startupProbe: null
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /tmp
                mountPropagation: null
                name: tmp
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                mountPropagation: null
                name: kube-api-access-6g7r9
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }]
        dnsConfig: null
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        ephemeralContainers: null
        hostAliases: null
        hostIPC: null
        hostNetwork: null
        hostPID: null
        hostUsers: null
        hostname: null
        imagePullSecrets: null
        initContainers: null
        nodeName: rke2-server4
        nodeSelector: {kubernetes.io/os=linux}
        os: null
        overhead: null
        preemptionPolicy: PreemptLowerPriority
        priority: 2000001000
        priorityClassName: system-node-critical
        readinessGates: null
        restartPolicy: Always
        runtimeClassName: null
        schedulerName: default-scheduler
        securityContext: class V1PodSecurityContext {
            fsGroup: null
            fsGroupChangePolicy: null
            runAsGroup: null
            runAsNonRoot: null
            runAsUser: null
            seLinuxOptions: null
            seccompProfile: null
            supplementalGroups: null
            sysctls: null
            windowsOptions: null
        }
        serviceAccount: rke2-metrics-server
        serviceAccountName: rke2-metrics-server
        setHostnameAsFQDN: null
        shareProcessNamespace: null
        subdomain: null
        terminationGracePeriodSeconds: 30
        tolerations: [class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/not-ready
            operator: Exists
            tolerationSeconds: 300
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/unreachable
            operator: Exists
            tolerationSeconds: 300
            value: null
        }]
        topologySpreadConstraints: null
        volumes: [class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: class V1EmptyDirVolumeSource {
                medium: null
                sizeLimit: null
            }
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: tmp
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: kube-api-access-6g7r9
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: class V1ProjectedVolumeSource {
                defaultMode: 420
                sources: [class V1VolumeProjection {
                    configMap: null
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: class V1ServiceAccountTokenProjection {
                        audience: null
                        expirationSeconds: 3607
                        path: token
                    }
                }, class V1VolumeProjection {
                    configMap: class V1ConfigMapProjection {
                        items: [class V1KeyToPath {
                            key: ca.crt
                            mode: null
                            path: ca.crt
                        }]
                        name: kube-root-ca.crt
                        optional: null
                    }
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: null
                }, class V1VolumeProjection {
                    configMap: null
                    downwardAPI: class V1DownwardAPIProjection {
                        items: [class V1DownwardAPIVolumeFile {
                            fieldRef: class V1ObjectFieldSelector {
                                apiVersion: v1
                                fieldPath: metadata.namespace
                            }
                            mode: null
                            path: namespace
                            resourceFieldRef: null
                        }]
                    }
                    secret: null
                    serviceAccountToken: null
                }]
            }
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }]
    }
    status: class V1PodStatus {
        conditions: [class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:09:54Z
            message: null
            reason: null
            status: True
            type: Initialized
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:34Z
            message: null
            reason: null
            status: True
            type: Ready
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:34Z
            message: null
            reason: null
            status: True
            type: ContainersReady
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-02T09:09:54Z
            message: null
            reason: null
            status: True
            type: PodScheduled
        }]
        containerStatuses: [class V1ContainerStatus {
            containerID: containerd://ecefc455003773ea875eff94d31259d823c345774824d51bd81ad3712e3a74b4
            image: docker.io/rancher/hardened-k8s-metrics-server:v0.6.1-build20221011
            imageID: docker.io/rancher/hardened-k8s-metrics-server@sha256:2d970ba32946f6c2b5f46cae4f5219d4539d4310ac0a4542ca13e4233bd8f4a8
            lastState: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://d3c2f6cc4dde3d58ba6e80d4e2e294bd157577b20323e41df602889925d110ff
                    exitCode: 255
                    finishedAt: 2023-02-27T01:40:25Z
                    message: null
                    reason: Unknown
                    signal: null
                    startedAt: 2023-02-02T01:27:58Z
                }
                waiting: null
            }
            name: metrics-server
            ready: true
            restartCount: 31
            started: true
            state: class V1ContainerState {
                running: class V1ContainerStateRunning {
                    startedAt: 2023-02-27T01:41:08Z
                }
                terminated: null
                waiting: null
            }
        }]
        ephemeralContainerStatuses: null
        hostIP: 172.168.113.110
        initContainerStatuses: null
        message: null
        nominatedNodeName: null
        phase: Running
        podIP: 10.42.0.194
        podIPs: [class V1PodIP {
            ip: 10.42.0.194
        }]
        qosClass: BestEffort
        reason: null
        startTime: 2022-12-02T09:09:54Z
    }
}
class V1Pod {
    apiVersion: null
    kind: null
    metadata: class V1ObjectMeta {
        annotations: {kubectl.kubernetes.io/default-container=node-exporter, kubernetes.io/psp=global-unrestricted-psp}
        creationTimestamp: 2023-01-30T02:40:20Z
        deletionGracePeriodSeconds: null
        deletionTimestamp: null
        finalizers: null
        generateName: node-exporter-
        generation: null
        labels: {app.kubernetes.io/component=exporter, app.kubernetes.io/name=node-exporter, app.kubernetes.io/part-of=kube-prometheus, app.kubernetes.io/version=1.5.0, controller-revision-hash=fcfcd4f4b, pod-template-generation=19}
        managedFields: [class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={.={}, f:kubectl.kubernetes.io/default-container={}}, f:generateName={}, f:labels={.={}, f:app.kubernetes.io/component={}, f:app.kubernetes.io/name={}, f:app.kubernetes.io/part-of={}, f:app.kubernetes.io/version={}, f:controller-revision-hash={}, f:pod-template-generation={}}, f:ownerReferences={.={}, k:{"uid":"62428ceb-9183-4770-b7fb-89d5f3218cfe"}={}}}, f:spec={f:affinity={.={}, f:nodeAffinity={.={}, f:requiredDuringSchedulingIgnoredDuringExecution={}}}, f:automountServiceAccountToken={}, f:containers={k:{"name":"kube-rbac-proxy"}={.={}, f:args={}, f:env={.={}, k:{"name":"IP"}={.={}, f:name={}, f:valueFrom={.={}, f:fieldRef={}}}, k:{"name":"NODE_IP"}={.={}, f:name={}, f:valueFrom={.={}, f:fieldRef={}}}}, f:image={}, f:imagePullPolicy={}, f:name={}, f:ports={.={}, k:{"containerPort":9100,"protocol":"TCP"}={.={}, f:containerPort={}, f:hostPort={}, f:name={}, f:protocol={}}}, f:resources={.={}, f:limits={.={}, f:cpu={}, f:memory={}}, f:requests={.={}, f:cpu={}, f:memory={}}}, f:securityContext={.={}, f:allowPrivilegeEscalation={}, f:capabilities={.={}, f:drop={}}, f:readOnlyRootFilesystem={}, f:runAsGroup={}, f:runAsNonRoot={}, f:runAsUser={}}, f:terminationMessagePath={}, f:terminationMessagePolicy={}}, k:{"name":"node-exporter"}={.={}, f:args={}, f:env={.={}, k:{"name":"IP"}={.={}, f:name={}, f:valueFrom={.={}, f:fieldRef={}}}, k:{"name":"NODE_IP"}={.={}, f:name={}, f:valueFrom={.={}, f:fieldRef={}}}}, f:image={}, f:imagePullPolicy={}, f:name={}, f:resources={.={}, f:limits={.={}, f:cpu={}, f:memory={}}, f:requests={.={}, f:cpu={}, f:memory={}}}, f:securityContext={.={}, f:allowPrivilegeEscalation={}, f:capabilities={.={}, f:add={}, f:drop={}}, f:readOnlyRootFilesystem={}}, f:terminationMessagePath={}, f:terminationMessagePolicy={}, f:volumeMounts={.={}, k:{"mountPath":"/host/root"}={.={}, f:mountPath={}, f:mountPropagation={}, f:name={}, f:readOnly={}}, k:{"mountPath":"/host/sys"}={.={}, f:mountPath={}, f:mountPropagation={}, f:name={}, f:readOnly={}}}}}, f:dnsPolicy={}, f:enableServiceLinks={}, f:hostNetwork={}, f:hostPID={}, f:nodeSelector={}, f:priorityClassName={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={.={}, f:runAsNonRoot={}, f:runAsUser={}}, f:serviceAccount={}, f:serviceAccountName={}, f:terminationGracePeriodSeconds={}, f:tolerations={}, f:volumes={.={}, k:{"name":"root"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"sys"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}}}}
            manager: kube-controller-manager
            operation: Update
            subresource: null
            time: 2023-01-30T02:40:20Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={k:{"type":"ContainersReady"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Initialized"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Ready"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}}, f:containerStatuses={}, f:hostIP={}, f:phase={}, f:podIP={}, f:podIPs={.={}, k:{"ip":"172.168.113.110"}={.={}, f:ip={}}}, f:startTime={}}}
            manager: kubelet
            operation: Update
            subresource: status
            time: 2023-02-27T01:41:01Z
        }]
        name: node-exporter-8vl58
        namespace: monitoring
        ownerReferences: [class V1OwnerReference {
            apiVersion: apps/v1
            blockOwnerDeletion: true
            controller: true
            kind: DaemonSet
            name: node-exporter
            uid: 62428ceb-9183-4770-b7fb-89d5f3218cfe
        }]
        resourceVersion: 1420421
        selfLink: null
        uid: 429b9378-1a48-46be-a689-bb6d663463f8
    }
    spec: class V1PodSpec {
        activeDeadlineSeconds: null
        affinity: class V1Affinity {
            nodeAffinity: class V1NodeAffinity {
                preferredDuringSchedulingIgnoredDuringExecution: null
                requiredDuringSchedulingIgnoredDuringExecution: class V1NodeSelector {
                    nodeSelectorTerms: [class V1NodeSelectorTerm {
                        matchExpressions: null
                        matchFields: [class V1NodeSelectorRequirement {
                            key: metadata.name
                            operator: In
                            values: [rke2-server4]
                        }]
                    }]
                }
            }
            podAffinity: null
            podAntiAffinity: null
        }
        automountServiceAccountToken: true
        containers: [class V1Container {
            args: [--web.listen-address=[$(NODE_IP)]:9100, --path.sysfs=/host/sys, --path.rootfs=/host/root, --path.udev.data=/host/root/run/udev/data, --no-collector.wifi, --no-collector.hwmon, --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|run/k3s/containerd/.+|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/), --collector.netclass.ignored-devices=^(veth.*|[a-f0-9]{15})$, --collector.netdev.device-exclude=^(veth.*|[a-f0-9]{15})$]
            command: null
            env: [class V1EnvVar {
                name: NODE_IP
                value: null
                valueFrom: class V1EnvVarSource {
                    configMapKeyRef: null
                    fieldRef: class V1ObjectFieldSelector {
                        apiVersion: v1
                        fieldPath: status.hostIP
                    }
                    resourceFieldRef: null
                    secretKeyRef: null
                }
            }, class V1EnvVar {
                name: IP
                value: null
                valueFrom: class V1EnvVarSource {
                    configMapKeyRef: null
                    fieldRef: class V1ObjectFieldSelector {
                        apiVersion: v1
                        fieldPath: status.podIP
                    }
                    resourceFieldRef: null
                    secretKeyRef: null
                }
            }]
            envFrom: null
            image: quay.io/prometheus/node-exporter:v1.5.0
            imagePullPolicy: IfNotPresent
            lifecycle: null
            livenessProbe: null
            name: node-exporter
            ports: null
            readinessProbe: null
            resources: class V1ResourceRequirements {
                limits: {cpu=Quantity{number=0.250, format=DECIMAL_SI}, memory=Quantity{number=188743680, format=BINARY_SI}}
                requests: {cpu=Quantity{number=0.102, format=DECIMAL_SI}, memory=Quantity{number=188743680, format=BINARY_SI}}
            }
            securityContext: class V1SecurityContext {
                allowPrivilegeEscalation: false
                capabilities: class V1Capabilities {
                    add: [SYS_TIME]
                    drop: [ALL]
                }
                privileged: null
                procMount: null
                readOnlyRootFilesystem: true
                runAsGroup: null
                runAsNonRoot: null
                runAsUser: null
                seLinuxOptions: null
                seccompProfile: null
                windowsOptions: null
            }
            startupProbe: null
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /host/sys
                mountPropagation: HostToContainer
                name: sys
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /host/root
                mountPropagation: HostToContainer
                name: root
                readOnly: true
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                mountPropagation: null
                name: kube-api-access-bmb65
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }, class V1Container {
            args: [--logtostderr, --secure-listen-address=127.0.0.1:9100, --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305, --upstream=http://[$(IP)]:9100/]
            command: null
            env: [class V1EnvVar {
                name: NODE_IP
                value: null
                valueFrom: class V1EnvVarSource {
                    configMapKeyRef: null
                    fieldRef: class V1ObjectFieldSelector {
                        apiVersion: v1
                        fieldPath: status.hostIP
                    }
                    resourceFieldRef: null
                    secretKeyRef: null
                }
            }, class V1EnvVar {
                name: IP
                value: null
                valueFrom: class V1EnvVarSource {
                    configMapKeyRef: null
                    fieldRef: class V1ObjectFieldSelector {
                        apiVersion: v1
                        fieldPath: status.podIP
                    }
                    resourceFieldRef: null
                    secretKeyRef: null
                }
            }]
            envFrom: null
            image: quay.io/brancz/kube-rbac-proxy:v0.14.0
            imagePullPolicy: IfNotPresent
            lifecycle: null
            livenessProbe: null
            name: kube-rbac-proxy
            ports: [class V1ContainerPort {
                containerPort: 9100
                hostIP: null
                hostPort: 9100
                name: https
                protocol: TCP
            }]
            readinessProbe: null
            resources: class V1ResourceRequirements {
                limits: {cpu=Quantity{number=0.020, format=DECIMAL_SI}, memory=Quantity{number=41943040, format=BINARY_SI}}
                requests: {cpu=Quantity{number=0.010, format=DECIMAL_SI}, memory=Quantity{number=20971520, format=BINARY_SI}}
            }
            securityContext: class V1SecurityContext {
                allowPrivilegeEscalation: false
                capabilities: class V1Capabilities {
                    add: null
                    drop: [ALL]
                }
                privileged: null
                procMount: null
                readOnlyRootFilesystem: true
                runAsGroup: 65532
                runAsNonRoot: true
                runAsUser: 65532
                seLinuxOptions: null
                seccompProfile: null
                windowsOptions: null
            }
            startupProbe: null
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                mountPropagation: null
                name: kube-api-access-bmb65
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }]
        dnsConfig: null
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        ephemeralContainers: null
        hostAliases: null
        hostIPC: null
        hostNetwork: true
        hostPID: true
        hostUsers: null
        hostname: null
        imagePullSecrets: null
        initContainers: null
        nodeName: rke2-server4
        nodeSelector: {kubernetes.io/os=linux}
        os: null
        overhead: null
        preemptionPolicy: PreemptLowerPriority
        priority: 2000000000
        priorityClassName: system-cluster-critical
        readinessGates: null
        restartPolicy: Always
        runtimeClassName: null
        schedulerName: default-scheduler
        securityContext: class V1PodSecurityContext {
            fsGroup: null
            fsGroupChangePolicy: null
            runAsGroup: null
            runAsNonRoot: true
            runAsUser: 65534
            seLinuxOptions: null
            seccompProfile: null
            supplementalGroups: null
            sysctls: null
            windowsOptions: null
        }
        serviceAccount: node-exporter
        serviceAccountName: node-exporter
        setHostnameAsFQDN: null
        shareProcessNamespace: null
        subdomain: null
        terminationGracePeriodSeconds: 30
        tolerations: [class V1Toleration {
            effect: null
            key: null
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/not-ready
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/unreachable
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node.kubernetes.io/disk-pressure
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node.kubernetes.io/memory-pressure
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node.kubernetes.io/pid-pressure
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node.kubernetes.io/unschedulable
            operator: Exists
            tolerationSeconds: null
            value: null
        }, class V1Toleration {
            effect: NoSchedule
            key: node.kubernetes.io/network-unavailable
            operator: Exists
            tolerationSeconds: null
            value: null
        }]
        topologySpreadConstraints: null
        volumes: [class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /sys
                type: 
            }
            iscsi: null
            name: sys
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /
                type: 
            }
            iscsi: null
            name: root
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: kube-api-access-bmb65
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: class V1ProjectedVolumeSource {
                defaultMode: 420
                sources: [class V1VolumeProjection {
                    configMap: null
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: class V1ServiceAccountTokenProjection {
                        audience: null
                        expirationSeconds: 3607
                        path: token
                    }
                }, class V1VolumeProjection {
                    configMap: class V1ConfigMapProjection {
                        items: [class V1KeyToPath {
                            key: ca.crt
                            mode: null
                            path: ca.crt
                        }]
                        name: kube-root-ca.crt
                        optional: null
                    }
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: null
                }, class V1VolumeProjection {
                    configMap: null
                    downwardAPI: class V1DownwardAPIProjection {
                        items: [class V1DownwardAPIVolumeFile {
                            fieldRef: class V1ObjectFieldSelector {
                                apiVersion: v1
                                fieldPath: metadata.namespace
                            }
                            mode: null
                            path: namespace
                            resourceFieldRef: null
                        }]
                    }
                    secret: null
                    serviceAccountToken: null
                }]
            }
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }]
    }
    status: class V1PodStatus {
        conditions: [class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-01-30T02:40:20Z
            message: null
            reason: null
            status: True
            type: Initialized
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:01Z
            message: null
            reason: null
            status: True
            type: Ready
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:01Z
            message: null
            reason: null
            status: True
            type: ContainersReady
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-01-30T02:40:20Z
            message: null
            reason: null
            status: True
            type: PodScheduled
        }]
        containerStatuses: [class V1ContainerStatus {
            containerID: containerd://259f36f781a431d98fd3094507986707a984a359c4a7312712227dcc0feb53da
            image: quay.io/brancz/kube-rbac-proxy:v0.14.0
            imageID: quay.io/brancz/kube-rbac-proxy@sha256:4ba7351a4d1efb50a03990697de7efbc51c6c02149f97b11f15d8f9953faf45e
            lastState: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://4e07f6e2d7aa1acd7a7d7460be6ab5ea768c437f8b7bbac8872e4e131d5919d7
                    exitCode: 255
                    finishedAt: 2023-02-27T01:40:25Z
                    message: null
                    reason: Unknown
                    signal: null
                    startedAt: 2023-02-02T01:27:47Z
                }
                waiting: null
            }
            name: kube-rbac-proxy
            ready: true
            restartCount: 4
            started: true
            state: class V1ContainerState {
                running: class V1ContainerStateRunning {
                    startedAt: 2023-02-27T01:41Z
                }
                terminated: null
                waiting: null
            }
        }, class V1ContainerStatus {
            containerID: containerd://2e38e20f6172d3185115188f33915eb551798103c3ad2b2cd7aa6308c255d5f0
            image: quay.io/prometheus/node-exporter:v1.5.0
            imageID: quay.io/prometheus/node-exporter@sha256:39c642b2b337e38c18e80266fb14383754178202f40103646337722a594d984c
            lastState: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://f5da569ceee3cad08e13130f38ecd8e5bf8676cd1f3a1919163f98e6f7b1c846
                    exitCode: 255
                    finishedAt: 2023-02-27T01:40:25Z
                    message: null
                    reason: Unknown
                    signal: null
                    startedAt: 2023-02-02T01:27:46Z
                }
                waiting: null
            }
            name: node-exporter
            ready: true
            restartCount: 4
            started: true
            state: class V1ContainerState {
                running: class V1ContainerStateRunning {
                    startedAt: 2023-02-27T01:41Z
                }
                terminated: null
                waiting: null
            }
        }]
        ephemeralContainerStatuses: null
        hostIP: 172.168.113.110
        initContainerStatuses: null
        message: null
        nominatedNodeName: null
        phase: Running
        podIP: 172.168.113.110
        podIPs: [class V1PodIP {
            ip: 172.168.113.110
        }]
        qosClass: Burstable
        reason: null
        startTime: 2023-01-30T02:40:20Z
    }
}
class V1Pod {
    apiVersion: null
    kind: null
    metadata: class V1ObjectMeta {
        annotations: {cni.projectcalico.org/containerID=5ea4965077cf986e3a95c95a1f83bb4ddd3d586698edd8e4396f62004907a99f, cni.projectcalico.org/podIP=10.42.0.196/32, cni.projectcalico.org/podIPs=10.42.0.196/32, kubernetes.io/psp=global-unrestricted-psp}
        creationTimestamp: 2022-12-22T07:10:43Z
        deletionGracePeriodSeconds: null
        deletionTimestamp: null
        finalizers: null
        generateName: sql-stateful-
        generation: null
        labels: {app=sqllabs, component=sql-component, controller-revision-hash=sql-stateful-58f94cf94f, statefulset.kubernetes.io/pod-name=sql-stateful-0}
        managedFields: [class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:generateName={}, f:labels={.={}, f:app={}, f:component={}, f:controller-revision-hash={}, f:statefulset.kubernetes.io/pod-name={}}, f:ownerReferences={.={}, k:{"uid":"318f40ca-e084-4e84-b36b-4f5110967d91"}={}}}, f:spec={f:containers={k:{"name":"sql-db"}={.={}, f:env={.={}, k:{"name":"ACCEPT_EULA"}={.={}, f:name={}, f:valueFrom={.={}, f:configMapKeyRef={}}}, k:{"name":"MSSQL_PID"}={.={}, f:name={}, f:valueFrom={.={}, f:configMapKeyRef={}}}, k:{"name":"MSSQL_SA_PASSWORD"}={.={}, f:name={}, f:valueFrom={.={}, f:configMapKeyRef={}}}}, f:image={}, f:imagePullPolicy={}, f:name={}, f:ports={.={}, k:{"containerPort":1443,"protocol":"TCP"}={.={}, f:containerPort={}, f:protocol={}}}, f:resources={}, f:terminationMessagePath={}, f:terminationMessagePolicy={}, f:volumeMounts={.={}, k:{"mountPath":"/opt/sql-db"}={.={}, f:mountPath={}, f:name={}}}}}, f:dnsPolicy={}, f:enableServiceLinks={}, f:hostname={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={.={}, f:fsGroup={}}, f:subdomain={}, f:terminationGracePeriodSeconds={}, f:volumes={.={}, k:{"name":"mssql-db"}={.={}, f:name={}, f:persistentVolumeClaim={.={}, f:claimName={}}}, k:{"name":"sql-config"}={.={}, f:configMap={.={}, f:defaultMode={}, f:name={}}, f:name={}}}}}
            manager: kube-controller-manager
            operation: Update
            subresource: null
            time: 2022-12-22T07:10:43Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={f:cni.projectcalico.org/containerID={}, f:cni.projectcalico.org/podIP={}, f:cni.projectcalico.org/podIPs={}}}}
            manager: calico
            operation: Update
            subresource: status
            time: 2022-12-22T07:10:45Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={k:{"type":"ContainersReady"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Initialized"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Ready"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}}, f:containerStatuses={}, f:hostIP={}, f:phase={}, f:podIP={}, f:podIPs={.={}, k:{"ip":"10.42.0.196"}={.={}, f:ip={}}}, f:startTime={}}}
            manager: kubelet
            operation: Update
            subresource: status
            time: 2023-02-27T01:41:17Z
        }]
        name: sql-stateful-0
        namespace: sql-ns
        ownerReferences: [class V1OwnerReference {
            apiVersion: apps/v1
            blockOwnerDeletion: true
            controller: true
            kind: StatefulSet
            name: sql-stateful
            uid: 318f40ca-e084-4e84-b36b-4f5110967d91
        }]
        resourceVersion: 1420526
        selfLink: null
        uid: 2b6cdf0b-8e6f-4630-99e3-b72aecc59431
    }
    spec: class V1PodSpec {
        activeDeadlineSeconds: null
        affinity: null
        automountServiceAccountToken: null
        containers: [class V1Container {
            args: null
            command: null
            env: [class V1EnvVar {
                name: MSSQL_PID
                value: null
                valueFrom: class V1EnvVarSource {
                    configMapKeyRef: class V1ConfigMapKeySelector {
                        key: MSSQL_PID
                        name: sql-configmap
                        optional: null
                    }
                    fieldRef: null
                    resourceFieldRef: null
                    secretKeyRef: null
                }
            }, class V1EnvVar {
                name: ACCEPT_EULA
                value: null
                valueFrom: class V1EnvVarSource {
                    configMapKeyRef: class V1ConfigMapKeySelector {
                        key: ACCEPT_EULA
                        name: sql-configmap
                        optional: null
                    }
                    fieldRef: null
                    resourceFieldRef: null
                    secretKeyRef: null
                }
            }, class V1EnvVar {
                name: MSSQL_SA_PASSWORD
                value: null
                valueFrom: class V1EnvVarSource {
                    configMapKeyRef: class V1ConfigMapKeySelector {
                        key: MSSQL_SA_PASSWORD
                        name: sql-configmap
                        optional: null
                    }
                    fieldRef: null
                    resourceFieldRef: null
                    secretKeyRef: null
                }
            }]
            envFrom: null
            image: mcr.microsoft.com/mssql/server:2019-latest
            imagePullPolicy: IfNotPresent
            lifecycle: null
            livenessProbe: null
            name: sql-db
            ports: [class V1ContainerPort {
                containerPort: 1443
                hostIP: null
                hostPort: null
                name: null
                protocol: TCP
            }]
            readinessProbe: null
            resources: class V1ResourceRequirements {
                limits: null
                requests: null
            }
            securityContext: null
            startupProbe: null
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /opt/sql-db
                mountPropagation: null
                name: sql-config
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                mountPropagation: null
                name: kube-api-access-wxslw
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }]
        dnsConfig: null
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        ephemeralContainers: null
        hostAliases: null
        hostIPC: null
        hostNetwork: null
        hostPID: null
        hostUsers: null
        hostname: sql-stateful-0
        imagePullSecrets: null
        initContainers: null
        nodeName: rke2-server4
        nodeSelector: null
        os: null
        overhead: null
        preemptionPolicy: PreemptLowerPriority
        priority: 0
        priorityClassName: null
        readinessGates: null
        restartPolicy: Always
        runtimeClassName: null
        schedulerName: default-scheduler
        securityContext: class V1PodSecurityContext {
            fsGroup: 10001
            fsGroupChangePolicy: null
            runAsGroup: null
            runAsNonRoot: null
            runAsUser: null
            seLinuxOptions: null
            seccompProfile: null
            supplementalGroups: null
            sysctls: null
            windowsOptions: null
        }
        serviceAccount: default
        serviceAccountName: default
        setHostnameAsFQDN: null
        shareProcessNamespace: null
        subdomain: sqlserver-server
        terminationGracePeriodSeconds: 30
        tolerations: [class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/not-ready
            operator: Exists
            tolerationSeconds: 300
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/unreachable
            operator: Exists
            tolerationSeconds: 300
            value: null
        }]
        topologySpreadConstraints: null
        volumes: [class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: class V1ConfigMapVolumeSource {
                defaultMode: 420
                items: null
                name: sql-configmap
                optional: null
            }
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: sql-config
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: mssql-db
            nfs: null
            persistentVolumeClaim: class V1PersistentVolumeClaimVolumeSource {
                claimName: sql-persist-data
                readOnly: null
            }
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: kube-api-access-wxslw
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: class V1ProjectedVolumeSource {
                defaultMode: 420
                sources: [class V1VolumeProjection {
                    configMap: null
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: class V1ServiceAccountTokenProjection {
                        audience: null
                        expirationSeconds: 3607
                        path: token
                    }
                }, class V1VolumeProjection {
                    configMap: class V1ConfigMapProjection {
                        items: [class V1KeyToPath {
                            key: ca.crt
                            mode: null
                            path: ca.crt
                        }]
                        name: kube-root-ca.crt
                        optional: null
                    }
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: null
                }, class V1VolumeProjection {
                    configMap: null
                    downwardAPI: class V1DownwardAPIProjection {
                        items: [class V1DownwardAPIVolumeFile {
                            fieldRef: class V1ObjectFieldSelector {
                                apiVersion: v1
                                fieldPath: metadata.namespace
                            }
                            mode: null
                            path: namespace
                            resourceFieldRef: null
                        }]
                    }
                    secret: null
                    serviceAccountToken: null
                }]
            }
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }]
    }
    status: class V1PodStatus {
        conditions: [class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-22T07:10:44Z
            message: null
            reason: null
            status: True
            type: Initialized
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:17Z
            message: null
            reason: null
            status: True
            type: Ready
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:17Z
            message: null
            reason: null
            status: True
            type: ContainersReady
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-22T07:10:44Z
            message: null
            reason: null
            status: True
            type: PodScheduled
        }]
        containerStatuses: [class V1ContainerStatus {
            containerID: containerd://d4b16b006e00ca4d4874ee55e08bf4a8fb063076817aa82615844ec318b02607
            image: mcr.microsoft.com/mssql/server:2019-latest
            imageID: mcr.microsoft.com/mssql/server@sha256:f57d743a99a4003a085d0fd67dbb5ecf98812c08a616697a065082cad68d77ce
            lastState: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://a455a4ad483b554b343886675f4cfab94df5c46b3b0bdf3f7abfbe10d64014fd
                    exitCode: 255
                    finishedAt: 2023-02-27T01:40:25Z
                    message: null
                    reason: Unknown
                    signal: null
                    startedAt: 2023-02-02T01:28:09Z
                }
                waiting: null
            }
            name: sql-db
            ready: true
            restartCount: 22
            started: true
            state: class V1ContainerState {
                running: class V1ContainerStateRunning {
                    startedAt: 2023-02-27T01:41:17Z
                }
                terminated: null
                waiting: null
            }
        }]
        ephemeralContainerStatuses: null
        hostIP: 172.168.113.110
        initContainerStatuses: null
        message: null
        nominatedNodeName: null
        phase: Running
        podIP: 10.42.0.196
        podIPs: [class V1PodIP {
            ip: 10.42.0.196
        }]
        qosClass: BestEffort
        reason: null
        startTime: 2022-12-22T07:10:44Z
    }
}
class V1Pod {
    apiVersion: null
    kind: null
    metadata: class V1ObjectMeta {
        annotations: {cni.projectcalico.org/containerID=11f25ea408b8c749048185b031088cb978cb6f488e4d0e35c3017fbbf10f6334, cni.projectcalico.org/podIP=10.42.0.197/32, cni.projectcalico.org/podIPs=10.42.0.197/32, kubectl.kubernetes.io/last-applied-configuration={"apiVersion":"v1","kind":"Pod","metadata":{"annotations":{},"labels":{"app":"tibco-app"},"name":"tibco-app","namespace":"tibco-ns"},"spec":{"containers":[{"env":[{"name":"LD_LIBRARY_PATH","value":"/opt/tibco/tibrv/8.5/bin"}],"image":"nginx","name":"tbico-app","ports":[{"containerPort":7500,"name":"tibco-http","protocol":"TCP"}],"volumeMounts":[{"mountPath":"/tbc","name":"sh-dir"},{"mountPath":"/opt/tibco/tibrv/8.5","name":"tbico-dir"},{"mountPath":"/java","name":"java-home"},{"mountPath":"/usr/share","name":"java-file"}]}],"volumes":[{"hostPath":{"path":"/usr/share","type":"Directory"},"name":"java-file"},{"hostPath":{"path":"/usr/lib/jvm/java-11-openjdk-11.0.17.0.8-2.el8_6.x86_64/","type":"Directory"},"name":"java-home"},{"hostPath":{"path":"/opt/tibco/tibrv/8.5","type":"Directory"},"name":"tbico-dir"},{"hostPath":{"path":"/root/testYaml","type":"Directory"},"name":"sh-dir"}]}}
        , kubernetes.io/psp=global-unrestricted-psp}
        creationTimestamp: 2022-12-08T05:43:49Z
        deletionGracePeriodSeconds: null
        deletionTimestamp: null
        finalizers: null
        generateName: null
        generation: null
        labels: {app=tibco-app}
        managedFields: [class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={f:cni.projectcalico.org/containerID={}, f:cni.projectcalico.org/podIP={}, f:cni.projectcalico.org/podIPs={}}}}
            manager: calico
            operation: Update
            subresource: status
            time: 2022-12-08T05:43:49Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:metadata={f:annotations={.={}, f:kubectl.kubernetes.io/last-applied-configuration={}}, f:labels={.={}, f:app={}}}, f:spec={f:containers={k:{"name":"tbico-app"}={.={}, f:env={.={}, k:{"name":"LD_LIBRARY_PATH"}={.={}, f:name={}, f:value={}}}, f:image={}, f:imagePullPolicy={}, f:name={}, f:ports={.={}, k:{"containerPort":7500,"protocol":"TCP"}={.={}, f:containerPort={}, f:name={}, f:protocol={}}}, f:resources={}, f:terminationMessagePath={}, f:terminationMessagePolicy={}, f:volumeMounts={.={}, k:{"mountPath":"/java"}={.={}, f:mountPath={}, f:name={}}, k:{"mountPath":"/opt/tibco/tibrv/8.5"}={.={}, f:mountPath={}, f:name={}}, k:{"mountPath":"/tbc"}={.={}, f:mountPath={}, f:name={}}, k:{"mountPath":"/usr/share"}={.={}, f:mountPath={}, f:name={}}}}}, f:dnsPolicy={}, f:enableServiceLinks={}, f:restartPolicy={}, f:schedulerName={}, f:securityContext={}, f:terminationGracePeriodSeconds={}, f:volumes={.={}, k:{"name":"java-file"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"java-home"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"sh-dir"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}, k:{"name":"tbico-dir"}={.={}, f:hostPath={.={}, f:path={}, f:type={}}, f:name={}}}}}
            manager: kubectl-client-side-apply
            operation: Update
            subresource: null
            time: 2022-12-08T05:43:49Z
        }, class V1ManagedFieldsEntry {
            apiVersion: v1
            fieldsType: FieldsV1
            fieldsV1: {f:status={f:conditions={k:{"type":"ContainersReady"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Initialized"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}, k:{"type":"Ready"}={.={}, f:lastProbeTime={}, f:lastTransitionTime={}, f:status={}, f:type={}}}, f:containerStatuses={}, f:hostIP={}, f:phase={}, f:podIP={}, f:podIPs={.={}, k:{"ip":"10.42.0.197"}={.={}, f:ip={}}}, f:startTime={}}}
            manager: kubelet
            operation: Update
            subresource: status
            time: 2023-02-27T01:41:47Z
        }]
        name: tibco-app
        namespace: tibco-ns
        ownerReferences: null
        resourceVersion: 1420678
        selfLink: null
        uid: bf576087-849d-4ca8-b2b1-fa9986ccdfbc
    }
    spec: class V1PodSpec {
        activeDeadlineSeconds: null
        affinity: null
        automountServiceAccountToken: null
        containers: [class V1Container {
            args: null
            command: null
            env: [class V1EnvVar {
                name: LD_LIBRARY_PATH
                value: /opt/tibco/tibrv/8.5/bin
                valueFrom: null
            }]
            envFrom: null
            image: nginx
            imagePullPolicy: Always
            lifecycle: null
            livenessProbe: null
            name: tbico-app
            ports: [class V1ContainerPort {
                containerPort: 7500
                hostIP: null
                hostPort: null
                name: tibco-http
                protocol: TCP
            }]
            readinessProbe: null
            resources: class V1ResourceRequirements {
                limits: null
                requests: null
            }
            securityContext: null
            startupProbe: null
            stdin: null
            stdinOnce: null
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            tty: null
            volumeDevices: null
            volumeMounts: [class V1VolumeMount {
                mountPath: /tbc
                mountPropagation: null
                name: sh-dir
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /opt/tibco/tibrv/8.5
                mountPropagation: null
                name: tbico-dir
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /java
                mountPropagation: null
                name: java-home
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /usr/share
                mountPropagation: null
                name: java-file
                readOnly: null
                subPath: null
                subPathExpr: null
            }, class V1VolumeMount {
                mountPath: /var/run/secrets/kubernetes.io/serviceaccount
                mountPropagation: null
                name: kube-api-access-s5dsf
                readOnly: true
                subPath: null
                subPathExpr: null
            }]
            workingDir: null
        }]
        dnsConfig: null
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        ephemeralContainers: null
        hostAliases: null
        hostIPC: null
        hostNetwork: null
        hostPID: null
        hostUsers: null
        hostname: null
        imagePullSecrets: null
        initContainers: null
        nodeName: rke2-server4
        nodeSelector: null
        os: null
        overhead: null
        preemptionPolicy: PreemptLowerPriority
        priority: 0
        priorityClassName: null
        readinessGates: null
        restartPolicy: Always
        runtimeClassName: null
        schedulerName: default-scheduler
        securityContext: class V1PodSecurityContext {
            fsGroup: null
            fsGroupChangePolicy: null
            runAsGroup: null
            runAsNonRoot: null
            runAsUser: null
            seLinuxOptions: null
            seccompProfile: null
            supplementalGroups: null
            sysctls: null
            windowsOptions: null
        }
        serviceAccount: default
        serviceAccountName: default
        setHostnameAsFQDN: null
        shareProcessNamespace: null
        subdomain: null
        terminationGracePeriodSeconds: 30
        tolerations: [class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/not-ready
            operator: Exists
            tolerationSeconds: 300
            value: null
        }, class V1Toleration {
            effect: NoExecute
            key: node.kubernetes.io/unreachable
            operator: Exists
            tolerationSeconds: 300
            value: null
        }]
        topologySpreadConstraints: null
        volumes: [class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /usr/share
                type: Directory
            }
            iscsi: null
            name: java-file
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /usr/lib/jvm/java-11-openjdk-11.0.17.0.8-2.el8_6.x86_64/
                type: Directory
            }
            iscsi: null
            name: java-home
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /opt/tibco/tibrv/8.5
                type: Directory
            }
            iscsi: null
            name: tbico-dir
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: class V1HostPathVolumeSource {
                path: /root/testYaml
                type: Directory
            }
            iscsi: null
            name: sh-dir
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: null
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }, class V1Volume {
            awsElasticBlockStore: null
            azureDisk: null
            azureFile: null
            cephfs: null
            cinder: null
            configMap: null
            csi: null
            downwardAPI: null
            emptyDir: null
            ephemeral: null
            fc: null
            flexVolume: null
            flocker: null
            gcePersistentDisk: null
            gitRepo: null
            glusterfs: null
            hostPath: null
            iscsi: null
            name: kube-api-access-s5dsf
            nfs: null
            persistentVolumeClaim: null
            photonPersistentDisk: null
            portworxVolume: null
            projected: class V1ProjectedVolumeSource {
                defaultMode: 420
                sources: [class V1VolumeProjection {
                    configMap: null
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: class V1ServiceAccountTokenProjection {
                        audience: null
                        expirationSeconds: 3607
                        path: token
                    }
                }, class V1VolumeProjection {
                    configMap: class V1ConfigMapProjection {
                        items: [class V1KeyToPath {
                            key: ca.crt
                            mode: null
                            path: ca.crt
                        }]
                        name: kube-root-ca.crt
                        optional: null
                    }
                    downwardAPI: null
                    secret: null
                    serviceAccountToken: null
                }, class V1VolumeProjection {
                    configMap: null
                    downwardAPI: class V1DownwardAPIProjection {
                        items: [class V1DownwardAPIVolumeFile {
                            fieldRef: class V1ObjectFieldSelector {
                                apiVersion: v1
                                fieldPath: metadata.namespace
                            }
                            mode: null
                            path: namespace
                            resourceFieldRef: null
                        }]
                    }
                    secret: null
                    serviceAccountToken: null
                }]
            }
            quobyte: null
            rbd: null
            scaleIO: null
            secret: null
            storageos: null
            vsphereVolume: null
        }]
    }
    status: class V1PodStatus {
        conditions: [class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-08T05:43:49Z
            message: null
            reason: null
            status: True
            type: Initialized
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:47Z
            message: null
            reason: null
            status: True
            type: Ready
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2023-02-27T01:41:47Z
            message: null
            reason: null
            status: True
            type: ContainersReady
        }, class V1PodCondition {
            lastProbeTime: null
            lastTransitionTime: 2022-12-08T05:43:49Z
            message: null
            reason: null
            status: True
            type: PodScheduled
        }]
        containerStatuses: [class V1ContainerStatus {
            containerID: containerd://05f80866920a79470cdc77852fc7a7c8e4080bda7ba578791292bb3f8b81c1ba
            image: docker.io/library/nginx:latest
            imageID: docker.io/library/nginx@sha256:6650513efd1d27c1f8a5351cbd33edf85cc7e0d9d0fcb4ffb23d8fa89b601ba8
            lastState: class V1ContainerState {
                running: null
                terminated: class V1ContainerStateTerminated {
                    containerID: containerd://910cfac3271c55d0650bea122f7c5f54600e47856450b8da8cfe9805ef95b922
                    exitCode: 255
                    finishedAt: 2023-02-27T01:40:25Z
                    message: null
                    reason: Unknown
                    signal: null
                    startedAt: 2023-02-02T01:28:17Z
                }
                waiting: null
            }
            name: tbico-app
            ready: true
            restartCount: 25
            started: true
            state: class V1ContainerState {
                running: class V1ContainerStateRunning {
                    startedAt: 2023-02-27T01:41:46Z
                }
                terminated: null
                waiting: null
            }
        }]
        ephemeralContainerStatuses: null
        hostIP: 172.168.113.110
        initContainerStatuses: null
        message: null
        nominatedNodeName: null
        phase: Running
        podIP: 10.42.0.197
        podIPs: [class V1PodIP {
            ip: 10.42.0.197
        }]
        qosClass: BestEffort
        reason: null
        startTime: 2022-12-08T05:43:49Z
    }
}
